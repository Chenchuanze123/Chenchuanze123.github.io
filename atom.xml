<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CFuYuan&#39;sBlog</title>
  
  
  <link href="https://chenchuanze123.github.io/atom.xml" rel="self"/>
  
  <link href="https://chenchuanze123.github.io/"/>
  <updated>2024-01-18T06:03:23.846Z</updated>
  <id>https://chenchuanze123.github.io/</id>
  
  <author>
    <name>CFuYuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xxxx</title>
    <link href="https://chenchuanze123.github.io/2024/01/18/xxxx/"/>
    <id>https://chenchuanze123.github.io/2024/01/18/xxxx/</id>
    <published>2024-01-18T05:31:53.000Z</published>
    <updated>2024-01-18T06:03:23.846Z</updated>
    
    <content type="html"><![CDATA[<p>111</p><p><img src="/2024/01/18/xxxx/20230724024159.pngorigin_url=image.png&pos_id=img-eu3tnG4e-1701264763992" alt="外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传"> // 这里的图片路径直接填图片名即可，不需要在添加其它目录</p><p><img src="/2024/01/18/xxxx/01/18/xxxx/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hvZG9ycw==,size_16,color_FFFFFF,t_70.png" alt="img"></p><p><img src="/2024/01/18/xxxx/01/18/xxxx/aff53d42422e47a486cb8b7dcf9f335a.jpg" alt="aff53d42422e47a486cb8b7dcf9f335a"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;111&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/01/18/xxxx/20230724024159.pngorigin_url=image.png&amp;pos_id=img-eu3tnG4e-1701264763992&quot; alt=&quot;外链图片转存失败,源站可能有防盗链机制,</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记录：第一次使用Chat-GPT解决毕设中的BUG</title>
    <link href="https://chenchuanze123.github.io/2023/04/05/%E8%AE%B0%E5%BD%95%EF%BC%9A%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Chat-GPT%E8%A7%A3%E5%86%B3%E6%AF%95%E8%AE%BE%E4%B8%AD%E7%9A%84BUG/"/>
    <id>https://chenchuanze123.github.io/2023/04/05/%E8%AE%B0%E5%BD%95%EF%BC%9A%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Chat-GPT%E8%A7%A3%E5%86%B3%E6%AF%95%E8%AE%BE%E4%B8%AD%E7%9A%84BUG/</id>
    <published>2023-04-05T01:55:16.000Z</published>
    <updated>2024-01-17T12:52:50.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://images.cnblogs.com/cnblogs_com/blogs/691938/galleries/2048513/o_211020094029_v2-bdd6a65e2d4d119cedde4b330bd2564f_r.jpg" alt="1"></p><pre><code>     最近在玩chat-GPT，也在研究毕业设计，但是因为论文的课题是深度学习和关系抽取相关的，第一次接触，所以跑代码的过程中遇到了BUG，搜索引擎搜了好久没找到，有点泄气，忽然想到了GPT。</code></pre><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><pre><code>     出人意料。竟然用chat-GPT解决了好多BUG，给大家分享一个解决过程，这哥们太顶了。</code></pre><p><img src="https://img-blog.csdnimg.cn/d01c72e164664626965e761ae3b7a99e.jpeg" alt="2"></p><pre><code>    我先是抛给他我的报错信息，问他如何解决。</code></pre><p><img src="https://img-blog.csdnimg.cn/190f6ea41b2e4a17974e1f4e235f8da6.png" alt="请添加图片描述"></p><p>他进行了回答，然后我用他的方法进行修改，他的回答说我需要实现这个函数，但是我已经实现了，之后我告知他我已实现此函数，依旧报错，如何解决呢</p><p><img src="https://img-blog.csdnimg.cn/8a066694b5ef41789814a2fc1fbd89a1.png" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/72667270f63b4f56b29cfdf5e6251601.png" alt="请添加图片描述"></p><p>我按着它的回答先是看了一眼参数的设置发现没有问题，接着添加了一些输出语句，一运行并没有打印结果。</p><p>我推测应该是完全没有进入到函数中，然后用了它给的默认的函数，发现报错信息变为了“ <font color=#ff0000  ><strong>index 1 is out of bounds for dimension 1 with size 1</strong></font>” ，我便知道解释器识别了默认函数，但是我自定义的函数并没有识别。</p><p>我在想是不是自定义的函数有点问题（毕竟是github上pull来的），我想了想，何不告诉它这个函数的作用，让它帮我写这个函数。</p><p><img src="https://img-blog.csdnimg.cn/7acaead73cb14cd4ac65b4dc8bab0495.png" alt="请添加图片描述"></p><p>不出所料，将他的代码复制过来略作修改，便<font color=#00ff00  ><strong>成功运行</strong></font>，不得不感叹呀，初学深度学习，人工找BUG，不如机器人来的快啊哈哈哈哈哈哈哈 !</p><p><img src="https://img-blog.csdnimg.cn/7eeb6070eef044b0afb556a91504dd59.png" alt="请添加图片描述"></p><p>强烈推荐大家使用chat-GPT解决问题哦~ ~ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/blogs/691938/gallerie</summary>
      
    
    
    
    <category term="解决方案" scheme="https://chenchuanze123.github.io/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
    <category term="Chat-GPT" scheme="https://chenchuanze123.github.io/tags/Chat-GPT/"/>
    
    <category term="报错" scheme="https://chenchuanze123.github.io/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>韩顺平老师的linux基础课（复习笔记）</title>
    <link href="https://chenchuanze123.github.io/2023/01/17/%E9%9F%A9%E9%A1%BA%E5%B9%B3%E8%80%81%E5%B8%88%E7%9A%84linux%E5%9F%BA%E7%A1%80%E8%AF%BE%EF%BC%88%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>https://chenchuanze123.github.io/2023/01/17/%E9%9F%A9%E9%A1%BA%E5%B9%B3%E8%80%81%E5%B8%88%E7%9A%84linux%E5%9F%BA%E7%A1%80%E8%AF%BE%EF%BC%88%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-01-17T05:26:00.000Z</published>
    <updated>2023-02-13T14:08:31.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="唯手熟尔"><a href="#唯手熟尔" class="headerlink" title="唯手熟尔"></a>唯手熟尔</h1><p>今天听了韩老师的课程，深受启发啊！！！<br>卖油翁的“我亦无他，唯手熟尔”，只是手法熟练罢了！！<br>还有老黄牛的坚持，别人把时间都放在努力上，而我把时间放在选择上，还习惯于放弃，这是极不可取的，认定一件事，就应该坚持！！！</p><h1 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h1><p>一开始是比较简单的软件安装与虚拟机创建<br>手动分区时，boot占1G，swap占2G，根目录/占17G，其中boot与根目录都选标准分区和ext4，swap选标准分区和swap。在实际的开发环境时，要勾选kdump哦，而且实际开发时root的密码一定要复杂一点，介绍一个<a href="https://suijimimashengcheng.bmcx.com/">随机生成密码网址</a>，linux建议登录时用权限比较低的用户登录，所以还要设置一个用户名和密码哦<br>然后韩老师讲了网络连接的桥接模式和NAT模式<br>桥接模式是说我们创建的虚拟机也会占用我们网段中的一个IP，主机多了会造成IP冲突的问题<br>NAT是说我会在主机处生成一个虚拟网卡，它和创建的虚拟机的IP是 一个网段的但是与我主机的ip不是一个网段，当我用虚拟机访问其他主机是会发生地址转换，这便是NAT</p><p>然后讲了虚拟机的克隆，用文件夹复制或者用VM克隆（记得关闭正在运行的linux系统）<br>然后是虚拟机快照，就是回到虚拟机原先的一个状态，这个功能可以在将要做一些危险操作的时候备份自己当前的系统。<br>接下来就是连接linux和windows的工具vmtools，可以是虚拟机与主机共享主机中的文件夹</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>然后是linux的目录结构，什么样的文件夹存放什么样的内容是规定好的<br>例如etc规定是存放配置文件、boot是启动时的配置、dev是设备管理器<br>linux会把所有的硬件映射成一个文件去管理，一定要把linux的树状目录记在心中<br><img src="https://img-blog.csdnimg.cn/fffddfc561c04a468ba3f84947e1c29c.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1dc69d0b64de4158b7039dc9904c2a81.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5e34c9324a414eb9b0c1ce3e2c96329e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0c7f53d1bf914708afe7aeaed7ccfec9.png" alt="在这里插入图片描述"></p><p>根目录是    /<br><img src="https://img-blog.csdnimg.cn/3f8218182fd647c0a2699a1cec4e71c1.png" alt="在这里插入图片描述"></p><p>一句经典的话：在linux世界，一切皆文件<br>远程登录linux需要Xshell，登录上之后若要上传下载文件需要Xftp<br>远程登录呢，在本地打开Xshell然后新建会话，输入ip，然后输入用户名和密码就可以远程登录了<br>上传文件呢，也需要新建会话，输入ip，同上<br>示意图：<br><img src="https://img-blog.csdnimg.cn/dfe0db9b11dd41d7b7bb3c9ddc2f0a8d.png" alt="在这里插入图片描述"></p><p>centos查询ip地址命令：<code>ifconfig</code><br> swap分区临时充当内存<br> <a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=15&spm_id_from=pageDriver&vd_source=829c06bc268bb81296178a37d18537e1">今天就学到这， 明天接着学！</a><br> <img src="https://img-blog.csdnimg.cn/7155f37f68b74de28c0ed48f5e31c118.png" alt="在这里插入图片描述"></p><h1 id="vi与vim"><a href="#vi与vim" class="headerlink" title="vi与vim"></a>vi与vim</h1><p>三种模式：<br>正常、插入、命令行<br><img src="https://img-blog.csdnimg.cn/cbe722407a884c80a1f2f51a183ad7e4.png" alt="在这里插入图片描述"><br>如何在插入模式保存并推出呢？先按esc，在输入:wq(表示写入并推出)<br><img src="https://img-blog.csdnimg.cn/eb9c2a8628b545cb9834a393ba572e6f.png" alt="在这里插入图片描述"><br>快捷键：</p><p><img src="https://img-blog.csdnimg.cn/de1bfb47069045fcab214b0ad09416ac.png" alt="在这里插入图片描述"></p><p>一般模式会有一些常用的快捷键，yy p dd G gg u等等<br>编辑模式和命令行模式回到一般模式都用esc</p><p><img src="https://img-blog.csdnimg.cn/d579ce02833542fdb38dc2e5136c9b45.png" alt="在这里插入图片描述"></p><p>sync命令：将内存数据同步到此磁盘<br><img src="https://img-blog.csdnimg.cn/23cb47aa5e874171a261bb7d06e85bf6.png" alt="在这里插入图片描述"></p><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><p>su切换至root用户<br>添加用户需要root权限，使用命令<code>useradd 用户名</code><br>设定或修改用户名密码，如果在非root下修改只能修改自己的用户密码，而root可以修改指定用户的密码<code>psaawd 用户名</code>，如果不指定用户名则默认修改正在登陆的用户名密码。<br><code>pwd</code>显示当前你在哪个目录下<br>删除用户，但不删除home下的目录则用<code>userdel 用户名</code>，删除用户，同时删除home下的目录<code>userdel -r 用户名</code><br>查询用户信息：<code>id 用户名</code><br>切换用户用<code>su - 用户名</code><br>权限由高到低切换用户不需要输入密码，反之则需要<br> 用户组就是将相同权限的用户放在一个组中，或者都在A组的用户都拥有权期A<br> 新建组<code>groupadd 组名</code><br> 当添加一个用户不指定它的组名时，会默认用用户名当他的组名，单独成一个组<br> 在组中新建用户<code>useradd -g wudang zwj</code>（表示把张无忌用户添加到武当组中，-g的意思是group ）<br> 修改用户至其他组<code>usemod -g emei zwj</code>（表示把张无忌修改到峨眉组中）<br> 对shell的解释<br> <img src="https://img-blog.csdnimg.cn/995dbfb7cc8d4c3986b93105599db2dd.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/d7f206e2ea8b4a898e7c96935d4a67f7.png" alt="在这里插入图片描述"></p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>添加用户:useradd zs<br>修改密码:passwd zs<br>删除用户:userdel zs<br>查询用户:id zs<br>切换用户:su - zs<br>新建组:groupadd wudang<br>在组中新建用户:useradd -g wudang zwj<br>修改用户所在组:usermod -g wudang clx</p><p>运行状态分为七种，但常用的是3和5<br><img src="https://img-blog.csdnimg.cn/38c30db400a340c7a4a6a0139e2e5e0f.png" alt="在这里插入图片描述"><br>切换至状态3<code>init 3</code><br>查看当前的运行环境<code>systemctl get-default</code><br>设置运行环境<code>system set-default  multi-user.target</code>(设置为多用户有网络服务)<br><code>systemctl set-default graphical.target</code>(设置为图形化界面）</p><h1 id="忘记root密码怎么办？"><a href="#忘记root密码怎么办？" class="headerlink" title="忘记root密码怎么办？"></a>忘记root密码怎么办？</h1><p>重新启动系统，在选择操作系统时按e<br><img src="https://img-blog.csdnimg.cn/1372fbc665e04b85b8a69c2a3ce63c82.png" alt="在这里插入图片描述"><br>然后找到linux16，将光标移至最后一行再打一个空格<br><img src="https://img-blog.csdnimg.cn/5dc56ba3226448168018a3c2c766b9a9.png" alt="在这里插入图片描述"></p><p>在后面输入<code>init=/bin/sh</code>然后按ctrl+X进入单用户模式，接着输入<code>mount -o remount,rw / </code>,注意单词有空格，完成后回车，然后输入<code>passwd</code>，回车，输入密码，再次确认密码。然后输入<code>touch / .autorelabel</code>（注：touch和/后面有一个空格）然后回车，接着输入<code>exec /sbin/init</code>然后等待一段时间之后系统重启，新密码生效（耐心等待）</p><p>man命令可以查询命令的帮助信息例如<code>man ls</code>就是查询ls命令的帮助信息，两个常用的<code>ls -a</code>和<code>ls -l</code>，分别是展示所有文件（包括隐藏文件，在linux下所有隐藏文件都是以.开头的）和以单列的方式展示文件，这两个可以一起用<code>ls -la</code>表示以单列的方式展示所有文件，因此选项跟选项是可以一起用的<br><a href="https://www.bilibili.com/video/BV1Sv411r7vd?p=27&spm_id_from=pageDriver&vd_source=829c06bc268bb81296178a37d18537e1">今天就学到这，明天继续</a><br><img src="https://img-blog.csdnimg.cn/072df0a029674659b05d8a5263ac1b2e.png" alt="在这里插入图片描述"></p><h1 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h1><p><code>cd ..</code>为回到上一级目录<br><code>cd ~</code>为回到自己的家目录<br>使用<code>top</code>打开linux 的任务管理器</p><p>创建目录：<code>mkdir</code><br>创建多级目录（也就是目录中的目录）：<code>mkdir -p /home/animal/dog</code></p><p>删除目录：<code>rmdir 目录名</code>（必须是空目录）<br>删除非空目录：<code>rm -rf 目录名 </code></p><p><code>touch</code>:创建空文件</p><p>复制文件夹或者文件命令：cp [选项] source dest（把文件从源目录复制到目的目录）<br><code>-r</code>表示递归复制整个文件文件夹<br><img src="https://img-blog.csdnimg.cn/46baef7dddc343a1a3eb632c2d836c6d.png" alt="在这里插入图片描述"></p><p><code>cp -r /home/animal.hello.txt /home/bbb</code><br><img src="https://img-blog.csdnimg.cn/4103a2c8631d43d48fee8612763e0055.png" alt="在这里插入图片描述"><br>例如：<code>\cp -r /home/animal.hello.txt /home/bbb</code><br><img src="https://img-blog.csdnimg.cn/ff72ac47951e4f15beaf99fef8154cbb.png" alt="在这里插入图片描述"></p><p>在linux中，sshd是一个客户端软件，是可以通过网络在主机中开启shell的服务；sshd服务使用SSH协议可以用来进行远程控制，或在计算机之间传送文件，sshd使用加密传输，比使用明文传输的telnet传输文件要安全很多。</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p><img src="https://img-blog.csdnimg.cn/1003024d935742e797e3a59c8edcf2b9.png" alt="在这里插入图片描述"><br>可以使用<code>ps -aux</code>来整合上面的三条命令</p><p><img src="https://img-blog.csdnimg.cn/e5e1a29701c34f5a8b787a7250cff398.png" alt="在这里插入图片描述"><br>需求：找到sshd进程的父进程？<br>使用<code>ps -ef | grep sshd</code>找到sshd进程，并且也就知道了它的PPID（也就是父进程），然后根据PID再找到父进程</p><p>终止进程<br><code>关键字kill和killall</code><br>通过PID杀死进程，或通过进程名杀死进程<br>参数-9表示强迫进程立即停止</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;唯手熟尔&quot;&gt;&lt;a href=&quot;#唯手熟尔&quot; class=&quot;headerlink&quot; title=&quot;唯手熟尔&quot;&gt;&lt;/a&gt;唯手熟尔&lt;/h1&gt;&lt;p&gt;今天听了韩老师的课程，深受启发啊！！！&lt;br&gt;卖油翁的“我亦无他，唯手熟尔”，只是手法熟练罢了！！&lt;br&gt;还有老黄牛的坚持，</summary>
      
    
    
    
    
    <category term="OS" scheme="https://chenchuanze123.github.io/tags/OS/"/>
    
    <category term="linux" scheme="https://chenchuanze123.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>phpMyAdmin中的MYSQL服务打不开？| 无法登录DVWA 的问题 | Illegal mix of collations for operation ‘UNION‘</title>
    <link href="https://chenchuanze123.github.io/2022/07/10/phpMyAdmin%E4%B8%AD%E7%9A%84MYSQL%E6%9C%8D%E5%8A%A1%E6%89%93%E4%B8%8D%E5%BC%80%EF%BC%9F/"/>
    <id>https://chenchuanze123.github.io/2022/07/10/phpMyAdmin%E4%B8%AD%E7%9A%84MYSQL%E6%9C%8D%E5%8A%A1%E6%89%93%E4%B8%8D%E5%BC%80%EF%BC%9F/</id>
    <published>2022-07-10T04:16:47.000Z</published>
    <updated>2023-02-11T07:39:00.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="phpMyAdmin中的MYSQL服务打不开？"><a href="#phpMyAdmin中的MYSQL服务打不开？" class="headerlink" title="phpMyAdmin中的MYSQL服务打不开？"></a>phpMyAdmin中的MYSQL服务打不开？</h2><p><img src="https://img-blog.csdnimg.cn/48d2a6d4adba4a45ab3d94162884a1d9.png" alt="在这里插入图片描述"><br>打开PHPStudy之后点击mysql服务启动之后，会自动关闭，也就是无法正常启动，如何解决这个问题呢？<br>网上看了很多教程说是端口号冲突，然后我用那个方法无法正常解决我的问题，然后就自己捣鼓了一下，可以正常打开了</p><h3 id="解决方法如下："><a href="#解决方法如下：" class="headerlink" title="解决方法如下："></a>解决方法如下：</h3><p><strong>不过使用 这个方法有个前提条件是你的任务管理器中有mysqld.exe进程</strong>然后按照一下步骤进行操作：</p><ol><li>打开任务管理器找到mysqld.exe,右击打开文件所在位置</li><li>将任务管理器中的mysqld.exe进程结束</li><li>启动PHPstudy中的MySQL服务，再打开mysqld.exe</li></ol><h2 id="无法登录DVWA-的问题"><a href="#无法登录DVWA-的问题" class="headerlink" title="无法登录DVWA 的问题"></a>无法登录DVWA 的问题</h2><p>最后发现原来是账号和密码写错了，DVWA的默认账号和密码是admin/password，结果我直接用数据库的密码了emmm</p><h2 id="dvwa中SQL注入出现Illegal-mix-of-collations-for-operation-‘UNION’问题"><a href="#dvwa中SQL注入出现Illegal-mix-of-collations-for-operation-‘UNION’问题" class="headerlink" title="dvwa中SQL注入出现Illegal mix of collations for operation ‘UNION’问题"></a>dvwa中SQL注入出现Illegal mix of collations for operation ‘UNION’问题</h2><p>在输入框输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="string">&#x27; union select 1,column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27;#</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d7ff1016365b4906b84c6430171eea63.png" alt="在这里插入图片描述"></p><p>报错：</p><p><img src="https://img-blog.csdnimg.cn/e390076bbe8f4d05b3ed462c77945a08.png" alt="在这里插入图片描述"></p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>此问题为编码排序规则问题，将数据库中的数据编码排列由<code>utf8_unicode_ci</code>设置为<code>utf8_general_ci</code><br>先打开phpmyadmin，然后数据库dvwa，然后点击操作：</p><p><img src="https://img-blog.csdnimg.cn/2ce1673f5de1426c8c04789290c77d50.png" alt="在这里插入图片描述"><br>再次输入</p><p><img src="https://img-blog.csdnimg.cn/b732d64d78774174a7abbead4c92a1d7.png" alt="在这里插入图片描述"><br>问题解决！</p><p>以上就是这三个问题的解决方案，欢迎大家留言一起交流探讨！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;phpMyAdmin中的MYSQL服务打不开？&quot;&gt;&lt;a href=&quot;#phpMyAdmin中的MYSQL服务打不开？&quot; class=&quot;headerlink&quot; title=&quot;phpMyAdmin中的MYSQL服务打不开？&quot;&gt;&lt;/a&gt;phpMyAdmin中的MYSQL</summary>
      
    
    
    
    <category term="网络安全" scheme="https://chenchuanze123.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="渗透测试" scheme="https://chenchuanze123.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="DVWA" scheme="https://chenchuanze123.github.io/tags/DVWA/"/>
    
  </entry>
  
  <entry>
    <title>算法期末复习</title>
    <link href="https://chenchuanze123.github.io/2022/06/07/%E7%AE%97%E6%B3%95%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>https://chenchuanze123.github.io/2022/06/07/%E7%AE%97%E6%B3%95%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-06-07T02:02:50.000Z</published>
    <updated>2022-06-16T15:01:28.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>快要期末考试啦，对算法做一个总结，以备自己后续的学习。</p><p>看之前可以先重点看看目录，这样可以明确这篇文章的结构，并且迅速找到需要的知识</p><h1 id="算法基础知识"><a href="#算法基础知识" class="headerlink" title="算法基础知识"></a>算法基础知识</h1><h2 id="算法的五个特性：（必考）"><a href="#算法的五个特性：（必考）" class="headerlink" title="算法的五个特性：（必考）"></a>算法的五个特性：（必考）</h2><ol><li>输入</li><li>输出</li><li>有穷</li><li>可行</li><li>确定</li></ol><h2 id="常用的描述算法的方法："><a href="#常用的描述算法的方法：" class="headerlink" title="常用的描述算法的方法："></a>常用的描述算法的方法：</h2><ul><li>自然语言</li><li>流程图</li><li>伪代码</li><li>程序设计语言 </li></ul><h2 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h2><p>​    概念：</p><ul><li>O(n):用来描述增长率的上限</li><li>Ω(n):用来描述增长率的下限</li></ul><p><strong>最优算法</strong>：大Ω符号常常与大O符号配合以证明某问题的一个特定算法是该问题的最优算法，或是该问题中的某算法类中的最优算法。一般情况下，如果能够证明某问题的时间下界是Ω(g(n))来求解该问题的任何算法，都认为是求解该问题的最优算法</p><p><strong>主定理</strong>：</p><p><img src="https://img-blog.csdnimg.cn/cf1accd1cf0c44e6aa731c3e02ca059a.png" alt="在这里插入图片描述"></p><p>习题：</p><h1 id="基本的算法设计技术"><a href="#基本的算法设计技术" class="headerlink" title="基本的算法设计技术"></a>基本的算法设计技术</h1><h2 id="分治法与减治法"><a href="#分治法与减治法" class="headerlink" title="分治法与减治法"></a>分治法与减治法</h2><h3 id="基本思路："><a href="#基本思路：" class="headerlink" title="基本思路："></a>基本思路：</h3><p>​    <strong>分治法</strong>：将一个难以直接解决的大问题划分成一些规模较小的子问题，分别求解各个子问题，然后将各个子问题的解合并。分为三步：划分、求解子问题、合并。</p><p>​    <strong>减治法</strong>：将一个难以直接解决的大问题划分为若干子问题，但是这些子问题不需要分别求解，只需求解其中的一个子问题，因而也就无需对子问题的解进行合并。</p><h3 id="同与异："><a href="#同与异：" class="headerlink" title="同与异："></a>同与异：</h3><p>同：都需要划分子问题，都需要求解子问题;它俩的编程思想都是<strong>递归</strong></p><p>异：减治法无须合并子问题，只需要找出子问题的解与原问题解之间的对应关系，或直接求解子问题便得原问题的解。</p><h3 id="适用范围："><a href="#适用范围：" class="headerlink" title="适用范围："></a>适用范围：</h3><p>分治法：最好使子问题的规模大致相同（子问题平衡）</p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p>​    分治法：</p><ol><li>归并排序</li><li>快速排序</li></ol><p>​     减治法：</p><ol><li>折半查找</li><li>二叉查找树</li><li>堆排序</li></ol><p><strong>对于排序与查找算法没有最好的，只有最合适的。</strong></p><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p><strong>核心思想</strong>：</p><p>不断地将序列一分为二（若是奇数个数则向上取整，例如7/2=3.5向上取整则为4，因此左边四个数，右边三个数）直至分到只有一个数为止，然后开始合并并排序 。</p><p><strong>详细解读</strong>：<img src="https://www.runoob.com/wp-content/uploads/2019/05/1557906108-5066-20161218163120151-452283750.png" alt="img"></p><p> 首先是分然后是治，先不断地一分为二，然后不断地合二为一。</p><p>我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现合并的步骤。 </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/05/1557906108-2034-20161218194508761-468169540.png" alt="img"><img src="https://www.runoob.com/wp-content/uploads/2019/05/1557906108-7614-20161218194621308-588010220.png" alt="img"></p><p>下面是两个应用，一个为偶序列，一个为奇序列</p><p><img src="https://img-blog.csdnimg.cn/398664d194e84951b0cebd1f9e5e1856.jpeg" alt="请添加图片描述"></p><p><strong>代码</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> *data, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">1</span> == end - start)<span class="comment">//如果区间中只有两个元素，则对这两个元素进行排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(data[start] &gt; data[end])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp  = data[start];</span><br><span class="line">            data[start] = data[end];</span><br><span class="line">            data[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == end - start)<span class="comment">//如果只有一个元素，则不用排序</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//继续划分子区间，分别对左右子区间进行排序</span></span><br><span class="line">        <span class="built_in">merge_sort</span>(data,start,(end-start+<span class="number">1</span>)/<span class="number">2</span>+start,result);</span><br><span class="line">        <span class="built_in">merge_sort</span>(data,(end-start+<span class="number">1</span>)/<span class="number">2</span>+start+<span class="number">1</span>,end,result);</span><br><span class="line">        <span class="comment">//开始归并已经排好序的start到end之间的数据</span></span><br><span class="line">        <span class="built_in">merge</span>(data,start,end,result);</span><br><span class="line">        <span class="comment">//把排序后的区间数据复制到原始数据中去</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i &lt;= end;++i)</span><br><span class="line">            data[i] = result[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> merge的过程为： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> *data,<span class="keyword">int</span> start,<span class="keyword">int</span> end,<span class="keyword">int</span> *result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left_length = (end - start + <span class="number">1</span>) / <span class="number">2</span> + <span class="number">1</span>;<span class="comment">//左部分区间的数据元素的个数</span></span><br><span class="line">    <span class="keyword">int</span> left_index = start;</span><br><span class="line">    <span class="keyword">int</span> right_index = start + left_length;</span><br><span class="line">    <span class="keyword">int</span> result_index = start;</span><br><span class="line">    <span class="keyword">while</span>(left_index &lt; start + left_length &amp;&amp; right_index &lt; end+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//对分别已经排好序的左区间和右区间进行合并</span></span><br><span class="line">        <span class="keyword">if</span>(data[left_index] &lt;= data[right_index])</span><br><span class="line">            result[result_index++] = data[left_index++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            result[result_index++] = data[right_index++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(left_index &lt; start + left_length)</span><br><span class="line">        result[result_index++] = data[left_index++];</span><br><span class="line">    <span class="keyword">while</span>(right_index &lt; end+<span class="number">1</span>)</span><br><span class="line">        result[result_index++] = data[right_index++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 现在对程序进行测试： </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> data[] = &#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">22</span>,<span class="number">20</span>,<span class="number">33</span>,<span class="number">16</span>,<span class="number">20</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> length = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> result[length];</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Before sorted:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; length;++i)</span><br><span class="line">        cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;After sorted:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">merge_sort</span>(data,<span class="number">0</span>,length<span class="number">-1</span>,result);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; length;++i)</span><br><span class="line">        cout &lt;&lt; data[i] &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/69fde6abaa6fbf081c0cd299bc73e87a.png" alt="img"></p><p><strong>总结</strong>：</p><p>归并排序的性能不受输入数据的影响，始终都是 O(nlogn) 的时间复杂度。代价是需要额外的内存空间。</p><h4 id="快速排序："><a href="#快速排序：" class="headerlink" title="快速排序："></a>快速排序：</h4> <HR> <p><strong>核心思想</strong></p><p> 快速排序算法的思想非常简单，在待排序的数列中，我们首先要找一个数字作为基准数（这只是个专用名词）。为了方便，我们一般选择第 1 个数字作为基准数（其实选择第几个并没有关系）。接下来我们需要把这个待排序的数列中小于基准数的元素移动到待排序的数列的左边，把大于基准数的元素移动到待排序的数列的右边。这时，左右两个分区的元素就相对有序了；接着把两个分区的元素分别按照上面两种方法继续对每个分区找出基准数，然后移动，直到各个分区只有一个数时为止。</p><p>因此可以总结为三点：</p><ul><li>1．先从数列中取出一个数作为基准数。</li><li>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li><li>3．再对左右区间重复第二步，直到各区间只有一个数。  </li></ul><p> 那么移动元素，该怎么移动呢？ </p><p> 快速排序的操作是这样的：首先从数列的最右边（也就是最后一个数字）开始往左边找，我们设这个下标为 j，也就是进行减减操作（j–），找到第 1 个比基准数小的值，让它与基准值交换；接着从左边开始往右边找，设这个下标为 i，然后执行加加操作（i++），找到第 1 个比基准数大的值，让它与基准值交换；然后继续寻找，直到 i 与 j 相遇时结束，最后基准值所在的位置即 k 的位置，也就是说 k 左边的值均比 k 上的值小，而 k 右边的值都比 k 上的值大。 </p><p><strong>详细解读</strong>：</p><p><img src="https://img-blog.csdnimg.cn/02e89e211b0345ba917a79e76a1ba532.jpeg" alt="请添加图片描述"></p><p><strong>代码</strong>：（Java版）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.array = array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> begin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> key = src[begin];</span><br><span class="line">            <span class="keyword">int</span> i = begin;</span><br><span class="line">            <span class="keyword">int</span> j = end;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; src[j] &gt; key) &#123;</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    src[i] = src[j];</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; src[i] &lt; key) &#123;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                    src[j] = src[i];</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            src[i] = key;</span><br><span class="line">            quickSort(src, begin, i - <span class="number">1</span>);</span><br><span class="line">            quickSort(src, i + <span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="堆排序："><a href="#堆排序：" class="headerlink" title="堆排序："></a>堆排序：</h4><p><strong>核心思想</strong>：</p><p>​        堆排序中的“堆”的含义是完全二叉树。算法的具体操作步骤分为4步：</p><ol><li>先将无序序列画成一个完全二叉树的形式</li><li>再自底向上，自右向左对完全二叉树中的元素进行比较得到大根堆或小根堆</li><li>然后将完全二叉树的根节点与堆中最右下角的元素互换，互换之后根节点脱落，从此此根节点不再参与比较，而是等待之后的根节点相继脱落一起形成有序区。</li><li>之后一种重复2,3步便可得到有序区（有序序列）。</li></ol><p>这里说一下什么是<strong>完全二叉树</strong>，同时也区分一下完全二叉树与<strong>满二叉树</strong>的区别</p><p>先看图：</p><p><img src="https://img-blog.csdn.net/20150708083929583?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><strong>完全二叉树</strong>：设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，<br>第 h 层所有的结点都连续集中在最左边（例如如果在上图的完全二叉树的g结点接一个k结点，则这个数便不再是完全二叉树）</p><p><strong>满二叉树</strong>：深度为k且有2^k-1个结点的二叉树称为满二叉树</p><p><strong>详细解读</strong>：<img src="https://pic1.zhimg.com/80/v2-ef7777135fd9a32d612adb46d9316ab9_720w.gif" alt="img"></p><p><strong>代码</strong>：（C++）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">max_heapify</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//建立父节点指标和子节点指标</span></span><br><span class="line">    <span class="keyword">int</span> dad = start;</span><br><span class="line">    <span class="keyword">int</span> son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (son &lt;= end) &#123; <span class="comment">//若子节点指标在范围内才做比较</span></span><br><span class="line">        <span class="keyword">if</span> (son + <span class="number">1</span> &lt;= end &amp;&amp; arr[son] &lt; arr[son + <span class="number">1</span>]) <span class="comment">//先比较两个子节点大小，选择最大的</span></span><br><span class="line">            son++;</span><br><span class="line">        <span class="keyword">if</span> (arr[dad] &gt; arr[son]) <span class="comment">//如果父节点大于子节点代表调整完毕，直接跳出函数</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//否则交换父子内容再继续子节点和孙节点比较</span></span><br><span class="line">            <span class="built_in">swap</span>(arr[dad], arr[son]);</span><br><span class="line">            dad = son;</span><br><span class="line">            son = dad * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化，i从最后一个父节点开始调整</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">max_heapify</span>(arr, i, len - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//先将第一个元素和已经排好的元素前一位做交换，再从新调整(刚调整的元素之前的元素)，直到排序完毕</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]);</span><br><span class="line">        <span class="built_in">max_heapify</span>(arr, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">int</span>) <span class="built_in"><span class="keyword">sizeof</span></span>(arr) / <span class="built_in"><span class="keyword">sizeof</span></span>(*arr);</span><br><span class="line">    <span class="built_in">heap_sort</span>(arr, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>​        堆是一种很好做调整的结构，在算法题里面使用频度很高。常用于想知道最大值或最小值的情况，比如优先级队列，作业调度等场景。堆排序的时间性能是O(logn) </p><h4 id="折半查找："><a href="#折半查找：" class="headerlink" title="折半查找："></a>折半查找：</h4><p><strong>核心思想</strong>：</p><p>​        在一个有序表中，每次取目标值与序列中间的值进行比较。若目标值等于值，则查找成功，返回此值的位置；若目标值大于此值，则说明目标值在该查找表的右半区，此时我们往右半区进行查找；若目标值小于此值，则说明目标值在该查找表的右左半区此时我们往左半区进行查找。如此往复，直至查找成功；若无和目标值相等的记录数，则查无此值。</p><p><strong>详细解读</strong>：<img src="https://img-blog.csdnimg.cn/e570934d48f84a51b71794961445e188.jpeg"></p><p><strong>代码</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//折半查找,又称为二分查找 ,条件保证要好排序的，不适合应用在频繁的插入操作，因为会打乱顺序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binary_Search</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low,high,mid;</span><br><span class="line">    low = <span class="number">0</span>;    <span class="comment">//定义最低下标为记录首位</span></span><br><span class="line">    high = n;   <span class="comment">//记录最高下标为记录末位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ( low &lt;= high )</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; a[mid]) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;<span class="comment">//最高位下标调小 一位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; a[mid])&#123;</span><br><span class="line">            low = mid + <span class="number">1</span>; <span class="comment">//最低下标调整到中位下标大一位</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">//代表就是次位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//没有找到返回-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需求要查找8, 如果用传统的方式 要查找8次才能得出</span></span><br><span class="line">    <span class="keyword">int</span> index;<span class="comment">//下标</span></span><br><span class="line">    index = Binary_Search(a, <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>),<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;找到了,index为:%d&quot;</span>,index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><pre><code>     二分查找有个很重要的特点，就是不会查找数列的全部元素，而查找的数据量其实正好符合元素的对数，正常情况下每次查找的元素都在一半一半地减少。所以二分查找的[时间复杂度](http://data.biancheng.net/view/2.html)为 `O(log2n)` 是毫无疑问的。当然，最好的情况是只查找一次就能找到，但是在最坏和一般情况下的确要比顺序查找好了很多。 </code></pre><h4 id="二叉查找树（二叉搜索树）："><a href="#二叉查找树（二叉搜索树）：" class="headerlink" title="二叉查找树（二叉搜索树）："></a>二叉查找树（二叉搜索树）：</h4><p><strong>核心思想</strong>：</p><p>​            左右子树与根节点的关系（左子树比根节点都小，右子树比根节点都大）</p><p><strong>详细解读</strong>：<img src="https://pic3.zhimg.com/v2-a979f7099bf4d4d62ad2ab3ef8c95baa_b.webp" alt="动图"></p><p>在BST中搜索一个值是非常简单和高效的。</p><p><img src="https://pic2.zhimg.com/80/v2-b45aa1eee3d524e00d4207f81fcadb19_720w.jpg" alt="img"></p><p>看上面的树，假设要搜索7这个节点。首先从Root节点出发，我们知道7大于3，所以会走到右子树6，然后因为7也大于6，所以会继续往右子树走，到了9，因为7小于9，所以会向左子树走，走到7，发现7等于7，所以找到要搜索的节点。</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里先定义出节点的结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">    <span class="keyword">public</span> Node left;</span><br><span class="line">    <span class="keyword">public</span> Node right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> _data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = _data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二叉搜索树结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个函数是 private 的，递归调用，插入节点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">RecursionInsert</span><span class="params">(Node node, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (data &lt; node.data)</span><br><span class="line">        &#123;</span><br><span class="line">            node.left = RecursionInsert(node.left, data);</span><br><span class="line">            node.left.parent = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (data &gt; node.data)</span><br><span class="line">        &#123;</span><br><span class="line">            node.right = RecursionInsert(node.right, data);</span><br><span class="line">            node.right.parent = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外开放的 插入 接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            root = RecursionInsert(root, data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            RecursionInsert(root, data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按层序打印二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LevelOrderTraversal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Queue&lt;Node&gt; q = <span class="keyword">new</span> Queue&lt;Node&gt;();</span><br><span class="line">        q.Enqueue(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (q.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Node currNode = q.Dequeue();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currNode.left != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.Enqueue(currNode.left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (currNode.right != <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                q.Enqueue(currNode.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 括号里面是父节点的值</span></span><br><span class="line">            string msg = string.Format(<span class="string">&quot;&#123;0&#125;(&#123;1&#125;)&quot;</span>, currNode.data, currNode.parent != <span class="keyword">null</span> ? currNode.parent.data.ToString() : <span class="string">&quot;null&quot;</span>);</span><br><span class="line">            Debug.Log(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个二叉搜索树</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/* Let us create following BST</span></span><br><span class="line"><span class="comment">          50</span></span><br><span class="line"><span class="comment">       /     \</span></span><br><span class="line"><span class="comment">      30      70</span></span><br><span class="line"><span class="comment">     /  \    /  \</span></span><br><span class="line"><span class="comment">   20   40  60   80 */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        BST bst = <span class="keyword">new</span> BST();</span><br><span class="line">        bst.Insert(<span class="number">50</span>);</span><br><span class="line">        bst.Insert(<span class="number">30</span>);</span><br><span class="line">        bst.Insert(<span class="number">20</span>);</span><br><span class="line">        bst.Insert(<span class="number">40</span>);</span><br><span class="line">        bst.Insert(<span class="number">70</span>);</span><br><span class="line">        bst.Insert(<span class="number">60</span>);</span><br><span class="line">        bst.Insert(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        bst.LevelOrderTraversal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p> 二叉查找树查找成功的平均查找长度为: ASL = [ (n+1)/n] * log2 (n+1) - 1 [公式1] 其时间复杂度是: <strong>O (log2 (n))</strong> </p><h4 id="插入排序："><a href="#插入排序：" class="headerlink" title="插入排序："></a>插入排序：</h4> <HR> <p><strong>核心思想</strong>：</p><p>打扑克＋遍历，打过扑克的朋友对于理解这个排序应该是手到擒来的，我们在摸牌阶段要不断调整牌的顺序，每次摸一张牌查到原来序列当中，其操作流程就是与每一张牌比大小然后放在比它大的牌前面。</p><p><strong>详细解读</strong>：<img src="https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif" alt="img"></p><p><strong>代码</strong>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> key=arr[i];</span><br><span class="line">                <span class="keyword">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">while</span>((j&gt;=<span class="number">0</span>) &amp;&amp; (key&lt;arr[j]))&#123;</span><br><span class="line">                        arr[j+<span class="number">1</span>]=arr[j];</span><br><span class="line">                        j--;</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j+<span class="number">1</span>]=key;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p> 插入排序的时间复杂度为O(n^2) </p><h2 id="动态规划法与贪心法"><a href="#动态规划法与贪心法" class="headerlink" title="动态规划法与贪心法"></a>动态规划法与贪心法</h2> <HR> <h3 id="基本思路：-1"><a href="#基本思路：-1" class="headerlink" title="基本思路："></a>基本思路：</h3><p><strong>动态规划法：</strong></p><ol><li><p>划分子问题</p><p>将原问题分解为若干个子问题，并且子问题之间具有重叠关系（交集）</p></li><li><p>确定动态规划函数</p><p>根据子问题之间的重叠关系，找出满足子问题的递推关系式（即动态规划函数），此乃动态规划法之关键，<strong>找递归关系式往往需要自顶向下</strong></p></li><li><p>填写表格</p><p>以自底向上的方式计算各个子问题的解并填表，实现动态规划过程</p></li></ol><p><strong>贪心法：</strong>其核心便是四个字“目光短浅”，即在解决问题时，只根据当前已有的信息做出最优选择，而不管将来有什么选择，因此其算法希望通过局部最优的选择达到全局最优的选择 。</p><h3 id="同与异：-1"><a href="#同与异：-1" class="headerlink" title="同与异："></a>同与异：</h3><p><strong>同：</strong>要求原问题必须有最优子结构。</p><p><strong>异：</strong>贪心法的计算方式“自顶向下”，但并不等待子问题求解完毕后再选择使用哪一        个，而是通过一种策略直接选择一个子问题去求解，没被选择的子问题直接抛        弃。这种所谓“最优选择”的正确性需要用归纳法证明。而动态规划不管是采用        自底向上还是自顶向下的计算方式，都是从边界开始向上得到目标问题的解        （即考虑所有子问题）。 </p><p><strong>贪心：</strong>壮士断腕的决策，只要选择，绝不后悔。</p><p><strong>动态规划：</strong>要看哪个选择笑到最后，暂时领先说明不了问题。</p><h3 id="适用范围：-1"><a href="#适用范围：-1" class="headerlink" title="适用范围："></a>适用范围：</h3><p> <strong>动态规划：</strong>多用来解决多阶段决策最优化（最值与优化）问题。</p><p><strong>贪心法：</strong>求解最优化问题，而且对于许多问题都能都到整体最优解，即使不能得到整体最优解，通常也是最优解的很好近似。</p><h3 id="应用：-1"><a href="#应用：-1" class="headerlink" title="应用："></a>应用：</h3><h5 id="多段图的最短路径问题："><a href="#多段图的最短路径问题：" class="headerlink" title="多段图的最短路径问题："></a>多段图的最短路径问题：</h5><p>​    首先它是个最短路径问题，其次其中的多段的意思，是将图在先不考虑边的情况下，将顶点们分成几个部分。</p><p><img src="https://img-blog.csdnimg.cn/513e760016e04b3197b876481556c2e7.png" alt="请添加图片描述"></p><p>如上图所示将图分为了五个部分，也就是分成了5段，分成多个段的目的其实与动态规划解决问题的特性——<strong>多阶段</strong>是契合的。</p><p><strong>核心思想</strong>：</p><p> 我们可以把情况从特殊推广到一般情况，设 Cuv 为多段图有向边 &lt;u,v&gt; 的权值，源点 s 到终点 v 的最短路径长为 d(s,v)，终点为 t，则可以得到该问题的状态转移方程为： </p><p><img src="https://img-blog.csdnimg.cn/img_convert/47703228cdade4e783e22e86c2aa7fa6.png" alt="img"></p><p><strong>详细解读</strong>：</p><p>以上为理论解释，但是不够直观，接下来我用通俗易懂的方式解释一下：</p><p>先解释几个定义，以便我们叙述</p><p>d(1,6):从0到6的最短路径，换个角度看我们可以叫他：非直接路径</p><p>c(1,2):从1到2的路径，例如c(2,5)=9，同上我们可以叫他：直接路径</p><p><strong>先说一个结论：直接路径是确定的，非直接路径是需要求最小值的。</strong></p><p>我们用图中一个应用来解释，比如说我们现在要从1走到8，求最短路径d(1,8)，那么应该怎么求呢？首先要考虑的一个问题是既然我们要走到8，那哪些点可以直接到8呢？站在8的位置一看，哦！5、6、7这三个点可以到8，因此确定的是c(5,8)=5、c(6,8)=8、c(7,8)=6，此时从1走到8有三种情况</p><ul><li>1——5——8</li><li>1——6——8</li><li>1——7——8</li></ul><p>因此只要我们知道d(1,5)、d(1,6)、d(1,7)便可以用**d(1,5)+c(5,8)**求出1——5——8，剩下两个以此类推，那么接下来的问题就是求d(1,5)了，这显然这跟我们正在求的d(1,8)本质是一样的。那接下来就是分别站在5,6,7的位置重复这一流程。</p><p>最后在分别求出d(1,5)+c(5,8)以及其他两个之后，比较三者取最值即可。</p><p>可以画一个树来表示整个过程:<img src="https://img-blog.csdnimg.cn/f5891b2bdddc432fa7f7a950a8f266a6.png" alt="img"></p><p><strong>代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Max 0xffff</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//动态规划求最短路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp_path</span><span class="params">(<span class="keyword">int</span> c[][<span class="number">100</span>], <span class="keyword">int</span> *cost, <span class="keyword">int</span> *path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入顶点个数和边个数&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="comment">//初始化代价矩阵</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            c[i][j] = Max;</span><br><span class="line">    <span class="comment">//输入代价矩阵</span></span><br><span class="line">    <span class="keyword">int</span> u, v, s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v &gt;&gt; s;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;u&lt;&lt;v&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">        c[u][v] = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cost[i]=Max;</span><br><span class="line">    path[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    cost[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = j<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cost[j] &gt; cost[i] + c[i][j]) &#123;</span><br><span class="line">                path[j] = i;</span><br><span class="line">                cost[j] = cost[i] + c[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cost[n<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">int</span> i=path[n<span class="number">-1</span>];</span><br><span class="line">    cout&lt;&lt;path[n<span class="number">-1</span>]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span>(path[i]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;path[i]&lt;&lt;endl;</span><br><span class="line">        i=path[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">100</span>][<span class="number">100</span>], cost[<span class="number">100</span>], path[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">dp_path</span>(c, cost, path);</span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>此算法的时间复杂度主要由两部分组成：第一部分是依次计算从源点到各个顶点的最短路径长度，由两层嵌套的循环组成，外层循环执行 n-1 次，内层循环对所有入边进行计算，并且在所有循环中，每条入边只计算一次。若假定图的边数为 m，则时间性能是 O(m)。第二部分是输出最短路径经过的顶点，设多段图划分为 k 段，其时间性能是 O(k)。综上所述，**时间复杂度为 O(m+k)**。 </p><p>许多导航和地图软件，只需要输入起始点和目的点，系统便会给出到达目的地的最短路线，这是多段图最短路径问题的典型应用。</p><h5 id="01背包问题："><a href="#01背包问题：" class="headerlink" title="01背包问题："></a>01背包问题：</h5><h5 id="最长公共子序列问题："><a href="#最长公共子序列问题：" class="headerlink" title="最长公共子序列问题："></a>最长公共子序列问题：</h5><p>​    公共就是你有我也有，子序列就是字符串中<strong>不一定连续但先后顺序一致</strong>的n个字符， 例如字符串abcbca，aca、abba就属于它的子序列；（这里要区别一下子串， <strong>子串：</strong>指的是字符串中<strong>连续</strong>的n个字符 ，例如字符串qwerabc中，qwe、rab、wera都属于它的子串）那么连起来就是：你我都有的最长的不一定连续但先后顺序一致字符串。</p><p>例如： 序列1,3,5,4,2,6,8,7和序列1,4,8,6,7,5，它们的最长公共子序列有1,4,8,7和1,4,6,7 ， 其长度是4， 并且通过这个应用我们可以发现，最长公共子序列不一定唯一。</p><p><strong>核心思想</strong>：</p><p>首先我们想解决这个问题，下意识想到的就是无脑遍历啦，但是遍历的时间复杂度太高了，所以不推荐，采用动态规划做有几个点比较重要，那就是动态规划函数的理解</p><p><strong>详细解读</strong>：</p><p><img src="https://img-blog.csdnimg.cn/a54e2e4705604b258e44e6e30c747572.jpeg" alt="请添加图片描述"></p><p><strong>代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> table[<span class="number">100</span>][<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> judge[<span class="number">100</span>][<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print_LCS</span><span class="params">(<span class="keyword">int</span> judge[][<span class="number">100</span>], string x,<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string a, b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">int</span> m = a.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">int</span> n = b.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == b[j])</span><br><span class="line">&#123;</span><br><span class="line">table[i][j] = table[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">judge[i][j] = <span class="number">1</span>;<span class="comment">//最后一个字符相等，则</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(table[i - <span class="number">1</span>][j] &gt;= table[i][j - <span class="number">1</span>])<span class="comment">//最后一个字符不相等，且上方大于左方</span></span><br><span class="line">&#123;</span><br><span class="line">table[i][j] = table[i - <span class="number">1</span>][j];</span><br><span class="line">judge[i][j] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                <span class="comment">//最后一个字符不相等，且上方小于左方</span></span><br><span class="line">&#123;</span><br><span class="line">table[i][j] = table[i][j - <span class="number">1</span>];</span><br><span class="line">judge[i][j] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; table[m][n] &lt;&lt; endl;</span><br><span class="line"><span class="built_in">print_LCS</span>(judge, a, m, n);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">print_LCS</span><span class="params">(<span class="keyword">int</span> judge[][<span class="number">100</span>],string a,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//x,y,分别为两段长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (judge[x][y] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">print_LCS</span>(judge, a, x<span class="number">-1</span>, y<span class="number">-1</span>);</span><br><span class="line">cout &lt;&lt; a[x<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (judge[x][y] == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">print_LCS</span>(judge, a, x - <span class="number">1</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (judge[x][y] == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">print_LCS</span>(judge, a, x, y - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p>此算法时间复杂度为O(n×m)，其中n为第一个字符串的个数，m为第二个字符串的个数。</p><p> 最长公共子序列是一个十分实用的问题，它可以描述两段文字之间的“相似度”，即它们的雷同程度，从而能够用来辨别抄袭。对一段文字进行修改之后，计算改动前后文字的最长公共子序列，将除此子序列外的部分提取出来，这种方法判断修改的部分，往往十分准确。简而言之，百度知道、百度百科都用得上。如判断S1和S2相似的办法是找出他们的公共子序列S3，S3以相同的顺序在S1和S2中出现，但是不必要连续。S3越长，S1和S3就越相似。 </p><p><strong>两个字符串A与B，如果他们最后一个字符是相同的，则此时的最长公共子序列是去掉它们相同的那个，用之前的最长公共子序列长度+1则是，此时的最长公共子序列的长度；如果他们最后一个字符不相同，则此时用A去掉最后一个字符和B求最长公共子序列，再用B去掉最后一个字符和A求最长公共子序列，将两个最长公共子序列作比较，哪个长取哪个。</strong></p><h4 id="最小生成树问题："><a href="#最小生成树问题：" class="headerlink" title="最小生成树问题："></a>最小生成树问题：</h4><p> 对于含有 n 个顶点的连通图来说可能包含有多种生成树，例如图所示 ：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bf91b59c0fc8e526411b2ad8ee856c3e.png" alt="img"></p><p> 在给定一张无向图，如果在它的子图中，任意两个顶点都是互相连通，并且是一个树结构，那么这棵树叫做生成树。当连接顶点之间的图有权重时，权重之和最小的树结构为最小生成树！ </p><p><img src="https://img-blog.csdnimg.cn/img_convert/dc9484de90bb507968917096c197e8d4.png" alt="img"></p><p> 在实际中，这种算法的应用非常广泛，比如我们需要在n个城市铺设电缆，则需要n-1条通信线路，那么我们如何铺设可以使得电缆最短呢？最小生成树就是为了解决这个问题而诞生的！ </p><p><strong>核心思想：</strong></p><ol><li><p><strong>Prim算法（从点出发）</strong></p><p>任选一个顶点，并以此建立生成树的根节点，每一步的贪心选择是<strong>把不再生成树中的最近顶点</strong>添加到生成树中。</p></li><li><p><strong>Kruskal算法（从边出发）</strong></p><p>将无向连通图去边，然后在边的权值中选择最小的，然后将这条边的两个顶点相连，再寻找权值最小的，然后将对应顶点相连，直到形成一个生成树（没有闭环）。</p></li></ol><p><strong>详细解读</strong>：</p><p><img src="https://img-blog.csdnimg.cn/7905f53fc82548ab813efa3af2978989.jpeg" alt="请添加图片描述"></p><p>代码：****</p><p>Prim算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V 6    <span class="comment">// 记录图中顶点的个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> <span class="literal">false</span>, <span class="literal">true</span> &#125; <span class="keyword">bool</span>;</span><br><span class="line"><span class="comment">//查找权值最小的、尚未被选择的顶点，key 数组记录了各顶点之间的权值数据，visited数组记录着各个顶点是否已经被选择的信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min_Key</span><span class="params">(<span class="keyword">int</span> key[], <span class="keyword">bool</span> visited[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min = <span class="number">2147483647</span>, min_index;  <span class="comment">//遍历 key 数组使用，min 记录最小的权值，min_index 记录最小权值关联的顶点</span></span><br><span class="line">    <span class="comment">//遍历 key 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">        <span class="comment">//如果当前顶点为被选择，且对应的权值小于 min 值</span></span><br><span class="line">        <span class="keyword">if</span> (visited[v] == <span class="literal">false</span> &amp;&amp; key[v] &lt; min) &#123;</span><br><span class="line">            <span class="comment">//更新  min 的值并记录该顶点的位置</span></span><br><span class="line">            min = key[v];</span><br><span class="line">            min_index = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回最小权值的顶点的位置</span></span><br><span class="line">    <span class="keyword">return</span> min_index;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出最小生成树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_MST</span><span class="params">(<span class="keyword">int</span> parent[], <span class="keyword">int</span> cost[V][V])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minCost = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小生成树为：\n&quot;</span>);</span><br><span class="line">    <span class="comment">//遍历 parent 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; V; i++) &#123;</span><br><span class="line">        <span class="comment">//parent 数组下标值表示各个顶点，各个下标对应的值为该顶点的父节点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d - %d wight:%d\n&quot;</span>, parent[i] + <span class="number">1</span>, i + <span class="number">1</span>, cost[i][parent[i]]);<span class="comment">//由于数组下标从 0 开始，因此输出时各自 +1</span></span><br><span class="line">        <span class="comment">//统计最小生成树的总权值</span></span><br><span class="line">        minCost += cost[i][parent[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总权值为：%d&quot;</span>, minCost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据用户提供了图的信息（存储在 cost 数组中），寻找最小生成树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_MST</span><span class="params">(<span class="keyword">int</span> cost[V][V])</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="comment">//key 数组用于记录 B 类顶点到 A 类顶点的权值</span></span><br><span class="line">    <span class="comment">//parent 数组用于记录最小生成树中各个顶点父节点的位置，便于最终生成最小生成树</span></span><br><span class="line">    <span class="comment">//visited 数组用于记录各个顶点属于 A 类还是 B 类</span></span><br><span class="line">    <span class="keyword">int</span> parent[V], key[V];</span><br><span class="line">    <span class="keyword">bool</span> visited[V];</span><br><span class="line">    <span class="comment">// 初始化 3 个数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">        key[i] = <span class="number">2147483647</span>;    <span class="comment">// 将 key 数组各个位置设置为无限大的数</span></span><br><span class="line">        visited[i] = <span class="literal">false</span>;     <span class="comment">// 所有的顶点全部属于 B 类</span></span><br><span class="line">        parent[i] = <span class="number">-1</span>;         <span class="comment">// 所有顶点都没有父节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择 key 数组中第一个顶点，开始寻找最小生成树</span></span><br><span class="line">    key[<span class="number">0</span>] = <span class="number">0</span>;  <span class="comment">// 该顶点对应的权值设为 0</span></span><br><span class="line">    parent[<span class="number">0</span>] = <span class="number">-1</span>; <span class="comment">// 该顶点没有父节点</span></span><br><span class="line">    <span class="comment">// 对于 V 个顶点的图，最需选择 V-1 条路径，即可构成最小生成树</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; V - <span class="number">1</span>; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 从 key 数组中找到权值最小的顶点所在的位置</span></span><br><span class="line">        <span class="keyword">int</span> u = min_Key(key, visited);</span><br><span class="line">        <span class="comment">// 该顶点划分到 A 类</span></span><br><span class="line">        visited[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 由于新顶点加入 A 类，因此需要更新 key 数组中的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; V; v++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果类 B 中存在到下标为 u 的顶点的权值比 key 数组中记录的权值还小，表明新顶点的加入，使得类 B 到类 A 顶点的权值有了更好的选择</span></span><br><span class="line">            <span class="keyword">if</span> (cost[u][v] != <span class="number">0</span> &amp;&amp; visited[v] == <span class="literal">false</span> &amp;&amp; cost[u][v] &lt; key[v])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 更新 parent 数组记录的各个顶点父节点的信息</span></span><br><span class="line">                parent[v] = u;</span><br><span class="line">                <span class="comment">// 更新 key 数组</span></span><br><span class="line">                key[v] = cost[u][v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据 parent 记录的各个顶点父节点的信息，输出寻找到的最小生成树</span></span><br><span class="line">    print_MST(parent, cost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// main function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1, p2;</span><br><span class="line">    <span class="keyword">int</span> wight;</span><br><span class="line">    <span class="keyword">int</span> cost[V][V] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入图（顶点到顶点的路径和权值)：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;p1, &amp;p2);</span><br><span class="line">        <span class="comment">//如果用户输入 -1 -1，表示输入结束</span></span><br><span class="line">        <span class="keyword">if</span> (p1 == <span class="number">-1</span> &amp;&amp; p2 == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;wight);</span><br><span class="line">        cost[p1 - <span class="number">1</span>][p2 - <span class="number">1</span>] = wight;</span><br><span class="line">        cost[p2 - <span class="number">1</span>][p1 - <span class="number">1</span>] = wight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据用户输入的图的信息，寻找最小生成树</span></span><br><span class="line">    find_MST(cost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kruskal算法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 9   <span class="comment">// 图中边的数量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> P 6   <span class="comment">// 图中顶点的数量</span></span></span><br><span class="line"><span class="comment">//构建表示边的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="comment">//一条边有 2 个顶点</span></span><br><span class="line">    <span class="keyword">int</span> initial;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">    <span class="comment">//边的权值</span></span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//qsort排序函数中使用，使edges结构体中的边按照权值大小升序排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a, <span class="keyword">const</span> <span class="keyword">void</span>* b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  ((struct edge*)a)-&gt;weight - ((struct edge*)b)-&gt;weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//克鲁斯卡尔算法寻找最小生成树，edges 存储用户输入的图的各个边，minTree 用于记录组成最小生成树的各个边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal_MinTree</span><span class="params">(struct edge edges[], struct edge minTree[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, initial, end, elem, k;</span><br><span class="line">    <span class="comment">//每个顶点配置一个标记值</span></span><br><span class="line">    <span class="keyword">int</span> assists[P];</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//初始状态下，每个顶点的标记都不相同</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P; i++) &#123;</span><br><span class="line">        assists[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据权值，对所有边进行升序排序</span></span><br><span class="line">    qsort(edges, N, <span class="keyword">sizeof</span>(edges[<span class="number">0</span>]), cmp);</span><br><span class="line">    <span class="comment">//遍历所有的边</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="comment">//找到当前边的两个顶点在 assists 数组中的位置下标</span></span><br><span class="line">        initial = edges[i].initial - <span class="number">1</span>;</span><br><span class="line">        end = edges[i].end - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//如果顶点位置存在且顶点的标记不同，说明不在一个集合中，不会产生回路</span></span><br><span class="line">        <span class="keyword">if</span> (assists[initial] != assists[end]) &#123;</span><br><span class="line">            <span class="comment">//记录该边，作为最小生成树的组成部分</span></span><br><span class="line">            minTree[num] = edges[i];</span><br><span class="line">            <span class="comment">//计数+1</span></span><br><span class="line">            num++;</span><br><span class="line">            elem = assists[end];</span><br><span class="line">            <span class="comment">//将新加入生成树的顶点标记全部改为一样的</span></span><br><span class="line">            <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; P; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (assists[k] == elem) &#123;</span><br><span class="line">                    assists[k] = assists[initial];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果选择的边的数量和顶点数相差1，证明最小生成树已经形成，退出循环</span></span><br><span class="line">            <span class="keyword">if</span> (num == P - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(struct edge minTree[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cost = <span class="number">0</span>, i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小生成树为:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; P - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d-%d  权值：%d\n&quot;</span>, minTree[i].initial, minTree[i].end, minTree[i].weight);</span><br><span class="line">        cost += minTree[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总权值为：%d&quot;</span>, cost);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">edge</span> <span class="title">edges</span>[<span class="title">N</span>], <span class="title">minTree</span>[<span class="title">P</span> - 1];</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;edges[i].initial, &amp;edges[i].end, &amp;edges[i].weight);</span><br><span class="line">    &#125;</span><br><span class="line">    kruskal_MinTree(edges, minTree);</span><br><span class="line">    display(minTree);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：</p><p> 由于Kruksal算法是对边进行操作，先取出边，然后判断边的两个节点，这样的话，如果一个图结构非常的稠密，那么Kruksal算法就比较慢了，而Prim算法只是对节点进行遍历，并使用set进行标记，因此会相对于Kruksal算法，在稠密图方面好很多，因此<strong>Kruksal算法常用于稀疏图，而Prim算法常用于稠密图！</strong> </p><p> 普里姆算法该算法运行的时间复杂度为：<code>O(n^2)</code>，</p><h1 id="基于搜索的算法设计技术"><a href="#基于搜索的算法设计技术" class="headerlink" title="基于搜索的算法设计技术"></a>基于搜索的算法设计技术</h1><h2 id="回溯法与分支限界法"><a href="#回溯法与分支限界法" class="headerlink" title="回溯法与分支限界法"></a>回溯法与分支限界法</h2><h3 id="基本思路：-2"><a href="#基本思路：-2" class="headerlink" title="基本思路："></a>基本思路：</h3><p>在这之前我们先看一下解空间树这个概念，因为这两种算法都用到了解空间树</p><p>一般来说，当一个问题有多种解，我们表示多种解的时，便可以用到解空间树，说彻底一点其实就是这个问题的解有哪几种情况。</p><p><img src="https://pic2.zhimg.com/v2-9ff7e1d3a9f80e1309d07aa08fc3d9b9_b.jpg" alt="查看源图像"></p><p>例如上图中，黑白双方各下一子之后，该黑方走棋，此时便有三种情况，move1，move2，move3,，而之后又该白方走棋，白方又有若干种情况，这便构成了下棋这个问题的解空间树。</p><p><strong>回溯法：</strong></p><p>​         把问题的解用解空间树的结构表示，然后使用<strong>深度优先搜索策略</strong>进行遍历，遍历的过程 ：首先从根节点出发搜索解空间树，当算法搜索至解空间树的某一节点时，先利用<strong>约束条件</strong>判断该节点是否可行（即能得到问题的解）。如果不可行，则对该节点的子树进行<strong>剪枝</strong>（ 为了避免无效的搜索 ），然后逐层向其祖先节点回溯；否则，进入该子树，继续按深度优先策略搜索。</p><p><strong>分支限界法：</strong></p><p>​         把问题的解用解空间树的结构表示， 按<strong>广度优先搜索策略</strong>搜索问题的解空间树，在搜索过程中，对待处理的节点根据限界函数估算目标函数的可能取值，从中选取使目标函数取得极值（极大或极小）的结点优先进行广度优先搜索，从而<strong>不断调整搜索方向</strong>（跳跃式），尽快找到问题的解。分支限界法适合求解最优化问题。</p><p>​        用分支限界法解决问题，我们一般有五个步骤：</p><ol><li>确定限界函数</li><li>确定上下界</li><li> 利用广度优先扩展结点（把一个结点的所有子结点扩展完）</li><li>根据限界函数评估每一个结点</li><li>结点评估值属于上下界，则加入PT表，不属于则剪枝</li><li>根据所求问题，比较这一层PT表中的结点哪个最大，或者哪个最小来选择结点进行扩展，为什么是这一层呢？因为使用的是广度优先搜索策略</li></ol><h3 id="同与异：-2"><a href="#同与异：-2" class="headerlink" title="同与异："></a>同与异：</h3><p>同：</p><ol><li>都是基于<strong>搜索</strong>的算法</li><li>都需要在<strong>解空间树</strong>中进行搜索</li><li>在搜索的过程中都</li><li>需要进行<strong>剪枝</strong></li></ol><p>异：</p><ul><li>回溯法用<strong>深度优先算法</strong>（DFS），分支限界法用<strong>广度优先算法</strong>（BFS）。</li><li>回溯法的整个搜索过程是<strong>机械</strong>的进行，而分支限界法对节点的处理是<strong>跳跃式</strong>的，因此需要维护一个待处理结点表PT，而PT表的逻辑结构可以用<strong>堆</strong>或<strong>优先队列</strong>的形式存储。</li></ul><h3 id="适用范围：-2"><a href="#适用范围：-2" class="headerlink" title="适用范围："></a>适用范围：</h3><p>回溯法：找到一组可行解，适用于求解组合数较大的问题</p><p>分支限界法：找到一组最优解，适合解决最优化问题。</p><h3 id="应用：-2"><a href="#应用：-2" class="headerlink" title="应用："></a>应用：</h3><p>回溯法和分支限界法实际上都属于蛮力穷举法，在最坏情况下，时间复杂度肯定为指数阶，但是因为其剪枝的特性，只要设计好了<strong>约束条件</strong>和<strong>限界函数</strong>，便可以得到不错的时间性能。</p><h5 id="图着色问题："><a href="#图着色问题：" class="headerlink" title="图着色问题："></a>图着色问题：</h5><p>顾名思义对图中的顶点进行着色的问题，有两个条件，一：图是无向连通图，二：着色时使任意两个相邻顶点着色不同，最后求顶点的涂色情况。</p><h5 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a><strong>核心思想</strong></h5><p>在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</p><p><strong>详细解读</strong></p><p><img src="https://img-blog.csdnimg.cn/49df603d5d1c428d8f8a01fc72c50fb3.jpeg" alt="请添加图片描述"></p><p>1、2、3代表颜色，A\B\C\D\E代表无向连通图中的顶点，1~14代表树中结点的编号。</p><p>画出解空间树的过程，或者说解空间树表示的意义就是：在模拟我们对顶点着色的过程，着色必定要一个一个尝试，符合条件保留，不符合剪枝，如果所有颜色都尝试过之后，依旧不符合条件，则回溯到当前结点的父节点处，再进行尝试。</p><p><strong>总结</strong></p><p>用m种颜色为一个具有n个顶点的无向图着色，共有<code>m^n</code>种可能的着色组合，因此最坏情况下的时间复杂度为O(m^n).</p><h5 id="哈密顿回路问题"><a href="#哈密顿回路问题" class="headerlink" title="哈密顿回路问题"></a>哈密顿回路问题</h5><p><strong>核心思想</strong></p><p><strong>详细解读</strong></p><p><strong>代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arc[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hamiton</span><span class="params">(<span class="keyword">int</span> x[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, k;</span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">10</span>];<span class="comment">//假设图中最多有10个顶点</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">x[i] = <span class="number">0</span>;<span class="comment">//初始化回路的顶点数组和标志数组</span></span><br><span class="line">visited[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">x[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//从顶点0出发</span></span><br><span class="line">visited[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (k &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">x[k] = x[k] + <span class="number">1</span>;<span class="comment">//搜索下一个顶点</span></span><br><span class="line"><span class="keyword">while</span> (x[k] &lt; n) &#123;</span><br><span class="line"><span class="keyword">if</span> (visited[x[k]] == <span class="number">0</span> &amp;&amp; arc[x[k - <span class="number">1</span>]][x[k]] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">x[k] = x[k] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x[k] &lt; n &amp;&amp; k == n - <span class="number">1</span> &amp;&amp; arc[x[k]][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">cout &lt;&lt; x[k] + <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出顶点的编号，从1开始</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x[k] &lt; n &amp;&amp; k &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">visited[x[k]] = <span class="number">1</span>;</span><br><span class="line">k = k + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="comment">//回溯</span></span><br><span class="line">visited[x[k]] = <span class="number">0</span>;</span><br><span class="line">x[k] = <span class="number">0</span>;</span><br><span class="line">k = k - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><h5 id="TSP问题："><a href="#TSP问题：" class="headerlink" title="TSP问题："></a>TSP问题：</h5><p>  TSP，即旅行商问题，又称TSP问题（Traveling Salesman Problem）， 假设有一个旅行商人要拜访N个城市，他必须选择所要走的路径，路径的限制是每个城市只能拜访一次，而且最后要回到原来出发的城市。路径的选择目标是要求得的路径路程为所有路径之中的最小值。TSP问题是一个<a href="https://baike.baidu.com/item/NPC/658479">NPC</a>问题。 </p><p><img src="https://img-blog.csdnimg.cn/20190715190545629.png?x-oss-process=watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjI2MDEwMg==,size_16,color_FFFFFF,t_70" alt="img"></p><p><strong>核心思想</strong></p><p><img src="https://img-blog.csdnimg.cn/20190715190807263.png" alt="在这里插入图片描述"></p><p>很明显，这表达太抽象了！</p><p><img src="https://img-blog.csdnimg.cn/eed09467e0c84e1fa62fac6cb963706f.jpeg" alt="img"></p><p><strong>详细解读</strong>：</p><p>可以看看这个视频吧，说的比较清楚，可能有点啰嗦了。。</p><p><a href="https://www.bilibili.com/video/BV1JW4y1k7nN">TSP问题——分支限界法</a></p><p>完整流程就是，</p><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] visp;<span class="comment">//标记哪些点走了</span></span><br><span class="line">    <span class="keyword">int</span> st;<span class="comment">//起点</span></span><br><span class="line">    <span class="keyword">int</span> ed;<span class="comment">//终点</span></span><br><span class="line">    <span class="keyword">int</span> k;<span class="comment">//走过的点数</span></span><br><span class="line">    <span class="keyword">int</span> sumv;<span class="comment">//经过路径的距离</span></span><br><span class="line">    <span class="keyword">int</span> lb;<span class="comment">//目标函数的值</span></span><br><span class="line">    Map&lt;Integer,Integer&gt; map_edge=<span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//记录已经加入的边</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        Node node=(Node) o;</span><br><span class="line">        <span class="keyword">if</span>(node.lb&lt;<span class="keyword">this</span>.lb)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node.lb&gt;<span class="keyword">this</span>.lb)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BBTSP</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] mp;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> up=<span class="number">16</span>;<span class="comment">//路径总和上界,第一次为无穷大，后面取每个可行分支的最小值</span></span><br><span class="line">    <span class="keyword">int</span> low;<span class="comment">//路径和最小值</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Point&gt; points;</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Node&gt; q=<span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Node&gt; q_last=<span class="keyword">new</span> PriorityQueue&lt;&gt;();<span class="comment">//记录每条路径的最后一个节点，以及对应的路径值</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BBTSP</span><span class="params">(<span class="keyword">int</span>[][] mp,List&lt;Point&gt; points)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mp=mp;</span><br><span class="line">        points=<span class="keyword">this</span>.points;</span><br><span class="line">        n=points.size();</span><br><span class="line">        sum_origin=points.get(<span class="number">0</span>).getStock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BBTSP</span><span class="params">(<span class="keyword">int</span>[][] mp)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.mp=mp;</span><br><span class="line">        n=<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_low</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        low=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">/*通过排序求两个最小值*/</span></span><br><span class="line">            <span class="comment">//double min1=Double.MAX_VALUE,min2=Double.MAX_VALUE;</span></span><br><span class="line">            <span class="keyword">double</span>[] tmpA=<span class="keyword">new</span> <span class="keyword">double</span>[n];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//if(i==j) continue;</span></span><br><span class="line">                tmpA[j]=mp[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">           Arrays.sort(tmpA);<span class="comment">//对临时的数组进行排序</span></span><br><span class="line">            low+=tmpA[<span class="number">1</span>]+tmpA[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        low=low%<span class="number">2</span>==<span class="number">0</span>?low/<span class="number">2</span>:(low/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get_lb</span><span class="params">(Node p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret=p.sumv*<span class="number">2</span>;<span class="comment">//路径上的点的距离</span></span><br><span class="line">        <span class="keyword">double</span> min1=Double.MAX_VALUE,min2=Double.MAX_VALUE;<span class="comment">//起点和终点连出来的边</span></span><br><span class="line">       <span class="comment">/* System.out.println(&quot;边：&quot;);</span></span><br><span class="line"><span class="comment">        for(Map.Entry&lt;Integer,Integer&gt; entry: p.map_edge.entrySet())</span></span><br><span class="line"><span class="comment">            System.out.println(&quot;start=&quot;+entry.getKey()+&quot;,end=&quot;+entry.getValue());*/</span></span><br><span class="line">        Map&lt;Integer,Integer&gt; map=p.map_edge;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">           <span class="comment">// System.out.println(&quot;++++++++++++i=&quot;+i+&quot;+++++++++++++++++++&quot;);</span></span><br><span class="line">            <span class="keyword">boolean</span> flag1 = <span class="keyword">false</span>;<span class="comment">//该点为出点</span></span><br><span class="line">            <span class="keyword">boolean</span> flag2 = <span class="keyword">false</span>;<span class="comment">//该点为入点</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> end = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> start = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(i)) &#123;</span><br><span class="line">                flag1 = <span class="keyword">true</span>;</span><br><span class="line">                end = map.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.containsValue(i)) &#123;</span><br><span class="line">                flag2 = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())</span><br><span class="line">                    <span class="keyword">if</span>(entry.getValue()==i) start=entry.getKey();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag1 &amp;&amp; flag2) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            List&lt;Integer&gt; array=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (!flag1&amp;&amp;flag2) &#123;<span class="comment">//该点只有入点，没有出点</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == j || j == start) <span class="keyword">continue</span>;</span><br><span class="line">                    array.add(mp[i][j]);</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;flag1       map[&quot;+i+&quot;]&quot;+&quot;[&quot;+j+&quot;]=&quot;+mp[i][j]);</span></span><br><span class="line">                &#125;</span><br><span class="line">                Collections.sort(array);</span><br><span class="line"></span><br><span class="line">                ret += array.get(<span class="number">0</span>);</span><br><span class="line">               <span class="comment">// System.out.println(&quot;array.get(0)=&quot;+array.get(0)+&quot;,ret=&quot;+ret);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!flag2&amp;&amp;flag1) &#123;</span><br><span class="line">                array=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == j || j == end) <span class="keyword">continue</span>;</span><br><span class="line">                    array.add(mp[j][i]);</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;flag2       map[&quot;+j+&quot;]&quot;+&quot;[&quot;+i+&quot;]=&quot;+mp[j][i]);</span></span><br><span class="line">                &#125;</span><br><span class="line">                Collections.sort(array);</span><br><span class="line">                ret += array.get(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//System.out.println(&quot;array.get(0)=&quot;+array.get(0)+&quot;,ret=&quot;+ret);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!flag1&amp;&amp;!flag2)&#123;</span><br><span class="line">                array=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">                    array.add(mp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                Collections.sort(array);</span><br><span class="line">                ret += array.get(<span class="number">0</span>)+array.get(<span class="number">1</span>);</span><br><span class="line">               <span class="comment">// System.out.println(&quot;array.get(0)=&quot;+array.get(0)+&quot;array.get(1)=&quot;+array.get(1)+&quot;,ret=&quot;+ret);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;2.ret=&quot;</span>+ret);</span><br><span class="line">        <span class="keyword">return</span> ret%<span class="number">2</span>==<span class="number">0</span>?(ret/<span class="number">2</span>):(ret/<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        get_low();</span><br><span class="line">        System.out.println(<span class="string">&quot;low=&quot;</span>+low);</span><br><span class="line">        <span class="comment">/*设置初始点,默认从1开始 */</span></span><br><span class="line">        Node star=<span class="keyword">new</span> Node();</span><br><span class="line">        star.st=<span class="number">0</span>;</span><br><span class="line">        star.ed=<span class="number">0</span>;</span><br><span class="line">        star.k=<span class="number">1</span>;</span><br><span class="line">        star.visp=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) star.visp[i]=<span class="number">0</span>;</span><br><span class="line">        star.visp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        star.sumv=<span class="number">0</span>;</span><br><span class="line">        star.lb=low;</span><br><span class="line">        System.out.println(<span class="string">&quot;n=&quot;</span>+n);</span><br><span class="line">        <span class="comment">/*ret为问题的解*/</span></span><br><span class="line">        <span class="keyword">double</span> ret=Double.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        q.add(star);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())</span><br><span class="line">        &#123;</span><br><span class="line">            Node tmp=q.peek();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!q_last.isEmpty())&#123;</span><br><span class="line">                Node last=q_last.peek();</span><br><span class="line">                <span class="keyword">if</span>(last.lb&lt;=tmp.lb) <span class="keyword">return</span> last;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;输出队列里面的数据&quot;</span>);</span><br><span class="line">            Iterator&lt;Node&gt; it=q.iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">                Node no=it.next();</span><br><span class="line">                System.out.println(<span class="string">&quot;node.st=&quot;</span>+no.st+<span class="string">&quot;;node.ed=&quot;</span>+no.ed+<span class="string">&quot;;node.sumv=&quot;</span>+no.sumv);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------------------------------------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;tmp.st=&quot;</span>+tmp.st+<span class="string">&quot;;tmp.ed=&quot;</span>+tmp.ed+<span class="string">&quot;;tmp.sumv=&quot;</span>+tmp.sumv);</span><br><span class="line">            Map&lt;Integer,Integer&gt; tmp_map=tmp.map_edge;</span><br><span class="line">            q.poll();</span><br><span class="line">            <span class="keyword">if</span>(tmp.k==n-<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;最后一个点&quot;</span>);</span><br><span class="line">            <span class="comment">/*找最后一个没有走的点*/</span></span><br><span class="line">                <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(tmp.visp[i]==<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        p=i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Node next=<span class="keyword">new</span> Node();</span><br><span class="line">                next.visp=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">                next.st=tmp.ed;</span><br><span class="line">                next.ed=p;</span><br><span class="line">                <span class="keyword">int</span> ans=tmp.sumv+mp[p][<span class="number">0</span>]+mp[tmp.ed][p];<span class="comment">//最终的最短路径</span></span><br><span class="line">                next.sumv=ans;</span><br><span class="line">                next.k=tmp.k+<span class="number">1</span>;</span><br><span class="line">                next.map_edge.putAll(tmp.map_edge);</span><br><span class="line">                next.map_edge.put(next.st,next.ed);</span><br><span class="line">                next.map_edge.put(next.ed,<span class="number">0</span>);</span><br><span class="line">                next.lb=ans;</span><br><span class="line">                System.out.println(<span class="string">&quot;next.i=&quot;</span>+p+<span class="string">&quot;;next.lib=&quot;</span>+next.lb+<span class="string">&quot;;next.st=&quot;</span>+next.st+<span class="string">&quot;;next.ed=&quot;</span>+next.ed+<span class="string">&quot;;next.sumv=&quot;</span>+next.sumv);</span><br><span class="line">                Node judge = q.peek();</span><br><span class="line">                <span class="comment">/*如果当前的路径和比所有的目标函数值都小则跳出*/</span></span><br><span class="line">                <span class="keyword">if</span>(ans &lt;= judge.lb||judge==<span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//ret=Math.min(ans,ret);</span></span><br><span class="line">                   <span class="comment">// ret_map.put(ans,next);</span></span><br><span class="line">                    <span class="keyword">return</span> next;</span><br><span class="line">                   <span class="comment">// break;</span></span><br><span class="line">                &#125;</span><br><span class="line">               <span class="comment">/*否则继续求其他可能的路径和，并更新上界*/</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    up = Math.min(up,ans);</span><br><span class="line">                    q_last.add(next);</span><br><span class="line">                   <span class="comment">// ret=Math.min(ret,ans);</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">/*当前点可以向下扩展的点入优先级队列*/</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(tmp.visp[i]==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Node next=<span class="keyword">new</span> Node();</span><br><span class="line">                    next.visp=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">                    next.st=tmp.ed;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*更新路径和*/</span></span><br><span class="line">                    <span class="comment">//System.out.println(&quot;tmp.sumv=&quot;+tmp.sumv);</span></span><br><span class="line">                    next.sumv=tmp.sumv+mp[tmp.ed][i];</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*更新最后一个点*/</span></span><br><span class="line">                    next.ed=i;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*更新顶点数*/</span></span><br><span class="line">                    next.k=tmp.k+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*更新经过的顶点*/</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) next.visp[j]=tmp.visp[j];</span><br><span class="line">                    next.visp[i]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*求目标函数*/</span></span><br><span class="line">                    Map&lt;Integer,Integer&gt; next_map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    next_map.putAll(tmp_map);</span><br><span class="line">                    next_map.put(next.st,next.ed);</span><br><span class="line">                    next.map_edge=next_map;</span><br><span class="line"></span><br><span class="line">                    next.lb=get_lb(next);</span><br><span class="line">                    System.out.println(<span class="string">&quot;sumv=&quot;</span>+next.sumv);</span><br><span class="line">                    System.out.println(<span class="string">&quot;next.i=&quot;</span>+i+<span class="string">&quot;;next.lib=&quot;</span>+next.lb+<span class="string">&quot;;next.st=&quot;</span>+next.st+<span class="string">&quot;;next.ed=&quot;</span>+next.ed+<span class="string">&quot;;next.sumv=&quot;</span>+next.sumv);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*如果大于上界就不加入队列*/</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(next.lb&gt;up)&#123;</span><br><span class="line">                        next_map.remove(next.st);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.add(next);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">// return ret;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] d=&#123;</span><br><span class="line">                &#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,</span><br><span class="line">                &#123;<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>&#125;,</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">8</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        BBTSP b=<span class="keyword">new</span> BBTSP(d);</span><br><span class="line">        Node node=b.solve();</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;+++++++++++++++++++++++++输出结果：++++++++++++++++++++++++&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最后遍历的点的信息：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;node.lib=&quot;</span>+node.lb+<span class="string">&quot;;node.st=&quot;</span>+node.st+<span class="string">&quot;;node.ed=&quot;</span>+node.ed+<span class="string">&quot;;node.sumv=&quot;</span>+node.sumv);</span><br><span class="line">        System.out.println(<span class="string">&quot;最短路径为：&quot;</span>+node.lb);</span><br><span class="line">        System.out.println(<span class="string">&quot;构成的边为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry: node.map_edge.entrySet())&#123;</span><br><span class="line">            System.out.println(entry.getKey()+<span class="string">&quot;  -&gt;  &quot;</span>+entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">/*  Node n1=new Node();</span></span><br><span class="line"><span class="comment">        n1.lb=9;</span></span><br><span class="line"><span class="comment">        Node n2=new Node();</span></span><br><span class="line"><span class="comment">        n2.lb=19;</span></span><br><span class="line"><span class="comment">        Node n3=new Node();</span></span><br><span class="line"><span class="comment">        n3.lb=11;</span></span><br><span class="line"><span class="comment">        Node n4=new Node();</span></span><br><span class="line"><span class="comment">        n4.lb=5;</span></span><br><span class="line"><span class="comment">        Node n5=new Node();</span></span><br><span class="line"><span class="comment">        n5.lb=2;</span></span><br><span class="line"><span class="comment">         PriorityQueue&lt;Node&gt; q1=new PriorityQueue&lt;&gt;();</span></span><br><span class="line"><span class="comment">        q1.add(n1);</span></span><br><span class="line"><span class="comment">        q1.add(n2);</span></span><br><span class="line"><span class="comment">        q1.add(n3);</span></span><br><span class="line"><span class="comment">        q1.add(n4);</span></span><br><span class="line"><span class="comment">        q1.add(n5);</span></span><br><span class="line"><span class="comment">        while(!q1.isEmpty())&#123;</span></span><br><span class="line"><span class="comment">            Node nn=q1.poll();</span></span><br><span class="line"><span class="comment">            System.out.println(nn.lb);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h5> <HR> <p>有一个容量为<code>W</code>的背包，还有<code>n</code>个物体。现在忽略物体实际几何形状，我们认为只要背包的剩余容量大于等于物体体积，那就可以装进背包里。每个物体都有两个属性，即体积<code>w</code>和价值<code>v</code>。<br>问：如何向背包装物体才能使背包中物体的总价值最大？ </p><p>背包容量W=10；物品个数n=4</p><p><img src="https://img-blog.csdnimg.cn/4fcc79c069754a2d8e851645904db81e.png" alt="img"></p><p><strong>核心思想</strong></p><p>一般情况下，假设当前已经对前<code>i</code>个物品进行了某种特定的选择，且背包中已装入物品的重量时<code>w</code>，获得的价值是<code>v</code>，计算该节点的目标函数上界的一个简单方法是，将背包中剩余容量全被装入第<code>i+1</code>个物品，并可以将背包装满，于是得到了限界函数：</p><p><img src="https://img-blog.csdnimg.cn/20190715193441970.png" alt="在这里插入图片描述"></p><p><code>W</code>为背包的容量，物品<code>i</code>的重量时<code>wi</code>，其价值为<code>vi</code></p><p><strong>详细解读</strong></p><p><img src="https://img-blog.csdnimg.cn/d01c72e164664626965e761ae3b7a99e.jpeg" alt="img"></p><p><strong>代码</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">bool</span> bestx[N];</span><br><span class="line"><span class="comment">//定义结点。每个节点来记录当前的解。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cp, rp; <span class="comment">//cp背包的物品总价值，rp剩余物品的总价值</span></span><br><span class="line">    <span class="keyword">int</span> rw; <span class="comment">//剩余容量</span></span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">//物品号</span></span><br><span class="line">    <span class="keyword">bool</span> x[N];<span class="comment">//解向量</span></span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _cp, <span class="keyword">int</span> _rp, <span class="keyword">int</span> _rw, <span class="keyword">int</span> _id)&#123;</span><br><span class="line">        cp = _cp;</span><br><span class="line">        rp = _rp;</span><br><span class="line">        rw = _rw;</span><br><span class="line">        id = _id;</span><br><span class="line">        <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(x));<span class="comment">//解向量初始化为0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Goods</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125; goods[N];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> bestp,W,n,sumw,sumv;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  bestp 用来记录最优解。</span></span><br><span class="line"><span class="comment">  W为购物车最大容量。</span></span><br><span class="line"><span class="comment">  n为物品的个数。</span></span><br><span class="line"><span class="comment">  sumw 为所有物品的总重量。</span></span><br><span class="line"><span class="comment">  sumv 为所有物品的总价值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//bfs 来进行子集树的搜索。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,tcp,trp,trw;</span><br><span class="line">    queue&lt;Node&gt; q; <span class="comment">//创建一个普通队列(先进先出)</span></span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">Node</span>(<span class="number">0</span>, sumv, W, <span class="number">1</span>)); <span class="comment">//压入一个初始结点</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) <span class="comment">//如果队列不空</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node livenode, lchild, rchild;<span class="comment">//定义三个结点型变量</span></span><br><span class="line">        livenode=q.<span class="built_in">front</span>();<span class="comment">//取出队头元素作为当前扩展结点livenode</span></span><br><span class="line">        q.<span class="built_in">pop</span>(); <span class="comment">//队头元素出队</span></span><br><span class="line">        <span class="comment">//cp+rp&gt;bestp当前装入的价值+剩余物品价值小于当前最优值时，不再扩展。</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点的id值:&quot;</span>&lt;&lt;livenode.id&lt;&lt;<span class="string">&quot;当前结点的cp值:&quot;</span>&lt;&lt;livenode.cp&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;当前结点的解向量:&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;livenode.x[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        t=livenode.id;<span class="comment">//当前处理的物品序号</span></span><br><span class="line">        <span class="comment">// 搜到最后一个物品的时候不需要往下搜索。</span></span><br><span class="line">        <span class="comment">// 如果当前的购物车没有剩余容量(已经装满)了，不再扩展。</span></span><br><span class="line">        <span class="keyword">if</span>(t&gt;n||livenode.rw==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(livenode.cp&gt;=bestp)<span class="comment">//更新最优解和最优值</span></span><br><span class="line">            &#123;</span><br><span class="line">              <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">              &#123;</span><br><span class="line">                bestx[i]=livenode.x[i];</span><br><span class="line">              &#125;</span><br><span class="line">              bestp=livenode.cp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(livenode.cp+livenode.rp&lt;bestp)<span class="comment">//判断当前结点是否满足限界条件，如果不满足不再扩展</span></span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">//扩展左孩子</span></span><br><span class="line">        tcp=livenode.cp; <span class="comment">//当前购物车中的价值</span></span><br><span class="line">        trp=livenode.rp-goods[t].value; <span class="comment">//不管当前物品装入与否，剩余价值都会减少。</span></span><br><span class="line">        trw=livenode.rw; <span class="comment">//购物车剩余容量</span></span><br><span class="line">        <span class="keyword">if</span>(trw&gt;=goods[t].weight) <span class="comment">//满足约束条件，可以放入购物车</span></span><br><span class="line">        &#123;</span><br><span class="line">            lchild.rw=trw-goods[t].weight;</span><br><span class="line">            lchild.cp=tcp+goods[t].value;</span><br><span class="line">            lchild=<span class="built_in">Node</span>(lchild.cp,trp,lchild.rw,t+<span class="number">1</span>);<span class="comment">//传递参数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;t;i++)</span><br><span class="line">            &#123;</span><br><span class="line">              lchild.x[i]=livenode.x[i];<span class="comment">//复制以前的解向量</span></span><br><span class="line">            &#125;</span><br><span class="line">            lchild.x[t]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(lchild.cp&gt;bestp)<span class="comment">//比最优值大才更新</span></span><br><span class="line">               bestp=lchild.cp;</span><br><span class="line">            q.<span class="built_in">push</span>(lchild);<span class="comment">//左孩子入队</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扩展右孩子</span></span><br><span class="line">        <span class="keyword">if</span>(tcp+trp&gt;=bestp)<span class="comment">//满足限界条件，不放入购物车</span></span><br><span class="line">        &#123;</span><br><span class="line">            rchild=<span class="built_in">Node</span>(tcp,trp,trw,t+<span class="number">1</span>);<span class="comment">//传递参数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;t;i++)</span><br><span class="line">            &#123;</span><br><span class="line">              rchild.x[i]=livenode.x[i];<span class="comment">//复制以前的解向量</span></span><br><span class="line">            &#125;</span><br><span class="line">            rchild.x[t]=<span class="literal">false</span>;</span><br><span class="line">            q.<span class="built_in">push</span>(rchild);<span class="comment">//右孩子入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bestp;<span class="comment">//返回最优值。</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//输入物品的个数和背包的容量</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入物品的个数 n:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入购物车的容量W:&quot;</span>;</span><br><span class="line">    cin &gt;&gt; W;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请依次输入每个物品的重量w和价值v,用空格分开:&quot;</span>;</span><br><span class="line">    bestp=<span class="number">0</span>; <span class="comment">//bestv 用来记录最优解</span></span><br><span class="line">    sumw=<span class="number">0</span>; <span class="comment">//sumw为所有物品的总重量。</span></span><br><span class="line">    sumv=<span class="number">0</span>;   <span class="comment">//sum 为所有物品的总价值</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; goods[i].weight &gt;&gt; goods[i].value;<span class="comment">//输入第 i 件物品的体积和价值。</span></span><br><span class="line">        sumw+= goods[i].weight;</span><br><span class="line">        sumv+= goods[i].value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sumw&lt;=W)</span><br><span class="line">    &#123;</span><br><span class="line">        bestp=sumv;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;放入购物车的物品最大价值为: &quot;</span>&lt;&lt;bestp&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;所有的物品均放入购物车。&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>();</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;放入购物车的物品最大价值为: &quot;</span>&lt;&lt;bestp&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;放入购物车的物品序号为: &quot;</span>;</span><br><span class="line">    <span class="comment">// 输出最优解</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bestx[i])</span><br><span class="line">           cout&lt;&lt;i&lt;&lt;<span class="string">&quot;  &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计算的限制"><a href="#计算的限制" class="headerlink" title="计算的限制"></a>计算的限制</h1><h2 id="问题的复杂性"><a href="#问题的复杂性" class="headerlink" title="问题的复杂性"></a>问题的复杂性</h2><p>Turing论题：一个问题是可计算的当且仅当它在图灵机上经过有限步骤后得到正确的结果。</p><p><strong>停机问题</strong>是典型的不可计算问题。</p><p><strong>易解问题</strong>：将可以在多项式时间（多项式时间复杂度）内求解的问题看做是易解问题，例如：排序问题、串匹配问题。</p><p><strong>难解问题：</strong>将需要指数时间求解的问题看做是难解问题。例如：汉诺塔问题、TSP问题。</p><p><strong>确定性算法：</strong>如果该算法在整个执行过程中，每一步只有一个确定的选择，并且对于同一输入实例运行算法，所得的结果严格一致，则称其为<strong>确定性算法</strong>。</p><p><strong>P类问题</strong>：其中的P的英文全程是：<strong>polynomial</strong>，其含义是“<strong>多项式</strong>”，如果对于某个判断行问题，存在一个正整数k，对于输入规模为n的实例，能够以O（n^k）的时间运行一个<strong>确定性算法</strong>，得到yes或者no的答案，则称这个问题为P类问题。</p><p>常见的基本的NP完全问题：图着色问题、哈密顿回路问题和TSP问题。</p><p>问：解决NP完全问题用什么技术？</p><p>答：用<strong>近似算法</strong>和<strong>概率算法</strong>。</p><h2 id="近似算法"><a href="#近似算法" class="headerlink" title="近似算法"></a>近似算法</h2><p><strong>基本思路</strong>：用近似最优解代替最优解，以换取算法设计上的简化和时间复杂度的降低。换言之，近似算法找到的可能不是一个最优解，但它总会待为求问题提供一个解，为了具有实用性，近似算法必须给出能够给出算法所产生的解与最优解之间的差别。</p><p><strong>适用范围</strong>：求解NP难问题。</p><h2 id="概率算法"><a href="#概率算法" class="headerlink" title="概率算法"></a>概率算法</h2><p><strong>基本思路：</strong></p><p>允许算法在执行过程中随机选择下一步该怎么走，同时允许结果以较小的概率出现错误，并以此为代价，获得算法运行时间的大幅度减少。</p><h3 id="蒙特卡罗型概率算法"><a href="#蒙特卡罗型概率算法" class="headerlink" title="蒙特卡罗型概率算法"></a>蒙特卡罗型概率算法</h3><p>蒙特罗卡型概率算法用于求解问题的准确解。</p><p>设p是一个实数，且1&lt;1/2&lt;p&lt;1。如果一个蒙特卡罗型概率算法对于问题的任一输入实例得到正确解的概率不小于p，则称该蒙特卡罗型概率算法是p正确的。</p><h3 id="拉斯维加斯型概率算法"><a href="#拉斯维加斯型概率算法" class="headerlink" title="拉斯维加斯型概率算法"></a>拉斯维加斯型概率算法</h3><p>设p(x)是对输入实例x调用拉斯维加斯型概率算法获得问题的一个解的概率，则一个正确的拉斯维加斯型概率算法应该对于所有的输入实例x均有p(x)&gt;0.</p><p>参考地址：</p><p><a href="https://www.runoob.com/w3cnote/merge-sort.html">归并排序</a></p><p><a href="http://data.biancheng.net/view/117.html">快速排序</a></p><p><a href="https://www.runoob.com/w3cnote/quick-sort.html">快速排序</a></p><p><a href="https://zhuanlan.zhihu.com/p/29867652">二叉树搜索树</a></p><p><a href="https://zhuanlan.zhihu.com/p/124885051">堆排序</a></p><p><a href="https://zhuanlan.zhihu.com/p/99949110">二叉查找树</a></p><p><a href="https://www.zhihu.com/question/400584573">动态规划和贪心算法的异同</a></p><p><a href="https://www.cnblogs.com/linfangnan/p/14059868.html#%E9%97%AE%E9%A2%98%E6%B1%82%E8%A7%A3">多段图的最短路径问题</a></p><p><a href="https://blog.csdn.net/alps1992/category_2418987.html">阿里大佬讲算法</a></p><p><a href="https://zhuanlan.zhihu.com/p/136387766">最小生成树</a></p><p><a href="https://www.cnblogs.com/BigJunOba/p/9247682.html">图</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;快要期末考试啦，对算法做一个总结，以备自己后续的学习。&lt;/p&gt;
&lt;p&gt;看之前可以先重点看看目录，这样可以明确这篇文章的结构，并且迅速找到需要</summary>
      
    
    
    
    <category term="算法" scheme="https://chenchuanze123.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="贪心法" scheme="https://chenchuanze123.github.io/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"/>
    
    <category term="动态规划法" scheme="https://chenchuanze123.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95/"/>
    
    <category term="分支限界法" scheme="https://chenchuanze123.github.io/tags/%E5%88%86%E6%94%AF%E9%99%90%E7%95%8C%E6%B3%95/"/>
    
    <category term="回溯法" scheme="https://chenchuanze123.github.io/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
    <category term="分治法" scheme="https://chenchuanze123.github.io/tags/%E5%88%86%E6%B2%BB%E6%B3%95/"/>
    
    <category term="归并排序" scheme="https://chenchuanze123.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
    <category term="快速排序" scheme="https://chenchuanze123.github.io/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
    <category term="折半查找" scheme="https://chenchuanze123.github.io/tags/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/"/>
    
    <category term="二叉树查找" scheme="https://chenchuanze123.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9F%A5%E6%89%BE/"/>
    
    <category term="堆排序" scheme="https://chenchuanze123.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
    <category term="多段图的最短路径问题" scheme="https://chenchuanze123.github.io/tags/%E5%A4%9A%E6%AE%B5%E5%9B%BE%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>详解动态规划解决01背包问题</title>
    <link href="https://chenchuanze123.github.io/2022/05/17/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E5%86%B301%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://chenchuanze123.github.io/2022/05/17/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E8%A7%A3%E5%86%B301%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-17T03:07:05.000Z</published>
    <updated>2023-02-11T07:20:44.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><strong>有n个物品，它们有各自的容量和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？</strong></p><p><img src="https://img-blog.csdnimg.cn/b8c3ae5884f34d54a5d23395b16cda1b.png" alt="img"></p><p>假设我们有四个物品，背包的容量为8</p><p>物品1的重量为2，价值为3.</p><p>…</p><p>读了题目我们稍作思考，不难发现，若先不管价值多少，那么每个物品它要么放在背包中，要么不放在背包中。（注意，这个思路很重要，可以说动态规划思路的启蒙点就是这个）。那么我们可以<strong>按着顺序把物品1到物品4依次尝试放入背包中</strong>。</p><p>首先明确几个定义：</p><p>value[i]:代表第i个物品的价值</p><p>weight[i]:代表第i个物品的体积（重量，体积，容量其实说的是一回事）</p><p>j表示为此时的背包容量</p><p>dp[i] [j]: 代表<strong>在前i个物品中选取物品放入容量为j的背包中，此时所选取的物品的价值之和</strong></p><p>例如dp[ i-1 ] [ j ]表示为：在前i-1个物品中的选取物品放入容量为j的背包中，此时所选取的物品的价值之和</p><p>再例如dp[ 4 ] [ 8 ]表示为：在前4个物品中的选取物品放入容量为8的背包中，此时所选取的物品的价值之和（这便是上面的例题）</p><p>那可以从几个方向可以得到dp[4] [8]呢？也就是从哪几个方向得到这个最大值？</p><h1 id="确定递推公式"><a href="#确定递推公式" class="headerlink" title="确定递推公式"></a>确定递推公式</h1><p>既然我们要在前4个物品中选，那我们可以不可以从第四个物品开始选起呢？当然可以，这第四个物品放还是不放</p><ol><li>不放第i个物品时的最大价值： dp[i-1] [j]</li><li>放入第i个物品时的最大价值：dp[ i-1 ] [ j-weight [ i]]+value[i]</li></ol><p>因为我们求的是最大价值呀，因此取<strong>不放第i个物品时的最大价值</strong>和<strong>放入第i个物品时的最大价值</strong>的<strong>最大值</strong>，虽然说的有点啰嗦，但还是好理解的…<br>故可以表示为：<strong>dp[i] [j]</strong>=max{ <strong>dp[i-1] [j]<strong>，</strong>dp[i-1] [j-weight[i]]+value[i]</strong> }</p><p>例如<strong>dp[4] [8]</strong>=max{<strong>dp[3] [8]<strong>，</strong>dp[3] [8-weight[4]]+value[4]</strong>}.</p><p>当我们有了递推公式，我们只需要初始化一下数组，然后套公式便可顺理成章地解决问题。</p><p>那么如何初始化这个二维数组呢？</p><h1 id="初始化二维数组"><a href="#初始化二维数组" class="headerlink" title="初始化二维数组"></a>初始化二维数组</h1><p>【注】：</p><ol><li>放入第i个物品的时候，得先知道不放第i个物品时背包的容量吧。因此可以写一个等式来理解一下：<br>放入第i个物品时的最大价值=不放第i个物品时的最大价值+第i个物品的价值</li><li>dp[i] [j]是一个二维数组，它的值表示的含义是此时背包可以装入的最大价值  </li><li>dp[i-1] [j-weight[i]]：0到i-1的物品之间任取物品，放入容量为没有放入第i个物品的背包中，其中j-weight[i]就表示没有放入第i个物品背包的容量，也就是此时背包容量为j，减去第i个背包的重量。</li></ol><p>故当前元素可以有正上方和左上方的元素递推出来。</p><h1 id="动态规划的优势"><a href="#动态规划的优势" class="headerlink" title="动态规划的优势"></a>动态规划的优势</h1><p>动态规划法与分治法的区别是：分治法在解决子问题与子子问题上有些操作被重复了很多次，但是动态规划具有记忆功能，将上次的结果记录下来，有助于提高效率。</p><p><strong>遍历+储存</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;有n个物品，它们有各自的容量和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？&lt;/str</summary>
      
    
    
    
    <category term="算法" scheme="https://chenchuanze123.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="01背包问题" scheme="https://chenchuanze123.github.io/tags/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
    <category term="动态规划" scheme="https://chenchuanze123.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>在使用git创建仓库并向远程仓库推送时遇到的问题</title>
    <link href="https://chenchuanze123.github.io/2022/04/23/%E5%9C%A8%E4%BD%BF%E7%94%A8git%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%B9%B6%E5%90%91%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://chenchuanze123.github.io/2022/04/23/%E5%9C%A8%E4%BD%BF%E7%94%A8git%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93%E5%B9%B6%E5%90%91%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%8E%A8%E9%80%81%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-04-23T10:21:29.000Z</published>
    <updated>2023-02-11T07:49:22.252Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p><h1 id="main-＞-main-non-fast-forward"><a href="#main-＞-main-non-fast-forward" class="headerlink" title="main -＞ main (non-fast-forward)"></a>main -＞ main (non-fast-forward)</h1><p>问题出现的原因：在创建仓库的时候初始化了readme.md、.gitignore、LICENSE<br>问题的解决方案：重新创建一个仓库，仅仅只是为它命名就好。</p><h1 id="error-remote-origin-already-exists"><a href="#error-remote-origin-already-exists" class="headerlink" title="error: remote origin already exists."></a>error: remote origin already exists.</h1><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin #作用是删除关联的origin的远程库</span><br></pre></td></tr></table></figure><p>然后再执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:Chenchuanze123/Vue-tutorial.git#关联自己的仓库</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main#推送到自己的仓库</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;@&lt;a href=&quot;%E7%9B%AE%E5%BD%95&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;main-＞-main-non-fast-forward&quot;&gt;&lt;a href=&quot;#main-＞-main-non-fast-forward&quot; class=&quot;h</summary>
      
    
    
    
    
    <category term="git" scheme="https://chenchuanze123.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>常见的三种求最大公约数方法（C++）</title>
    <link href="https://chenchuanze123.github.io/2022/04/20/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E6%96%B9%E6%B3%95%EF%BC%88C++/"/>
    <id>https://chenchuanze123.github.io/2022/04/20/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E6%96%B9%E6%B3%95%EF%BC%88C++/</id>
    <published>2022-04-20T12:54:57.000Z</published>
    <updated>2023-02-11T07:48:08.180Z</updated>
    
    <content type="html"><![CDATA[<p>运行结果：<br><img src="https://img-blog.csdnimg.cn/4b1aecf2a4cc496d80956176319025bb.gif" alt="请添加图片描述"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommFactor2</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>; <span class="comment">//函数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b,c=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> d;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(c!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommFactor1</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommFactor2</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommFactor3</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;A、穷举法\nB、辗转相除法\nC、辗转相减法\n&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请选择算法，输入算法前的大写字母:&quot;</span>; </span><br><span class="line">cin&gt;&gt;d;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;请输入两个正整数：&quot;</span>; </span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(d) </span><br><span class="line">   &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span> :</span><br><span class="line">     cout &lt;&lt; <span class="string">&quot;这两个数的最大公约数为：&quot;</span> &lt;&lt; <span class="built_in">CommFactor1</span>(a,b)&lt;&lt; endl&lt;&lt; endl;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span> :</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;这两个数的最大公约数为：&quot;</span> &lt;&lt; <span class="built_in">CommFactor2</span>(a,b)&lt;&lt; endl&lt;&lt; endl;</span><br><span class="line">   <span class="keyword">break</span>; </span><br><span class="line">   <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span> :</span><br><span class="line">     cout &lt;&lt; <span class="string">&quot;这两个数的最大公约数为：&quot;</span> &lt;&lt; <span class="built_in">CommFactor3</span>(a,b)&lt;&lt; endl&lt;&lt; endl;</span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//穷举法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommFactor1</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> factor = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=m&amp;&amp;i&lt;&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(m % i == <span class="number">0</span> &amp;&amp; n % i == <span class="number">0</span>) <span class="comment">//这里不能用if语句，因为可能会有重复的公因子</span></span><br><span class="line">&#123;</span><br><span class="line">factor = factor * i;</span><br><span class="line">m = m / i;</span><br><span class="line">n = n / i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> factor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辗转相除法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommFactor2</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> z = n;</span><br><span class="line"><span class="keyword">while</span> (m % n != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">z = m % n;</span><br><span class="line">m = n;</span><br><span class="line">n = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辗转相减法 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommFactor3</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (m != n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m &gt; n)</span><br><span class="line">&#123;</span><br><span class="line">m = m - n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">n = n - m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line">​```https:<span class="comment">//cn.overleaf.com/project/6212f6338a4f0830afc5f9fa)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;运行结果：&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/4b1aecf2a4cc496d80956176319025bb.gif&quot; alt=&quot;请添加图片描述&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;ta</summary>
      
    
    
    
    <category term="算法" scheme="https://chenchuanze123.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C++" scheme="https://chenchuanze123.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>关于考研英语的一些思考</title>
    <link href="https://chenchuanze123.github.io/2022/03/01/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E5%A6%82%E4%BD%95%E5%A4%8D%E4%B9%A0/"/>
    <id>https://chenchuanze123.github.io/2022/03/01/%E8%80%83%E7%A0%94%E8%8B%B1%E8%AF%AD%E5%A6%82%E4%BD%95%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-03-01T01:45:35.000Z</published>
    <updated>2023-02-11T07:23:49.018Z</updated>
    
    <content type="html"><![CDATA[<h2 id="英语如何复习？"><a href="#英语如何复习？" class="headerlink" title="英语如何复习？"></a>英语如何复习？</h2><p>填空！</p><p>田老师的方法是填空，这确实是教育机构的优势 啊，人家有资本花人力物力来制作这些有效的复习方法，可是我们要想探究出来有效的复习方法就跟试错没什么两样了，但是考研这么重要的事情，怎么能试错呢？所以我觉得我们可以借鉴他们的复习方法，但从多方面吸取经验，总会找到的。</p><p>首先以英语考研真题入手，考研最重要的题型就是<strong>阅读</strong>和<strong>作文</strong>，共占90分（满分100）</p><p>那这两个题型说白了就是要考察我们<strong>读句子</strong>和<strong>写句子</strong>的能力</p><p>那句子我都能读懂，那我就能考出好成绩吗？</p><p>不见得，因为考出好成绩的重点是拿到分数，你句子读懂就一定拿得到分数吗？</p><p>所以我们还要在读懂句子的基础上怎么样？掌握<strong>出题规律（也就是套路）</strong>和<strong>解题规律</strong>。</p><p>其实顺便说一句读懂句子也是有<strong>规律</strong>的（套路），写出长难句也是有<strong>规律</strong>的。</p><p>突然脑海里蹦出一个问题，考研要筛选掉的是哪些人呢？</p><p>是不是那些不懂<strong>规律</strong>的人？</p><p>是不是那些不能学以致用（学了一大堆规律，但是做不出来题）的人？</p><p>是不是不能坚持下来的人？</p><p>…</p><h2 id="阅读："><a href="#阅读：" class="headerlink" title="阅读："></a>阅读：</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>背前几年的真题阅读</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>通篇翻译阅读，长难句分析，翻译一定要说出来，或者笔译，心里想的跟说出来之后的结果还是有一定区别的</p><h2 id="长难句分析"><a href="#长难句分析" class="headerlink" title="长难句分析"></a>长难句分析</h2><p>那这个简单句为什么变得不简单呢？</p><p>就是一件事当中吧，它有核心的内容，也有非核心的内容，考研当中呢就非常喜欢在非核心的内容的基础上给你加上一堆乱七八糟的<strong>补充说明，修饰限定</strong>，把它搞得特别难，然后把你给困住，然后他就赢了，它的目的就达到了哈哈哈哈，这个比喻好贴切啊。</p><p>所以首先就要<strong>去掉修饰，寻找核心</strong>，把不重要的非核心去掉</p><p>比如说插入语，什么括号啊、两个破折号啊，这些都不重要</p><p>还有形容词、副词、介词短语这些都是非核心</p><p>那么当我们知道核心之后，如何把整个句子翻译完整呢？</p><p>那就是加上那些非核心的内容：补充说明啊，修饰限定啊</p><p>大多数句子都会有这些非核心内容：时间啊、哪些方面啊…</p><p>有一句话说：“你不会遇到一样的文章，但是你会遇到一样的题”，这句话的意思其实是，题都是有规律可循的，有套路可以掌握的，然后我脑海里突然有了一个关于考研的概念：<strong>考研=基础+规律+刷题+坚持</strong></p><p>有了基础考个好分数那还得掌握规律啊。</p><h3 id="简单句"><a href="#简单句" class="headerlink" title="简单句"></a>简单句</h3><p>说个通俗易懂的定义：描述<strong>一件事情的句子</strong>都可称之为简单句。</p><p>如果在简单句中加入<strong>补充说明，修饰限定</strong>，虽然还是在描述一件事情，但是这时候要是没有一双“火眼金睛”，那这简单句可就不简单咯！</p><p>突然想起了高中化学老师，一位老教授说的话：“所谓难的东西，其实就是简单东西的叠加。”现在觉得这句话说的太精辟了。</p><p>举个例子：这个东西简单，那怎么把它变难呢？那就是给它加个简单的东西，原本我们一步就能想到结果，现在不行了，得再想一步；现在有人觉得两步还不够难啊，那怎么办呢？那就是再加一个简单的东西，这时候，三步才能解决这个问题，而我们原来只需要一步，这之间多了两步，我们大部分人都能想到前两步，但是第三步想不到，故人们称之为“难题”，我想这种感受，数学题做多了的人最能感受吧，哎，就是卡在了某一步，死活想不出来怎么做；也就像英语长难句，简单的补充说明，修饰限定不知道，那这个句子读懂就很吃力，我想这种东西放在考研中应该是为了提高区分度吧。</p><h3 id="长难句"><a href="#长难句" class="headerlink" title="长难句"></a>长难句</h3><p>定义：描述多件事的句子。</p><p>长难句为什么叫长难句，就是因为它看着又长又难。</p><p>看了定义，联系上面说的“所谓难的东西，就是简单东西的叠加”，这不是又一次印证了这句话？</p><p>一个简单句不够难，在里面再加一个简单句，它不就看着难了吗？什么？你说还不难，那就再加一个简单句，我想这种句子在考研里面算是真正有区分度的东西了吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;英语如何复习？&quot;&gt;&lt;a href=&quot;#英语如何复习？&quot; class=&quot;headerlink&quot; title=&quot;英语如何复习？&quot;&gt;&lt;/a&gt;英语如何复习？&lt;/h2&gt;&lt;p&gt;填空！&lt;/p&gt;
&lt;p&gt;田老师的方法是填空，这确实是教育机构的优势 啊，人家有资本花人力物力来制作这些</summary>
      
    
    
    
    <category term="考研" scheme="https://chenchuanze123.github.io/categories/%E8%80%83%E7%A0%94/"/>
    
    <category term="英语" scheme="https://chenchuanze123.github.io/categories/%E8%80%83%E7%A0%94/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://chenchuanze123.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>算法概述</title>
    <link href="https://chenchuanze123.github.io/2022/02/17/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    <id>https://chenchuanze123.github.io/2022/02/17/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/</id>
    <published>2022-02-17T03:08:22.000Z</published>
    <updated>2022-06-12T07:53:23.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h1><p>算法就是用来解决问题的，它有五大特性：</p><ol><li>输入</li><li>输出</li><li>有穷性：有限个步骤和有限的时间内完成</li><li>确定性：</li><li>可行性</li></ol><p>欧几里得算法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CommonFactor</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = m % n ;</span><br><span class="line"><span class="keyword">while</span> ( r != <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">m = n;</span><br><span class="line">n = r;</span><br><span class="line">r = m % n ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">CommonFactor</span>(<span class="number">63</span>,<span class="number">54</span>)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>算法是一种方法论，它有一般的方法步骤，也有一定的前提条件，如果要解决的问题能够很好的满足这个前提条件那么这个算法对解决这个问题来说，它的效率是很高的（中医管这个叫“对症下药”）。</p><h2 id="几种算法："><a href="#几种算法：" class="headerlink" title="几种算法："></a>几种算法：</h2><ol><li>基本的（如何求出最优解，怎么求的算法？）：蛮力法、分治法、减治法、动态规划法和贪心法</li><li>搜索的（最优解已经有了，如何找到最优解，怎么找的算法）：回溯法和分支限界法</li></ol><h2 id="重要的问题类型"><a href="#重要的问题类型" class="headerlink" title="重要的问题类型"></a>重要的问题类型</h2><ol><li>查找问题</li><li> 排序问题</li><li> 图问题</li><li> 组合问题</li><li> 几何问题</li></ol><p>算法是用来解决问题，不能将算法和问题混淆。</p><p>每一种算法都可以解决问题，不过就是效率和优化的问题。</p><h1 id="分述"><a href="#分述" class="headerlink" title="分述"></a>分述</h1><p><font color=#ff2200 size=3 face="黑体">能否一个算法不能很好地解决这个问题，然后用多种算法联合起来解决这个问题？所以重要的不是汉诺塔，而是汉诺塔背后的算法思想</font></p><h2 id="蛮力法"><a href="#蛮力法" class="headerlink" title="蛮力法"></a>蛮力法</h2><p>简单而又直接，暴力求解问题，也可以说是穷举</p><h2 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h2><p>分治法的精髓：</p><p>分–将问题分解为规模更小的相同的子问题；</p><p>治–将这些规模更小的子问题逐个击破；</p><p>合–将已解决的子问题合并，最终得出“母”问题的解；</p><p>个人感觉分治法和递归有点相像。</p><p>分治法所能解决的问题一般具有以下几个特征：</p><p>\1) 该问题的规模缩小到一定的程度就可以容易地解决</p><p>\2) 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p><p>\3) 利用该问题分解出的子问题的解可以合并为该问题的解；</p><p>\4) 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题。</p><p>上述的第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p><p>第二条特征是应用分治法的前提它也是大多数问题可以满足的，此特征反映了递归思想的应用；</p><p>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征，如果具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用<a href="https://baike.baidu.com/item/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95?fromtitle=%E8%B4%AA%E5%BF%83%E6%B3%95&fromid=1028963">贪心法</a>或<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95">动态规划法</a>。</p><p>第四条特征涉及到分治法的效率，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但一般用<a href="https://baike.baidu.com/item/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E6%B3%95">动态规划法</a>较好。</p><h2 id="减治法"><a href="#减治法" class="headerlink" title="减治法"></a>减治法</h2><p>减治法是分治法的一种。</p><p>分治法是把一个大问题划分为若干个子问题，分别求解各个子问题，然后再把子问题的解进行合并得到原问题的解。</p><p>减治法同样是把一个大问题划分为若干个子问题，但是这些子问题不需要分别求解，只需求解其中的一个子问题，因而也无需对子问题的解进行合并。</p><p>所以，严格的说，减治法应该是一种退化了的分治法，时间复杂性一般是O(log2 n)。——<a href="https://zhuanlan.zhihu.com/p/254860647">程序员麻辣烫</a></p><h2 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h2><p><a href="https://www.zhihu.com/question/23995189">什么是动态规划1？</a></p><p><a href="https://zhuanlan.zhihu.com/p/126361983">什么是动态规划2？</a></p><p>动态规划算法最核心的思想是：递归？</p><p> <font color=#ff2200 size=3 face="黑体">当你企图使用计算机解决一个问题时，其实就是在思考如何将这个问题表达成状态（用哪些变量存储哪些数据）以及如何在状态中转移（怎样根据一些变量计算出另一些变量）。所以所谓的<a href="https://www.zhihu.com/search?q=%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:35429905%7D">空间复杂度</a>就是为了支持你的计算所必需存储的状态最多有多少，所谓<a href="https://www.zhihu.com/search?q=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:35429905%7D">时间复杂度</a>就是从初始状态到达最终状态中间需要多少步！    ——摘自知乎<a href="https://www.zhihu.com/people/anchor89">王勐</a>的回答</font></p><p>动态规划感觉有点一根筋啊，能不能两头堵啊？哈哈哈</p><p>动态规划虽然和分治法类似，都是将一个问题分为多个子问题，对子问题求解，然后从这些子问题中找到原问题的解，但是不同之处在于动态规划的子问题往往不是相互独立的，这就要记录并保存多个子问题的答案，如何记录保存呢？那就是建个表然后存入，既然要建表所以该算法的空间复杂度要比一般算法大得多，所以它本质是一种以时间换空间的算法。</p><p>适用动态规划的问题必须满足<strong>最优化原理</strong>(最优子结构性质)和<strong>无后效性</strong>。</p><p>最优化原理：最优化原理可这样阐述：一个最优化策略具有这样的性质，不论过去状态和决策如何，对前面的决策所形成的状态而言，余下的诸决策必须构成最优策略。简而言之，一个最优化策略的子策略总是最优的。一个问题满足最优化原理又称其具有最优子结构性质</p><p>无后效性：将各阶段按照一定的次序排列好之后，对于某个给定的阶段状态，它以前各阶段的状态无法直接影响它未来的决策，而只能通过当前的这个状态。换句话说，每个状态都是过去历史的一个完整总结。这就是无后向性，又称为无后效性</p><p><a href="https://zhuanlan.zhihu.com/p/107501014">整几个经典问题练练手：</a></p><ol><li>背包问题</li><li>最短路径</li><li>编辑距离</li><li>…</li></ol><h2 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h2><p>贪心算法讲究一个关键点：当前情况下最好的选择(因为贪心，所以只考虑当下不管将来，及时行乐啊)所以该算法得到的是在某种意义上的局部最优解，局部最优解不一定是整体 最优解啊， <font color=#0000ff size=3 face="黑体"> 那这个意思就是说该算法往往会被其他具有概括性、总结性的算法所包含？</font></p><p><a href="https://max.book118.com/html/2018/0930/6211002052001221.shtm">算法设计与分析 王红梅 pdf课后习题参考答案</a></p><h2 id="PvsNP问题"><a href="#PvsNP问题" class="headerlink" title="PvsNP问题"></a>PvsNP问题</h2><p><a href="http://www.yinwang.org/blog-cn/2019/07/21/pnp2">王垠的解答</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是算法&quot;&gt;&lt;a href=&quot;#什么是算法&quot; class=&quot;headerlink&quot; title=&quot;什么是算法&quot;&gt;&lt;/a&gt;什么是算法&lt;/h1&gt;&lt;p&gt;算法就是用来解决问题的，它有五大特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;li&gt;有</summary>
      
    
    
    
    <category term="算法" scheme="https://chenchuanze123.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>“學醫是救不了中國人的”</title>
    <link href="https://chenchuanze123.github.io/2022/02/06/%E2%80%9C%E5%AD%A6%E5%8C%BB%E6%98%AF%E6%95%91%E4%B8%8D%E4%BA%86%E4%B8%AD%E5%9B%BD%E4%BA%BA%E7%9A%84%E2%80%9D/"/>
    <id>https://chenchuanze123.github.io/2022/02/06/%E2%80%9C%E5%AD%A6%E5%8C%BB%E6%98%AF%E6%95%91%E4%B8%8D%E4%BA%86%E4%B8%AD%E5%9B%BD%E4%BA%BA%E7%9A%84%E2%80%9D/</id>
    <published>2022-02-06T02:30:45.000Z</published>
    <updated>2022-05-18T01:55:30.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="肝胆相照"><a href="#肝胆相照" class="headerlink" title="肝胆相照"></a>肝胆相照</h1><p>那天碰到一个词叫做“肝胆相照”，我就很疑惑，为什么是肝与胆相照？不是心与肝，也不是胃与肝。</p><p>后来我在中医里面找到了答案。</p><p>中医认为人体是分<a href="https://baike.baidu.com/item/%E4%BA%94%E8%84%8F%E5%85%AD%E8%85%91/56020549">五脏六腑</a>的。脏一般是指实心有机构的脏器，有心、肝、脾、肺、肾五脏；“ 腑 ”是指空心的容器，有小肠、胆、胃、大肠、膀胱等分别和五个脏相对应的五个腑，另外将人体的胸腔和腹腔分为上焦、中焦、下焦，统称为三焦，是第六个腑。 </p><p>脏与腑是表里互相配合的，一脏配一腑，脏属阴为里，脏通“藏”，表示内部的意思；腑属阳为表。</p><p>注意这句话：“和五个脏相对应的五个腑”，一对应才恍然大悟，原来肝脏和胆是对应关系。</p><h1 id="好心肠"><a href="#好心肠" class="headerlink" title="好心肠"></a>好心肠</h1><p>然后我就突然想起一句话，如果我们平时遇到好人都说：“啊呀，这个人好心肠啊！”</p><p>我突然就明白了为什么说心肠不说心肺，也不说心肾，原来心脏和小肠腑是对应的。</p><p>所以我突然就觉得我们有时候经常说的话，可是不知道为什么这么说。</p><h1 id="中医四大典籍"><a href="#中医四大典籍" class="headerlink" title="中医四大典籍"></a>中医四大典籍</h1><p><a href="https://so.gushiwen.cn/guwen/book_46653FD803893E4FF001D427402FA6E0.aspx">黄帝内经</a></p><p><a href="http://www.pharmnet.com.cn/tcm/knowledge/detail/100681.html">伤寒杂病论</a></p><p><a href="https://so.gushiwen.cn/guwen/book_46653FD803893E4FAA70382D08D37221.aspx">难经</a></p><p><a href="https://so.gushiwen.cn/guwen/book_46653FD803893E4F93F4F99BE2D66591.aspx">神农本草经</a></p><p>站桩</p><p>本草纲目</p><p><a href="https://www.bilibili.com/video/BV1654y1h7iX?p=3">徐文兵讲《黄帝内经的智慧》</a></p><p>要想看懂古书，你要重新认字识字啊，说文解字？</p><p>精：有形的物质</p><p>气：能量</p><p>神：没有精哪有神啊，人的情绪情感</p><p><a href="https://baike.baidu.com/item/%E4%BA%94%E8%B0%B7/92646">五谷：</a>平常俗称的“五谷”所指的五种谷物。“五谷”，古代有多种不同说法，最主要的有两种：一种指<a href="https://baike.baidu.com/item/%E7%A8%BB/4417005">稻</a>、<a href="https://baike.baidu.com/item/%E9%BB%8D/568123">黍</a>、<a href="https://baike.baidu.com/item/%E7%A8%B7/5095557">稷</a>、<a href="https://baike.baidu.com/item/%E9%BA%A6/7545133">麦</a>、<a href="https://baike.baidu.com/item/%E8%8F%BD/6708525">菽</a>；另一种指<a href="https://baike.baidu.com/item/%E9%BA%BB/10055646">麻</a>、黍、<a href="https://baike.baidu.com/item/%E7%A8%B7/5095557">稷</a>、麦、菽。两者的区别是：前者有稻无麻，后者有麻无稻。古代经济文化中心在黄河流域，稻的主要产地在南方，而北方种稻有限，所以“五谷”中最初无稻</p><p><a href="https://baike.baidu.com/item/%E4%BA%94%E7%95%9C/3297528">五畜</a>：指牛、犬、羊、猪、鸡等五种畜类肉。</p><p>五菜：</p><p>五果：</p><p>睡觉要调息：那个呼吸之间的停顿</p><p>七情六欲：</p><p><a href="https://baike.baidu.com/item/%E4%B8%8A%E5%8F%A4/7079228">上古：</a> </p><p>中醫主張治未病。</p><h1 id="中医几个必备网站："><a href="#中医几个必备网站：" class="headerlink" title="中医几个必备网站："></a>中医几个必备网站：</h1><p><a href="https://www.zhzyw.com/">中医中药网</a></p><p><a href="http://www.pharmnet.com.cn/tcm/">中医药</a></p><h1 id="中医西医的关系："><a href="#中医西医的关系：" class="headerlink" title="中医西医的关系："></a>中医西医的关系：</h1><p>学了计算机专业，再来看中医西医的关系，私以为中医更像是架构师，西医更像程序员（<code>当然没有抬高架构师，贬低程序员的意思，这个世界如果只有架构师，或者程序员，是进步不了的</code>）。那么话说回来，为什么这样比喻呢？</p><ol><li><p>中医的特点是高度抽象，例如：五脏六腑、气血经脉、精气神，这些东西几乎可以说清楚一个人的健康状况，举个例子，有一病症为<code>肝经郁热证</code>，就这短短五个字就概括了一堆疾病：<code>以两胁胀痛、灼热、烦躁易怒，口苦口干，舌红苔黄，脉弦数等常见症的证候</code>；</p><p>而西医的特点是高度具象，为什么会发烧？发烧是因为什么？然后说细菌病毒蛋白质……西医追求的是眼见为实，研究的太细了，而这也正是西医治不了的大病的原因之一。</p><p>如果西医看到<code>两胁胀痛、灼热、烦躁易怒，口苦口干，舌红苔黄</code>，那肯定是哪里有问题治哪里，<code>头痛医头脚痛医脚</code>，哪里有细菌炎症哪里就用抗生素，不管对人体有益的，有害的统统“吞噬”，甚至会形成<code>按下葫芦浮起瓢</code>的情景，为什么会这样？因为西医没有抓住“根本”，西医抓住的更多的是局部，而中医抓住的是整体。这就跟架构师往往是对整个软件架构负责，而程序员只是对自己的那一部分负责一样。然后说到这，就想到了，之前听张宇的课，他说人要从<code>举轻若重</code>到<code>举重若轻</code>，<code>举轻若重</code>就是说，研究一个小的东西，可以将它研究的很透彻，很深入；<code>举重若轻</code>就是说，研究一个大事情就跟小事情一样，手到擒来。这里的<code>举轻若重</code>可以看做西医，看做程序员；而<code>举重若轻</code>可以看做中医，看做架构师。哎呦，有点扯远了^ ^</p></li><li><p>架构师们并不实现具体的功能，就跟中医并没有那么精确的检查一样，架构师是站在上层来俯瞰整个软件架构以做到整个软件系统能够接近完全地满足客户的需求，而西医讲究数据化，每治病之前，必是先来一大堆检查，用数据说话，而中医呢，讲究一个望闻问切，真正的中医，一看，一摸，一问，对你的病症便可聊熟于心，而望闻的都是什么啊，都是你身体外部由内部变化的表现，说的层次更高一点便是<code>相由心生</code>了。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;肝胆相照&quot;&gt;&lt;a href=&quot;#肝胆相照&quot; class=&quot;headerlink&quot; title=&quot;肝胆相照&quot;&gt;&lt;/a&gt;肝胆相照&lt;/h1&gt;&lt;p&gt;那天碰到一个词叫做“肝胆相照”，我就很疑惑，为什么是肝与胆相照？不是心与肝，也不是胃与肝。&lt;/p&gt;
&lt;p&gt;后来我在中医里面找</summary>
      
    
    
    
    <category term="中医" scheme="https://chenchuanze123.github.io/categories/%E4%B8%AD%E5%8C%BB/"/>
    
    
    <category term="中医" scheme="https://chenchuanze123.github.io/tags/%E4%B8%AD%E5%8C%BB/"/>
    
    <category term="阴阳" scheme="https://chenchuanze123.github.io/tags/%E9%98%B4%E9%98%B3/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础教程</title>
    <link href="https://chenchuanze123.github.io/2022/01/26/Vue%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <id>https://chenchuanze123.github.io/2022/01/26/Vue%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</id>
    <published>2022-01-26T13:09:30.000Z</published>
    <updated>2023-01-26T14:53:49.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>学习Vue主要是因为，之前经过软工老师的介绍结识了一家公司，他们想要一款处理他们业务的系统，而前端界面分配给了我跟帅彬，所以为了加快开发速度，就准备学习<a href="https://cn.vuejs.org/">Vue前端框架</a>。 </p><p><strong>一些重要的综合性的Demo我已经上传到了<a href="https://github.com/Chenchuanze123/Vue-tutorial">github</a></strong></p><h1 id="Vue基础入门"><a href="#Vue基础入门" class="headerlink" title="Vue基础入门"></a>Vue基础入门</h1><h2 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h2><ol><li><a href="https://codeslogan.github.io/2021/09/27/HTML5%E9%87%8D%E7%82%B9/">HTML</a>+<a href="https://codeslogan.github.io/2021/10/05/JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">JavaScript</a>+<a href="https://codeslogan.github.io/2021/10/02/Summary%20of%20CSS/">CSS</a></li><li><a href="https://nodejs.org/zh-cn/docs/guides/">Node</a>环境和<a href="https://www.npmjs.com.cn/">npm</a>（依赖管理 ）</li><li><a href="https://www.webpackjs.com/">webpack</a>（可选）</li></ol><h2 id="官方文档："><a href="#官方文档：" class="headerlink" title="官方文档："></a><a href="https://cn.vuejs.org/">官方文档：</a></h2><ol><li>学习任何框架，最好的教程就是官方文档，但是官方文档往往是英文的，可能会劝退:( 建议提升英文:)</li><li>初学者更适合视频学习，等有一定能力便可以向文档进发，因为更加详细:)</li></ol><h2 id="DOM是什么？"><a href="#DOM是什么？" class="headerlink" title="DOM是什么？"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction">DOM是什么？</a></h2><p><strong>Document Object Model</strong>，简称DOM，中文叫做“<strong>文档对象模型</strong>”</p><p>粗略理解就是：</p><p><font color="red">DOM提供了对文档的结构化表述。从HTML或者xml程序中，对其结构进行访问，以及修改文档的结构、样式和内容，也就是可以对文档结构实现读写功能。(web页面与其源码都被称作是文档)</font></p><h3 id="DOM-的实现"><a href="#DOM-的实现" class="headerlink" title="DOM 的实现"></a>DOM 的实现</h3><p>要想实现将js代码中的数据呈现到HTML页面上用DOM实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">要先获取document/DOM,再获取节点，然后再去操作这个DOM节点（也就是在HTML中进行一系列的操作）。</span><br><span class="line">而使用Vue可以直接在html程序中绑定数据，当我们改变js中的数据时，就可以直接在页面上呈现出来</span><br></pre></td></tr></table></figure><h2 id="Vue相比于DOM的优点"><a href="#Vue相比于DOM的优点" class="headerlink" title="Vue相比于DOM的优点"></a>Vue相比于DOM的优点</h2><p>要想实现将js代码中的数据呈现到HTML页面上，采用Vue可以让这个过程简化许多。</p><p>先创建Vue实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建VUE实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&quot;#app&quot;,//选择器</span><br><span class="line">data:&#123;</span><br><span class="line">message:&quot;我喜欢你&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后将此实例和HTML中的<code>&lt;div&gt;</code>绑定到一起</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;meaasge&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="comment">&lt;!-- 双花括号是表达式的意思 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以，以后我们要在HTML里面用js的数据，就直接写相应的数据名称就可以了，让数据和页面形成一个绑定，我们只要操作数据，页面自己就会跟着变化。</p><h2 id="入门知识点"><a href="#入门知识点" class="headerlink" title="入门知识点"></a>入门知识点</h2><ol><li><p>文本：双花括号</p></li><li><p>属性：v-bind:</p><p>可省略，只写冒号:</p></li><li><p>事件：v-on：</p><p>可省略，只写@</p><p>注：如果要在函数里面使用Vue中的数据，可以使用this来访问</p></li></ol><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>message<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    el:&quot;#app&quot;,<span class="comment">&lt;!-- el为元素选择器的意思--&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    data:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        message=&quot;我喜欢你&quot;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    url=&quot;inmages/1.jpg&quot;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    methods:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        sayLoveYou()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            alert(&quot;Love you!&quot;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        </span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        //Vue里的函数集合：methods，包含多个函数</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">//数据集合：data，包含多个变量数据</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">&#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小练习：做一个翻页按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">number</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.number=<span class="built_in">this</span>.number+<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">sub</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="built_in">this</span>.number==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&quot;不可以小于零&quot;</span>)</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                </span></span><br><span class="line"><span class="javascript">                    <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.number--</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://img-blog.csdnimg.cn/cc3b2b01df5b47f682b0a45dd70f6ece.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_14,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="创建Vue项目"><a href="#创建Vue项目" class="headerlink" title="创建Vue项目"></a>创建Vue项目</h1><h2 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h2><p>使用Node.js环境开发，</p><ol><li>cmd安装vue/cli</li><li>创建项目hello，建议在对应的目录下创建</li><li>启动服务器</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">命令：</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">vue create hello</span><br><span class="line">cd hello</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="组件化开发概述"><a href="#组件化开发概述" class="headerlink" title="组件化开发概述"></a>组件化开发概述</h2><h3 id="什么是组件化呢？"><a href="#什么是组件化呢？" class="headerlink" title="什么是组件化呢？"></a>什么是组件化呢？</h3><p>就是我们在html中进经常要用到标签，但是总有我们需要的标签HTML提供不了，所以，组件化开发就是，我们开发的.vue文件（又叫vue组件）作为html中的标签来使用。</p><p>例如我们可以开发.vue登录组件或者.vue轮播图组件然后插入到HTML中</p><h3 id="优点：简洁与复用"><a href="#优点：简洁与复用" class="headerlink" title="优点：简洁与复用"></a>优点：简洁与复用</h3><h2 id="项目结构概述"><a href="#项目结构概述" class="headerlink" title="项目结构概述"></a>项目结构概述</h2><p><img src="https://img-blog.csdnimg.cn/3dabfc579e6d49d99777b37de41bc311.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_8,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><ol><li>后缀.vue是我们上文中提到的组件，</li><li>main.js是主文件，用于对应id与对应的组件（App.vue）</li><li>components意为组件，一般我们自己开发的，也就是自定义的组件就放在这个目录下</li></ol><p>剩余的一些为配置文件，</p><p>在这个<code>vue</code>中，我们可以写html、JavaScript、CSS代码，分别对应的是<code>&lt;template&gt;&lt;/template&gt;</code>、<code>&lt;script&gt;&lt;/script&gt;</code>、<code>&lt;style&gt;&lt;/style&gt;</code></p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>I lOVE You<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/friend_404.gif&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// js代码、vue代码</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="comment">//首先，VUE中的js一定要用export来暴露自己</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//其次在以vue为后缀的文件中vue表达数据的书写方式跟在以html为后缀的文件中vue的写法不一样</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">message</span>: <span class="string">&quot;Hello world&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* css代码 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引入vue-js文件与Node环境下书写格式的区别"><a href="#引入vue-js文件与Node环境下书写格式的区别" class="headerlink" title="引入vue.js文件与Node环境下书写格式的区别"></a>引入vue.js文件与Node环境下书写格式的区别</h2><ol><li><p>引入vue.js：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data:&#123;</span><br><span class="line">message:&quot;我喜欢你！&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Node环境下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      message: &quot;Hello world&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>v-开头的</p><p><img src="https://img-blog.csdnimg.cn/51504a85b85e4e709bbaacddbabd18ec.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="条件判断类："><a href="#条件判断类：" class="headerlink" title="条件判断类："></a>条件判断类：</h3><ol><li><strong>v-if</strong></li><li><strong>v-show</strong></li></ol><h4 id="v-if与v-show的异同点："><a href="#v-if与v-show的异同点：" class="headerlink" title="v-if与v-show的异同点："></a>v-if与v-show的异同点：</h4><ul><li><p>同：</p><p>都可以隐藏或者显示元素（true：显示、false：不显示）</p></li><li><p>异：</p><p>if不渲染DOM，如果if为false,在浏览器中不显示</p><p>show渲染DOM，如果show都为false,在浏览器中将元素设置为display:one</p></li></ul><h3 id="显示列表与制表类："><a href="#显示列表与制表类：" class="headerlink" title="显示列表与制表类："></a>显示列表与制表类：</h3><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><strong>v-for</strong></h4><p>这个for啊，极有可能是遍历，循环的意思</p><p>记忆方式：v-for：冒号里面A of B，然后A有括号，括号内两个参数不带引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;(fruit,index) of fruits&quot; :key=&quot;index&quot;&gt;</span><br></pre></td></tr></table></figure><h5 id="利用v-for指令显示列表"><a href="#利用v-for指令显示列表" class="headerlink" title="利用v-for指令显示列表"></a>利用v-for指令显示列表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(fruit,index) of fruits&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>水果名称：&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>水果序号：&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>水果名称和序号：&#123;&#123;fruit&#125;&#125;序号为&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// js代码、vue代码</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="comment">//首先，VUE中的js一定要用export来暴露自己</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//其次在vue中的js代码中的书写方式跟在html中的vue的写法不一样</span></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">fruits</span>:[<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;芒果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;原梦&quot;</span>]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示结果：</p><p><img src="https://img-blog.csdnimg.cn/78a791dcf93a46b385639c2dfd9c6c4a.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_16,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>可以看出就像是一个遍历呢，</p><p>一长串如何记住呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-for=&quot;(fruit,index) of fruits&quot; :key=&quot;index&quot;</span><br><span class="line"></span><br><span class="line">元素索引属于集合，key的值为索引，然后将这个元素放在&#123;&#123;&#125;&#125;中</span><br></pre></td></tr></table></figure><h5 id="利用v-for制表"><a href="#利用v-for制表" class="headerlink" title="利用v-for制表"></a>利用v-for制表</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将studens显示在表格里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;tr&gt;&#123;&#123;v.n&#125;&#125;&lt;/tr&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,i) of students&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;i + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;v.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;tr v-for=&quot;(v,i) of students&quot; :key=&quot;i&quot;&gt;&#123;&#123;v.age&#125;&#125;&lt;/tr&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// js代码、vue代码</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  <span class="comment">//首先，VUE中的js一定要用export来暴露自己</span></span></span><br><span class="line"><span class="javascript">                  <span class="comment">//其次在vue中的js代码中的书写方式跟在html中的vue的写法不一样</span></span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>:&#123;Hello,MenuList&#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">students</span>:[</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;张三 &quot;</span>,<span class="attr">age</span>:<span class="number">13</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;罗翔 &quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;John &quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span></span><br><span class="line"><span class="javascript">        ]</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">  </span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* css代码 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="https://img-blog.csdnimg.cn/afd93b0cd7fd456a9ba689de6096c8b3.png"></p><h2 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h2><p>组件A想要用组件B 的功能，然后需要把组件B嵌套在A中。</p><p>三步走：命名、注册、传值</p><h3 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h3><p>B组件命名要首字母大写（小写可能会很HTML标签冲突，不建议这样写），大驼峰式，后缀.vue</p><h3 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h3><p>在B组件中暴露自己，在A组件中引入B组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import B from &quot;./components/B.vue&quot;;</span><br></pre></td></tr></table></figure><p>在A中注册组件B，需要在A中写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">B:B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就是将B组价作为A组件的标签,放入A中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;B&gt;</span><br><span class="line">&lt;/B&gt;</span><br></pre></td></tr></table></figure><h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><p>父子级的概念是，A组件如果包含B组件标签，则称A是B 的父级。</p><h4 id="父级向子级传递数据"><a href="#父级向子级传递数据" class="headerlink" title="父级向子级传递数据"></a>父级向子级传递数据</h4><p>格式是属性传递（所以用双花括号来表达数据，用:来绑定标签）</p><p>首先需要在父级中单向引入子级</p><p>然后需要在子级中加入props属性</p><p>props是个字符串数组，里面的值为父级传过来的属性名</p><p>App.vue为父级<br>Child.vue为子级</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- html代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>I lOVE You<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:msg</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Child</span> <span class="attr">:mag</span>=<span class="string">&quot;message1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./components/Child.vue&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>:&#123;Child&#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>:<span class="string">&quot;这里是Vue的数据，我要传到Child组件中，也就是父传子&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">message1</span>:<span class="string">&quot;我是Vue的二号数据&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* css代码 */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--==============上面为App.vue=================下面为Child.vue====================--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125; &#123;&#123;mag&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">props</span>: [<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;mag&quot;</span>],   <span class="comment">//props是一个数组的字符串,值为传过来的属性名msg</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://img-blog.csdnimg.cn/3ce3effbd7154941b77ea27d6f918f34.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h4 id="子级向父级传递数据"><a href="#子级向父级传递数据" class="headerlink" title="子级向父级传递数据"></a>子级向父级传递数据</h4><p>格式是事件传递（@来绑定标签）</p><p>比如说我现在想写一个功能，一个子级的按钮button，点击它的时候，把子级的数据传递给父级，然后父级的数据变成子级的一个数据。</p><p>先在父级中定义一个自定义事件，然后在子级定义一个按钮，然后绑定点击按钮(@click)发生的方法，在子级中定义这个方法，然后在这个方法中调用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&quot;toParent&quot;, this.msg);</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//$emit方法可以触发父级（App.vue）的自定义事件，也就是进行了绑定，向自定义事件toParent传递数据 </span><br><span class="line">//$emit方法需要两个参数，1、要绑定的父级中的自定义事件，2、所要传递是数据</span><br><span class="line">//可以这样理解，因为我在App中的Child标签中自定义了事件toParent</span><br><span class="line">//然后我又在Child中的调用了方法this.$emit,所以App就通过Chlid联系起来了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，分别在子级，父级中定义变量，用来存放数据（一般都充当容器的作用），子级的变量用来存放要给父级传递的数据，父级的变量用来接收子级传来的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是父组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我即将接收第二组件传值是：&#123;&#123;child2Msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Child</span> @<span class="attr">toParent</span>=<span class="string">&quot;getMag&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&quot;./components/Child.vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="javascript">    Child</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">child2Msg</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">getMag</span>(<span class="params">msg</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.child2Msg = msg;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--==============上面为App.vue=================下面为Child.vue====================--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是第二个子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我要发送给父组件的值：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toParent&quot;</span>&gt;</span>向父组件发送信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="attr">msg</span>: <span class="string">&quot;我是第二组件，我要给父组件传值&quot;</span>,</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript">  &#125;,</span></span><br><span class="line"><span class="javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">toParent</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$emit(<span class="string">&quot;toParent&quot;</span>, <span class="built_in">this</span>.msg);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图：</p><p>点击前</p><p><img src="https://img-blog.csdnimg.cn/42eaaa95ba83424281d3aee40d72d3cd.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>点击后</p><p><img src="https://img-blog.csdnimg.cn/f5f7f99b3c7949a2b0a3557351d14844.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><strong>一个父传子，子传父的综合例子：</strong></p><ol><li><p>分析过程：</p><p>首先我们创建三个组件App.vue、Carts.vue、Counter.vue，然后</p></li><li><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Carts</span>&gt;</span><span class="tag">&lt;/<span class="name">Carts</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Carts <span class="keyword">from</span> <span class="string">&quot;./components/Carts.vue&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="javascript">Carts</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">msg</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--==============上面为App.vue=================下面为Carts.vue====================--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,i) of cars&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;v.name&#125;&#125; 单价：&#123;&#123;v.price&#125;&#125; </span><br><span class="line"><span class="tag">&lt;<span class="name">Counter</span> </span></span><br><span class="line"><span class="tag"><span class="attr">:qu</span>=<span class="string">&quot;v.qu&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">:index</span>=<span class="string">&quot;i&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">sub</span>=<span class="string">&quot;sub&quot;</span></span></span><br><span class="line"><span class="tag">@<span class="attr">add</span>=<span class="string">&quot;add&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">Counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">&quot;./Counter.vue&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;Counter&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">qu</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">cars</span>:[</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">name</span>:<span class="string">&quot;兰博基尼&quot;</span>,<span class="attr">price</span>:<span class="number">10000</span>,<span class="attr">qu</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">name</span>:<span class="string">&quot;宝马&quot;</span>,<span class="attr">price</span>:<span class="number">2000</span>,<span class="attr">qu</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">name</span>:<span class="string">&quot;奔驰&quot;</span>,<span class="attr">price</span>:<span class="number">4000</span>,<span class="attr">qu</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="javascript">&#123;<span class="attr">name</span>:<span class="string">&quot;特斯拉&quot;</span>,<span class="attr">price</span>:<span class="number">5000</span>,<span class="attr">qu</span>:<span class="number">0</span>&#125;,</span></span><br><span class="line"><span class="javascript">]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">sub</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="built_in">this</span>.cars[index].qu==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">alert(<span class="string">&quot;数量不可为0哦！&quot;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.cars[index].qu--;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">add</span>(<span class="params">index</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.cars[index].qu++;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--============================下面为Counter.vue===============================--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;qu&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">props</span>:[<span class="string">&quot;qu&quot;</span>,<span class="string">&quot;index&quot;</span>],</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">sub</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&quot;sub&quot;</span>,<span class="built_in">this</span>.index);</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$emit(<span class="string">&quot;add&quot;</span>,<span class="built_in">this</span>.index);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>效果图：</p><p><img src="https://img-blog.csdnimg.cn/78c7e2b07c5f4ddcba51d774f1926dfe.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_9,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>总结：</p><h4 id="非子级之间传递数据"><a href="#非子级之间传递数据" class="headerlink" title="非子级之间传递数据"></a>非子级之间传递数据</h4><p>需要定义一个.js文件，里面存放有两个子级文件都需要操作的全局数据与调用的方法，然后在两个子级文件中分别引入这个.js文件。需要注意的是，如何在两个子级文件中表示对js文件中数据与方法的使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Brother</span>&gt;</span><span class="tag">&lt;/<span class="name">Brother</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Sister</span>&gt;</span><span class="tag">&lt;/<span class="name">Sister</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Brother <span class="keyword">from</span> <span class="string">&quot;./components/Brother&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Sister <span class="keyword">from</span> <span class="string">&quot;./components/Sister&quot;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;Carts,Brother, Sister&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--==============上面为App.vue===============下面为Brother.vue====================--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>brother <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeData&quot;</span>&gt;</span>改变数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;bro.message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store.js&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">bro</span>:store.state</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">changeData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">store.setStateMessage(<span class="string">&quot;brother data&quot;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--============================下面为Sister.vue===============================--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>sister<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;sis.message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;../store.js&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">sis</span>:store.state</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--============================下面为store.js===============================--&gt;</span></span><br><span class="line">export default &#123;</span><br><span class="line">state:&#123;</span><br><span class="line">message:&quot;Hello Vue&quot;</span><br><span class="line">&#125;,</span><br><span class="line">setStateMessage(str)&#123;</span><br><span class="line">this.state.message = str;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在Brother中定义变量bro，然后将js文件中的数据赋值给它，使用时使用bro.message，因为在store.js中已经定义了message，Sister中同理。</p><p>在Brother中调用store.js的setStateMessage方法的调用格式为：store.setStateMessage()</p><h1 id="计算属性与监听器"><a href="#计算属性与监听器" class="headerlink" title="计算属性与监听器"></a>计算属性与监听器</h1><h2 id="计算属性：computed"><a href="#计算属性：computed" class="headerlink" title="计算属性：computed"></a>计算属性：computed</h2><p>计算属性要解决的问题就是：</p><p>我有一个非常复杂的计算表达式，直接将这个表达式放在标签里显得很乱，很复杂。我们为了简洁好看，将这个表达式用花括号{}包装起来，然后给它起个名字，加个参数，它就变成了一个方法了，然后把这个方法放在computed：{    }里面，然后在标签里面如何调用这个非常复杂的计算表达式呢？那就是在双花括号里面写入方法的名字。</p><p>下面这个例子计算：总价=单价×数量×折扣</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>单价&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数量</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;quatity&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>折扣 &#123;&#123;discount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&quot;Hello world&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">price</span>:<span class="number">99</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">quatity</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">discount</span>:<span class="number">0.5</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">totalPrice</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="built_in">this</span>.price*<span class="built_in">this</span>.quatity*<span class="built_in">this</span>.discount</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">sub</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.quatity--</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.quatity++</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="监听器：watch"><a href="#监听器：watch" class="headerlink" title="监听器：watch"></a>监听器：watch</h2><p>监听器就是监听一个值，然后把这个值变化之后的值传到一个方法里面，方法的名字就是这个值的名字，方法的内容往往是对这个值变化之后的值进行一系列的计算。</p><p>例如：监听器要监听value的值，然后就把val变化之后的值传到value(val){    }，其中val是value变化后的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>单价&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>数量</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;quatity&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>折扣 &#123;&#123;discount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>:<span class="string">&quot;Hello world&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">price</span>:<span class="number">99</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">quatity</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">discount</span>:<span class="number">0.5</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">totalPrice</span>:<span class="number">0</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">// computed:&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// totalPrice()&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// return this.price*this.quatity*this.discount</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">quatity</span>(<span class="params">qu</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.totalPrice = <span class="built_in">this</span>.price * qu * <span class="built_in">this</span>.discount</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">sub</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.quatity--</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">add</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.quatity++</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="计算属性与监听器的区别"><a href="#计算属性与监听器的区别" class="headerlink" title="计算属性与监听器的区别"></a>计算属性与监听器的区别</h2><p><strong>多个值</strong>改变，为了得到<strong>一个值</strong>的结果，一般用<strong>计算属性（computed）</strong></p><p><strong>一个值</strong>的改变，会引起<strong>多个值</strong>的改变，一般用<strong>监听器（watch）</strong></p><p>实际开发中，大部分时候用computed属性，性能也比较好</p><p>但是在用到路由的时候，只能用监听器。</p><h1 id="生命周期钩子-方法"><a href="#生命周期钩子-方法" class="headerlink" title="生命周期钩子(方法)"></a>生命周期钩子(方法)</h1><h2 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h2><p>让页面初始化加载的时候就有调用方法呈现出相应的数据来</p><p>不论在文档中的顺序如何，在浏览器中都是先执行created中的方法，再执行mounted中的方法</p><p>如何要修改一些html中标签的内容，我们需要在mounted方法中修改，而不是在created中，因为created方法是先生成html的一些模板</p><p>一个栗子：</p><p>先在页面加载完成时显示Loading…然后两秒之后显示“香蕉，苹果，鸭梨”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) of fruitList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">fruitList</span>:[<span class="string">&quot;Loading...&quot;</span>]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.getData();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">getData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//通过计时器模拟一个ajax获取数据的方法</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// setTimeout(()=&gt;&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// this.fruitList = &quot;Loading...&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// &#125;,1),</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.fruitList = [<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;鸭梨&quot;</span>]</span></span><br><span class="line"><span class="javascript">&#125;,<span class="number">2000</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显示结果：</p><p><img src="https://img-blog.csdnimg.cn/4b4e58e33eba4107870e2c37e9668f35.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/c5285cb45c4948bba8868c31f3f17d53.png" alt="在这里插入图片描述"></p><h1 id="插槽、DOM操作、过滤器"><a href="#插槽、DOM操作、过滤器" class="headerlink" title="插槽、DOM操作、过滤器"></a>插槽、DOM操作、过滤器</h1><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>将<strong>slot标签</strong>放在要复用的组件中</p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">HelloWorld</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">HelloWorld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&quot;./components/HelloWorld.vue&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">components</span>:&#123;HelloWorld&#125;,</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--==================上面为App.vue=====下面为HelloWorld.vue===============================--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>有具体名字的插槽？</p><h2 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h2><p>在Vue中我们一般是使用ref来获取真实DOM</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;box&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;#box&quot;</span>)<span class="comment">//获取DOM节点</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> style = <span class="built_in">window</span>.getComputedStyle(box);<span class="comment">//获取节点的样式</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(style.height)<span class="comment">//控制台输出高度</span></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue开发中一般不需要获取真实DOM的</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>通过固定算法重新整理数据</p><p>Vue3.x已将过滤器删除，建议以后用方法或者计算属性代替</p><h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><h2 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h2><p>通过表单向服务器发送数据</p><h2 id="常用控价："><a href="#常用控价：" class="headerlink" title="常用控价："></a>常用控价：</h2><h3 id="文本输入框-input，text"><a href="#文本输入框-input，text" class="headerlink" title="文本输入框(input，text)"></a>文本输入框(input，text)</h3><h3 id="密码输入框-input，password"><a href="#密码输入框-input，password" class="headerlink" title="密码输入框(input，password)"></a>密码输入框(input，password)</h3><h3 id="下拉菜单-select，option"><a href="#下拉菜单-select，option" class="headerlink" title="下拉菜单(select，option)"></a>下拉菜单(select，option)</h3><h3 id="单选框-input-radio"><a href="#单选框-input-radio" class="headerlink" title="单选框(input,radio)"></a>单选框(input,radio)</h3><h3 id="复选框-input，checkbox"><a href="#复选框-input，checkbox" class="headerlink" title="复选框(input，checkbox)"></a>复选框(input，checkbox)</h3><h3 id="提交按钮-button"><a href="#提交按钮-button" class="headerlink" title="提交按钮(button)"></a>提交按钮(button)</h3><p><img src="https://img-blog.csdnimg.cn/9b01a0243009409598cd5809bf5a7313.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="用到的技术点："><a href="#用到的技术点：" class="headerlink" title="用到的技术点："></a>用到的技术点：</h2><h3 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定:"></a>数据双向绑定:</h3><p>通过v-model指令在文本输入框中(input标签中)对数据进行双向绑定</p><p>传统的前端代码进行表单提交的时候需要在form标签内写入跳转路径和提交方法，而在Vue中我们使用ajax来实现表单的提交，也就是通过异步数据交换的方式来实现，使用Vue无须进行跳转与刷新，但是需要用到(prevent)，所以但是需要在Vue中的form标签中需要绑定事件(@submit).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;postData&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">message</span>: <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">postData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.message)<span class="comment">//在控制台打印输出</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css"><span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css"><span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码绑定了变量message与文本输入框的数据(text)，在文本输入框中输入数据，便会在输入框上方呈现出来。</p><p>输入前：</p><p><img src="https://img-blog.csdnimg.cn/48871d605bfe47ce8df0a0e8e250c4c2.png" alt="在这里插入图片描述"></p><p>输入后：</p><p><img src="https://img-blog.csdnimg.cn/3504e860a3a2400e9a135898978ad0a0.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_10,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="表单案例："><a href="#表单案例：" class="headerlink" title="表单案例："></a>表单案例：</h2><p>要求：提交表单并且在控制台输出</p><p><img src="https://img-blog.csdnimg.cn/6be66d0ab29d41cda1d949231196f8dd.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="源程序："><a href="#源程序：" class="headerlink" title="源程序："></a>源程序：</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;postData&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.username&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.pwd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.hby&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;football&quot;</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;basketball&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.sex&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.sex&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>技能：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>前端<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;前端&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.skill&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>Java：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;formData.skill&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交表单<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">formData</span>: &#123;<span class="comment">//创建一个对象</span></span></span><br><span class="line"><span class="javascript"><span class="attr">username</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">pwd</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">hby</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">sex</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">skill</span>:[]</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">postData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.formData)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="comment">/* div&#123;</span></span></span><br><span class="line"><span class="comment"><span class="css">width: 300px;</span></span></span><br><span class="line"><span class="comment"><span class="css">height: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="css">background-color: red;</span></span></span><br><span class="line"><span class="comment"><span class="css">&#125; */</span></span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>建议每一行都放在单独的一层中，label用于标记名称，对于单选框和复选框，都需要添加value属性，单选框属性为radio；复选框属性为checkbox，所有的数据建议放在一个对象当中(formData)</p><h1 id="数据交互"><a href="#数据交互" class="headerlink" title="数据交互"></a>数据交互</h1><h2 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h2><h2 id="知识点回顾"><a href="#知识点回顾" class="headerlink" title="知识点回顾"></a>知识点回顾</h2><ul><li>http协议：</li><li>方法：增加(POST)、删除(DELET3)、更新(PUT)、查看(GET)</li><li>ajax：不刷新和后台进行数据交互，<a href="https://www.runoob.com/ajax/ajax-tutorial.html">文档</a></li><li>axios：与后台交互数据，对ajax进行封装，一般用方法的形式表示,<a href="https://www.axios-http.cn/docs/intro">官方文档</a></li><li>koa：基于node.js下的的一个web框架，<a href="https://www.koajs.com.cn/">官方文档</a></li></ul><p><strong>做数据交互，即需要前台，也需要后台</strong></p><p><img src="https://img-blog.csdnimg.cn/4c4a0e649de3409b9afd47d979831160.png" alt="在这里插入图片描述"></p><p><strong>这时候需要安装axios与koa</strong></p><p><strong>安装axios：</strong></p><p>只需要在项目对应的目录下使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save axios</span><br></pre></td></tr></table></figure><p><strong>安装koa：</strong></p><p>详情查看<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1099752344192192">廖雪峰的koa入门</a></p><p>先创建项目文件夹hello-koa,创建一个app.js在里面写入如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入koa，和koa 1.x不同，在koa2中，我们导入的是一个class，因此用大写的Koa表示:</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Koa对象表示web app本身:</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于任何请求，app将调用该异步函数处理请求：</span></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    ctx.response.type = <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line">    ctx.response.body = <span class="string">&#x27;&lt;h1&gt;Hello, koa2!&lt;/h1&gt;&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在端口3000监听:</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;app started at port 3000...&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接下来有两种安装方法：</p><ol><li><p>第一种</p><p>创建项目文件夹hello_koa,直接在项目目录下使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa@2.0.0</span><br></pre></td></tr></table></figure><p>此命令会把koa以及koa所依赖的所有的包安装在当前目录下的node_model目录中</p></li><li><p>第二种</p><p>在hello-koa中创建一个package.json文件，在其中写入如下代码：(注意，需要把自己需要的依赖写入.json文件)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;hello-koa2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Hello Koa 2 example with async&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;app.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;node app.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;koa&quot;</span>,</span><br><span class="line">        <span class="string">&quot;async&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;Michael Liao&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;Apache-2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;repository&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/michaelliao/learn-javascript.git&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;koa&quot;</span>: <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在项目目录下使用命令：<code>npm install</code>就安装好了。</p></li></ol><h2 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h2><p>主要有两个文件，一个前端的<a href="https://github.com/Chenchuanze123/Vue-tutorial/tree/main/fruits/src">App.vue</a>和一个服务器的<a href="https://github.com/Chenchuanze123/Vue-tutorial/tree/main/hello-koa">app.js</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>水果<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;postData&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) of fruitList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 删除是根据索引删的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="comment">//前端获取后台的数据用axios来获取</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// v-for&quot;(item,index) of fruitList&quot; :key=&quot;index&quot;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">fruit</span>:<span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="javascript"><span class="attr">fruitList</span>:[],</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;, </span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.getFruitList();<span class="comment">//初始化数据</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//获取数据</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">getFruitList</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">axios.get(<span class="string">&quot;http://localhost:3000/fruits&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.fruitList = res.data</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript"><span class="comment">//因为是跨域，所以要写完整的路径名</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//axios通过完整路径名访问到服务器，也就是发送访问请求</span></span></span><br><span class="line"><span class="javascript"><span class="comment">//然后再用then获取数据</span></span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//添加数据</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">postData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">axios.post(<span class="string">&quot;http://localhost:3000/fruits&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">fruit</span>: <span class="built_in">this</span>.fruit</span></span><br><span class="line"><span class="javascript">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="comment">// eslint-disable-line no-unused-vars</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.getFruitList();</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="comment">//删除数据</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">del</span>(<span class="params">index</span>)</span>&#123;<span class="comment">// eslint-disable-line no-unused-vars</span></span></span><br><span class="line"><span class="javascript">axios.delete(<span class="string">`http://localhost:3000/fruits/<span class="subst">$&#123;index&#125;</span>`</span>)<span class="comment">//这里的参数是模板字符串``而不是&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">.then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="comment">// eslint-disable-line no-unused-vars</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.getFruitList();</span></span><br><span class="line"><span class="javascript">&#125;)</span></span><br><span class="line"><span class="javascript">&#125; </span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--==================上面为App.vue======================下面为app.js====================--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;koa-parser&quot;</span>);<span class="comment">//获取post请求数据</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)();<span class="comment">//设置路由</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;koa-cors&#x27;</span>);<span class="comment">//允许跨域</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(cors());</span><br><span class="line">app.use(parser());</span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟数据库</span></span><br><span class="line"><span class="keyword">const</span> fruitList = [<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;pear&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//get方法：获取水果列表</span></span><br><span class="line">router.get(<span class="string">&quot;/fruits&quot;</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">ctx.body = fruitList;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//post方法：添加水果</span></span><br><span class="line">router.post(<span class="string">&quot;/fruits&quot;</span>,<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> fruit = ctx.request.body.fruit;</span><br><span class="line">fruitList.push(fruit);</span><br><span class="line">ctx.body = <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//delete方法：删除水果列表</span></span><br><span class="line">router.delete(<span class="string">&quot;/fruits/:index&quot;</span>,<span class="keyword">async</span> ctx =&gt;&#123;</span><br><span class="line"><span class="keyword">let</span> index = ctx.params.index;</span><br><span class="line">fruitList.splice(index,<span class="number">1</span>);</span><br><span class="line">ctx.body = <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">() =&gt;</span> &#123;<span class="comment">//3000为端口号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;servr is running!&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>启动流程：先要在node下运行app.js文件，打开端口3000的服务器，然后打开vue的服务器8080端口，然后就可以在页面上看到显示结果。</p><h2 id="相关报错"><a href="#相关报错" class="headerlink" title="相关报错"></a>相关报错</h2><p>1、我在安装的过程中遇到一个小问题：我使用的安装方法是第二种，但是我的app.js文件中有如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;koa-parser&quot;</span>);<span class="comment">//获取post请求数据</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>)();<span class="comment">//设置路由</span></span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;koa-cors&#x27;</span>);<span class="comment">//允许跨域</span></span><br></pre></td></tr></table></figure><p>但是运行的时候报错了，先报了<code>Error: Cannot find module &#39;koa-parser&#39;</code>我去网上搜了一大圈，没找到解决方法，然后我就觉得这应该是依赖问题，然后我就试着在项目目录下用cmd打开敲了命令<code>npm install koa-parser</code>，然后等它安装好之后，我又运行了一次，发现还是报错，不过这次报的错变成了<code>Error: Cannot find module &#39;koa-router&#39;</code>然后我结合代码发现了问题所在，就是我们用第二种方法安装koa及其依赖的时候安装的是最基础的一些内容，如果你的代码中要引入一些其他依赖，那还得在cmd一个一个安装，或者就是在packa.json中写入依赖，然后一次安装。</p><p>2、在文件中写箭头函数报错<code>&#39;res&#39; is defined but never used  </code></p><ul><li><p>原因：eslint的验证语法</p></li><li><p>解决方案：在错误语句后面添加注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-line no-unused-vars</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="项目实战经验："><a href="#项目实战经验：" class="headerlink" title="项目实战经验："></a>项目实战经验：</h2><ol><li><p>对axios进一步封装，使得开发中发送请求更加轻松</p><p>在前端程序中，我们可以看到几乎都是用axios调用方法，我们可以将axios提取出来。</p></li><li><p>通过vue配置文件，设置项目开发和部署项目的无缝切换</p><p>前端程序还写了很多路径，这些路径是在开发过程中的路径，如果我们要将项目部署在真实的环境上，一个个改，肯定费力不讨好，所以可以通过配置文件来修改。</p></li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="作用：-3"><a href="#作用：-3" class="headerlink" title="作用："></a>作用：</h2><p>现页面的跳转功能</p><p><img src="https://img-blog.csdnimg.cn/6fc8c513c147447c885fb943fd008ae8.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：<img src="https://img-blog.csdnimg.cn/a336f5375cea4efa939652dfd59b4f0f.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></h2><h3 id="思路与问题"><a href="#思路与问题" class="headerlink" title="思路与问题:"></a>思路与问题:</h3><ol><li><p><strong>登录要跳转到首页，而且还要显示欢迎：用户名的字样：怎么操作？</strong></p><p>既然要显示用户名，那肯定要先找个变量把用户名存起来  啊，那就是用<code>v-model</code>实现数据双向绑定，然后将这个值存放在,<strong>本地存储</strong>中，</p></li><li><p><strong>如何获取这个值存下来？存在哪儿？</strong></p><p>也就是使用<code>localStorage</code>对象的一个方法<code>setItem(&quot;usr&quot;,this.username)</code>,这方法有两个参数，第一个是简写，第二个是你要往第一个参数中存的变量或者值。然后我们可以在其他页面<code>localStorage.getItem(&quot;usr&quot;)</code>就可以拿到存起来的用户名了。</p></li><li><p><strong>那么我们点击登录的时候，还要进行跳转页面到首页，这时候怎么操作？</strong></p><p>这时候vue的路由提供了一个叫编程式导航的一个功能，通过<code>this.$router.push(&quot;/&quot;)</code>来跳转到首页。</p></li><li><p><strong>确实可以跳转，但是需要刷新才能获取到数据，为什么需要刷新呢？如何解决这个问题？</strong></p><p>因为：刷新是因为<code>vue</code>的路由跟<code>a</code>标签的跳转不是一回事，<code>vue</code>的路由刷新一次才能获取到localStorage的数据。</p><p>解决方法: 使用侦听器(<code>watch</code>)，它可以侦听路由，当页面路径发生变化的时候就执行相应的操作。</p></li><li><p><strong>如何实现点击<code>注销</code>按钮清除<code>欢迎：用户名</code>，并且跳转到登录页面的功能？</strong></p><p>在<code>注销</code>按钮上绑定事件<code>logout</code>，然后在<code>logout</code>方法中调用清空本地存储的方法<code>localStorage.clear()</code>;实现跳转页面还是调用<code>this.$router.push(&quot;/login&quot;)</code>跳转到登录页面。</p></li><li><p><strong>大概功能已经完善，但是有个逻辑问题，就是我们在没有登录的时候按理来说是不能访问到首页、博客、视频的但是现在却可以访问，如何解决这个问题呢？</strong></p><p>答案是使用<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">导航守卫</a>，它可以改变路由的跳转,可以在index.js中用 <code>router.beforeEach</code> 注册一个全局前置守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">//to:访问到哪儿</span></span><br><span class="line">  <span class="comment">//from:从哪儿访问</span></span><br><span class="line">  <span class="comment">//next:继续访问</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>跳转的路径不等于/login并且还没登录那就不让你看呗。</p></li><li><p><strong>还有一个逻辑问题就是，按理来说我们没有登录的时候是不显示<code>欢迎：</code>字样的，但是现在不登录却可以看到，如何解决这个问题呢？</strong></p><p>答案就是使用我们之前的一个指令<code>v-if</code>来隐藏这个字段，并且这个v-if要跟<code>localStorage.getItem()</code>绑定在一起。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;showUser&quot;</span>&gt;</span>欢迎：&#123;&#123;username&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">showUser: localStorage.getItem(&quot;usr&quot;)</span><br></pre></td></tr></table></figure></li><li><p><strong>还有一个问题是，我们登录之后，它竟然没有显示<code>欢迎：用户名</code>的字样，需要刷新才可以显示，如何解决这个问题?</strong></p><p>这个问题的答案跟第四个问题的答案相似，就是我们在第7个问题那里只是绑定了数据，但是没有将这个数据放在侦听器(watch)中,所以登录的一瞬间不会显示出来，所以只需要将<code>localStorage.getItem(&quot;usr&quot;)</code>赋值给showUser然后放入watch中就行。</p><p>​    </p></li></ol><h2 id="源程序：-1"><a href="#源程序：-1" class="headerlink" title="源程序："></a>源程序：</h2><p><img src="https://img-blog.csdnimg.cn/dfc4dba1494843af9fd6ee40b7ad3024.png" alt="在这里插入图片描述"></p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Blog <span class="keyword">from</span> <span class="string">&#x27;../views/Blog.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Video <span class="keyword">from</span> <span class="string">&#x27;../views/Video.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../views/Login.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/blog&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Blog&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: Blog<span class="comment">//component后面不需要引号</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/video&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Video&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: Video</span><br><span class="line">  &#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: Login</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(process.env.BASE_URL),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导航守卫</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(to.path !== <span class="string">&quot;/login&quot;</span>)&#123;<span class="comment">//路径是否为登录页面</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;usr&quot;</span>))&#123;<span class="comment">//判断是否登录</span></span><br><span class="line">next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">next(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Home.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;msg&#125;&#125;的首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// @ is an alias to /src</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">msg</span>:<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;usr&quot;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Blog.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;&quot;</span>&gt;</span>JavaScript教程<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;&quot;</span>&gt;</span>Java教程<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;&quot;</span>&gt;</span>Python教程<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Login.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;doLogin&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> &gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> </span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">username</span>:<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">doLogin</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="built_in">this</span>.username),</span></span><br><span class="line"><span class="javascript"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;usr&quot;</span>,<span class="built_in">this</span>.username);</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.push(<span class="string">&quot;/&quot;</span>);<span class="comment">//跳转到首页</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Video.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;../assets/1.mp4&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/blog&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/video&quot;</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> ||</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;showUser&quot;</span>&gt;</span>欢迎：&#123;&#123;username&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="attr">username</span>: <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;usr&quot;</span>),<span class="comment">//username获取本地存储的值</span></span></span><br><span class="line"><span class="javascript"><span class="attr">showUser</span>: <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;usr&quot;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="string">&#x27;$route.path&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.username = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;usr&quot;</span>),</span></span><br><span class="line"><span class="javascript"><span class="comment">//将获取到的数据赋值给username</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.showUser = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;usr&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;,</span></span><br><span class="line"><span class="javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//清空localStorage的内容</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">localStorage</span>.clear();</span></span><br><span class="line"><span class="javascript"><span class="built_in">this</span>.$router.push(<span class="string">&quot;/login&quot;</span>)</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h2><p>这些需要跳转的页面需要在App.vue中以<code>router-link</code>标签标记，而且必须用<code>to</code>属性来填写路径，然后需要在views目录下创建用<code>router-link</code>标签标记的vue文件，然后需要在index.js文件中导入(import),并且定义每一个vue文件对应的路径。</p><p>在一个页面当中，我们往往需要进行页面的跳转，但是<code>vue</code>的路由跳转并不会刷新，所以在跳转的时候需要刷新数据的时候我们可以设置监听器(<code>watch</code>)，当页面发生跳转的时候进行数据更新。</p><h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ul><li>一系列跳转的并列的页面放在view中</li><li>一些可复用的小组件放在components中</li><li>当是一个表单的时候，我们的登录按钮就不需要绑定事件了，而是form表单进行@submit绑定。</li></ul><h1 id="ElementUI"><a href="#ElementUI" class="headerlink" title="ElementUI"></a><a href="https://element.eleme.cn/#/zh-CN">ElementUI</a></h1><h2 id="作用：-4"><a href="#作用：-4" class="headerlink" title="作用："></a>作用：</h2><p>一个基于Vue的UI前端框架，可以美化界面，节省开发时间</p><p>安装：</p><p>使用命令行：<code>npm i element-ui -S</code>进行安装</p><p>配置：</p><p>在 main.js 中写入以下内容：(这是vue2.x版本)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><p>在App.vue的template中添加ElementUI的标签，就可以显示EUI的UI界面了。</p><p>赋值粘贴EUI的按钮程序到App.vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://img-blog.csdnimg.cn/cf9716d510204e4081d46d8585f3a010.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZmI5a-M5rqQ55qE5Y2a5a6i,size_19,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p> <font color=#ff2200 size=3 face="黑体">所以接下来的开发任务就比较简单了，根据自己的需求或者喜好来选择不同的UI界面风格，UI界面确定好之后，然后在程序中根据要求添加相关的功能：模板语法、计算属性、侦听器、生命周期钩子、插槽、表单、数据交互、路由啊，最后部署项目。</font></p><p><a href="https://blog.csdn.net/weixin_44072535/article/details/108170948">表格的表头显示问题</a></p><h1 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h1><p>如何把Vue项目部署到Web服务器上？且听我慢慢道来。</p><p>首先我们在自己的电脑上运行程序，既要有前端，还要有后台，我们运行前端服务器之前，要先打开后台服务器，再打开前端的。因为这俩服务器有各自的端口号，所以我们在前端的代码中要想访问到后台的服务器，我们就要调用axios的一些方法，然后将后台服务器的URL作为参数传入，这时候前后端就算是通了，但是我们并不能直接在后台服务器上访问到项目文件，按照惯例来讲，一般资源啊，项目文件啊，都是在服务器中的，所以咱还得把项目文件复制到后台服务器目录下，那么如何复制呢？</p><p>可以通过命令<code>npm run build</code>来把这个项目文件打包成一个静态文件夹，它的名字叫做<code>dist</code>，然后将里面的内容复制粘贴到服务器(koa)，那么复制到哪儿呢？你总得复制到一个文件夹下吧，不能复制过去一盘散沙，所以比如说我这个文件夹叫<code>public</code>，复制完知道后人后台服务器并不知情啊，所以得跟他打个招呼：“好兄弟，我这静态文件都放在你的<code>public</code>目录下了”，那么用代码表示怎么表示呢？就是在后台的js代码中用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&quot;koa-static&quot;</span>);</span><br></pre></td></tr></table></figure><p>项目也复制过去了，但是还有一个问题啊</p><h1 id="后言："><a href="#后言：" class="headerlink" title="后言："></a>后言：</h1><p>本次教程主要是让介绍Vue常用和比较重要的一些功能和操作，如果大家有兴趣的话，还可以去学习更多Vue相关的高级知识：</p><ol><li><a href="https://ustbhuangyi.github.io/vue-analysis/">Vue原理解析</a></li><li><a href="https://vuex.vuejs.org/zh/guide/">Vuex：状态管理</a></li><li>[Vue.config.js相关配置（基于webpack）](</li></ol><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><ol><li><p><a href="https://www.bilibili.com/video/BV1er4y1P7UN?p=1">【晓舟报告】从零开始学前端-Vue基础教程</a></p></li><li><p><a href="https://cn.vuejs.org/">Vue官方文档</a></p></li><li><p><a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a>)</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;学习Vue主要是因为，之前经过软工老师的介绍结识了一家公司，他们想要一款处理他们业务的系统，而前端界面分配给了我跟帅彬，所以为了加快开发速度</summary>
      
    
    
    
    <category term="前 端" scheme="https://chenchuanze123.github.io/categories/%E5%89%8D-%E7%AB%AF/"/>
    
    
    <category term="前端框架" scheme="https://chenchuanze123.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Vue" scheme="https://chenchuanze123.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb笔记（持续更新）</title>
    <link href="https://chenchuanze123.github.io/2022/01/20/JavaWeb/"/>
    <id>https://chenchuanze123.github.io/2022/01/20/JavaWeb/</id>
    <published>2022-01-20T02:25:24.000Z</published>
    <updated>2023-02-11T08:23:15.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="day00综述"><a href="#day00综述" class="headerlink" title="day00综述"></a>day00综述</h1><p>需要学习SpringBoot，但是JavaWeb是基础，来补一下<br>JavaWeb就是将数据库中的数据用好看的样式在网页上呈现出来<br><img src="https://img-blog.csdnimg.cn/28e6aa4b2eb145cbb24a2e5796d3b8a7.png" alt="在这里插入图片描述"></p><h1 id="day01MySQL基础"><a href="#day01MySQL基础" class="headerlink" title="day01MySQL基础"></a>day01MySQL基础</h1><p><img src="https://img-blog.csdnimg.cn/191352b6b11a41c9b432163f3657f857.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/8a351d3178a0451599ffe7b2f7e99a17.png" alt="在这里插入图片描述"><br>接下来就是MySQL的安装什么的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure</span><br><span class="line">mysqld -install</span><br><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c5cba213b6394965ac8451b4c4255cad.png" alt="在这里插入图片描述"><br>至此我的电脑上已经安装了MySQL服务，我的电脑也就成了MySQL服务器，那么既然它可以提供服务，我得访问它呀，那就得连接上，其实也就是自己连接自己，所以接下来要<strong>修改账户默认密码</strong>：<br>在黑框里敲入<code>mysqladmin -u root password 1234</code>，这里的<code>1234</code>就是指默认管理员(即root账户)的密码，可以自行修改成你喜欢的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password 1234</span><br></pre></td></tr></table></figure><p>进入到mysql：<code>mysql -uroot -p</code></p><p>接下来就是连接数据库， 可以连自己的，也可以连自己同桌的，把命令中的root和密码还有IP换为同桌的可以了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p1234 -h127.0.0.1 -P3306</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aac4b0a47e034d05b7b6d03acf028ee6.png" alt="在这里插入图片描述"><br>关系型数据库，说白了就是<strong>二维表</strong>相互连接组成的数据库</p><p><img src="https://img-blog.csdnimg.cn/711b1232f58846b2b66e52e609bd3e51.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/88608b1f0840424884dbcebbb51dcbff.png" alt="在这里插入图片描述"><br>    SQL通用语法：</p><ul><li>语句用分号结尾</li><li>sql语句不区分大小写</li><li>注释，单行用<code>-- 注释内容</code>两个短杠后面一定要加一个空格，或者<code>#注释内容</code>，多行注释与Java一致<br>例：<br><img src="https://img-blog.csdnimg.cn/ab8192f74f8b4bda97631189f82d81aa.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a17cc0b8343b483c9d97ff334111896b.png" alt="在这里插入图片描述"></li></ul><p><img src="https://img-blog.csdnimg.cn/dc72f0b558434be58ece86d60ea6fe25.png" alt="在这里插入图片描述"><br>接下来是SQL语句的分类<br><img src="https://img-blog.csdnimg.cn/589214e7fbf94af8ad654c272fa8c8fa.png" alt="在这里插入图片描述"><br>DDL：操作<strong>数据库</strong>和操作<strong>表</strong>，比如新建库啊，新建表啊这一类<br>DML和DQL：是对表中的<strong>数据</strong>进行操作。增删改查<br>DCL：对<strong>数据库</strong>进行权限控制</p><p><img src="https://img-blog.csdnimg.cn/e39a9ad479ee438e9fc78a3c7d375cbb.png" alt="在这里插入图片描述"></p><p>创建数据库：<br><img src="https://img-blog.csdnimg.cn/4e85e2d40ca74c2e89ffccd89c8819d5.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/377aacaa4f8748e58de0956d955b01a8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/eafff2e6734542e9a909e3fb468e69b2.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f7ce51a065774855a4de2600f8db45e3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2dba62cda4234a81a1855b1f8c8481a3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/694af795fce642afb5001a828657bbd3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3dbdbd0a1e534b3aa44ea773c5557e1d.png" alt="在这里插入图片描述"><br>其中对于double类型的数据，在定义的时候要指定它的总长度与小数点后几位这两个参数。<br>例如:我们要定义一个分数的字段，要求它的数据表示0-100，并且保留小数点后两位，100是三位，小数点是两位，所以总长度就是5位，那么我们就可以这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score double(5,2)；</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c2d09293627145dd931da7602b99d033.png" alt="在这里插入图片描述"><br>上图，对于字符串类型有char是定长，varchar是变长，区别就是如果我们要存储“张三”，用name char（10），系统就会安排10个字符空间，而张三只需要两个字符空间，所以剩下八个就用空格补齐了，比较浪费空间。<br>所以一般我们用户名用varchar，性别用char</p><p>来一个小案例：</p><p><img src="https://img-blog.csdnimg.cn/fde48ad90f0d4e10ab59d4aa6238cc82.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9cdc369cac5a4506a69565b93ca1a376.png" alt="在这里插入图片描述"><br>sql语句中的modify是修改为什么什么<br>change是修改…为…再修改数据类型为…</p><h1 id="day02-Maven-amp-MyBatis"><a href="#day02-Maven-amp-MyBatis" class="headerlink" title="day02-Maven&amp;MyBatis"></a>day02-Maven&amp;MyBatis</h1><p>maven简述<br><img src="https://img-blog.csdnimg.cn/657b1c3fe57748b4b69274cba79cfe2b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f3e256c7844c4df490893796644dea94.png" alt="在这里插入图片描述"><br>每个IDE都有自己的项目结构，所以eclipse中的项目无法导入到IDEA中时，因为结构不一致，但如果IDE都使用maven来创建项目，那项目结构都相同，长这样<br><img src="https://img-blog.csdnimg.cn/b87f21de45ec42b0ae82943c891eba35.png" alt="在这里插入图片描述"><br>其中的pom.xml文件，就是maven特有的配置文件，可以这样理解，当看到pom.xml文件，我们就可以断定，这个项目是用maven构建的<br>用maven构建的项目结构详细解读：<br><img src="https://img-blog.csdnimg.cn/ec4e54edaeba497fa5ad4728f0a6909d.png" alt="在这里插入图片描述"><br>以往我们的Java项目需要编译、测试、打包、发布…，这一系列的流程操作起来比较麻烦，而maven用来统一的命令来代替：<br><img src="https://img-blog.csdnimg.cn/71539f288c694d68b64fbbfb38caf8f7.png" alt=" "><br><img src="https://img-blog.csdnimg.cn/9a07ab0537824e6fa568e781c96799af.png" alt="在这里插入图片描述"><br>可以看到maven这个构建工具是相当方便啊<br>在pom.xml文件中输入我们要引入的依赖的坐标，就可以导入jar包，那整个流程是什么？<br><img src="https://img-blog.csdnimg.cn/966cdbdec02142809402cefc0f9b092a.png" alt="在这里插入图片描述"><br>maven的安装配置:<br><img src="https://img-blog.csdnimg.cn/3b3b9d37df66473b99260740e37f7355.png" alt="在这里插入图片描述"><br>IDEA配置maven：<br><img src="https://img-blog.csdnimg.cn/c84d7c353dfb46d68314ab3f524fe7fb.png" alt="在这里插入图片描述"></p><p><a href="https://mybatis.net.cn/getting-started.html">mybatis</a>是用来简化jdbc开发的<br>它是一个持久层框架，持久层就是把数据保存到数据库中的那一层代码，并且JavaEE的三层架构就是表现层（controller）、业务层（service）、持久层（dao）<br><img src="https://img-blog.csdnimg.cn/a44e351b76e847f4b8d48662f64707a5.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c3db7412249c4aaea32f14c0a7b3205d.png" alt="在这里插入图片描述"><br>数据库的<strong>增删改查</strong>在mybatis这里是用<strong>配置文件</strong>或者<strong>注解</strong>的方式完成的<br>在UserMapper.xml中写SQL语句（map的意思是映射）<br>操作什么表就用什么Mapper.xml，操作用户表就用UserMapper.xml，操作订单表就用OrderMapper.xml，<br>增删改查对应的便是xxxMapper.xml中的<code>insert  delete update select 标签</code><br><img src="https://img-blog.csdnimg.cn/18834d6e154942088a9e69c3445d3bc6.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/41de30b6fc9a477f94c85cc77a6918e1.png" alt="在这里插入图片描述"></p><p>整个流程就是：<code>pojo——mybatis-config.xml——InputStream——SqlSessionFactoryBuilder的build方法——SqlSessionFactory——SqlSessionFactory的openSession方法——SqlSession对象——调用selectList方法，参数为SQL语句的id——执行SQL语句</code></p><p>SqlSessionFactoryBuilder的build方法会返回一个SqlSessionFactory对象（看了一眼源码）<br>SqlSessionFactory的openSession方法会返回一个 SqlSession对象<br>[今天就到这](<a href="https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=48&amp;spm_id_from=pageDriver&amp;vd_source=829c06bc26">https://www.bilibili.com/video/BV1Qf4y1T7Hx?p=48&amp;spm_id_from=pageDriver&amp;vd_source=829c06bc26</a> 8bb81296178a37d18537e1)<br><img src="https://img-blog.csdnimg.cn/527a9b55e394433dbc689212b23c0702.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/d847fab42cc3486aa4054afcde780392.png" alt="在这里插入图片描述"><br>xml中的配置项目是有顺序的。<br>注解开发就是将sql语句写在注解当中，所以注解开发将更加方便，但是也不一定总是方便的<br><img src="https://img-blog.csdnimg.cn/5bfddc1d71cc4fdcb86b0372010b3bff.png" alt="在这里插入图片描述"></p><h1 id="day03-DOM"><a href="#day03-DOM" class="headerlink" title="day03-DOM"></a>day03-DOM</h1><p>dom：将来浏览器加载html文档的时候，会把html中的各个组成部分封装为dom对象，同时在浏览器的内存当中会形成一颗dom数树，如下图：<br><img src="https://img-blog.csdnimg.cn/7282844d9956499289885db1ad549968.png" alt="在这里插入图片描述"><br>使用js来操作html，融合了面向 对象思想</p><p><img src="https://img-blog.csdnimg.cn/7f0c28c4a801440c87eb3feac8af1763.png" alt="在这里插入图片描述"></p><p>我们主要学两点：<br><img src="https://img-blog.csdnimg.cn/2a9ea57ed8724585bb8f5edfcab5da52.png" alt="在这里插入图片描述"><br>    <img src="https://img-blog.csdnimg.cn/1ca825be01814b948138459d39c2cf12.png" alt="在这里插入图片描述"><br>对象的使用可以查阅<a href="https://www.w3school.com.cn/index.html">文档</a></p><h1 id="day04正则表达式"><a href="#day04正则表达式" class="headerlink" title="day04正则表达式"></a>day04正则表达式</h1><p>正则表达式定义了字符串组成的规则。也就是判断指定的字符串是否符合指定的规则，如果符合返回true，如果不符合返回false。</p><p>正则表达式是和语言无关的。很多语言都支持正则表达式，Java语言也支持，只不过正则表达式在不同的语言中的使用方式不同，js 中需要使用正则对象来使用正则表达式。<br><img src="https://img-blog.csdnimg.cn/2a817906034744658cd6c1426c0a1ec3.png" alt="在这里插入图片描述"><br>可以用正则表达式判断用户名起的是否符合规则</p><h1 id="day05Web核心"><a href="#day05Web核心" class="headerlink" title="day05Web核心"></a>day05Web核心</h1><p><img src="https://img-blog.csdnimg.cn/367b5804ec9745e19a026076a1e324a4.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/adfa195a70724f0c8b3a062131f1f55f.png" alt="在这里插入图片描述"><br>可Java中使用会话技术（cooki、session）来解决<strong>多次请求间不能共享数据</strong>的问题</p><h1 id="day06Servlet"><a href="#day06Servlet" class="headerlink" title="day06Servlet"></a>day06Servlet</h1><p>Web服务器是一个软件，对http协议进行了封装，tomcat就是一个web服务器。<br><a href="https://zhuanlan.zhihu.com/p/34518314">Servlet</a><br>servlet就是一个接口，这个接口最重要的一个方法就是<code> public void service(ServletRequest req, ServletResponse res)</code><br>servlet的执行很特殊，是有web服务器tomcat来帮我们创建servlet对象，并且调用servlet方法的。<br><img src="https://img-blog.csdnimg.cn/5714a2968d6945acac28eb991b7f701f.png" alt="在这里插入图片描述"><br>既然servlet由web服务器管理，那servlet在加载和实例化的时候当servlet被第一次访问的时候，web服务器创建servlet对象，如果是在被访问的时候才创建，那势必会等待一段时间，影响用户体验，所以一般是在web服务器启动的时候就创建servlet对象，那如何来配置呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@WebServlet(urlPatterns = <span class="string">&quot;/demo1&quot;</span>,loadOnStartup = 1)</span><br><span class="line">loadOnstartup的取值有两类情况</span><br><span class="line">（1）负整数:第一次访问时创建Servlet对象</span><br><span class="line">（2）0或正整数:服务器启动时创建Servlet对象，数字越小优先级越高</span><br></pre></td></tr></table></figure><p>然后init方法只调用一次，在创建servlet对象时调用。只要servlet被访问，servlet方法会被调用，所以会被多次调用，。<br>当服务中指的时候会调用destroy方法<br>在使用servlet时，每次都要实现五个方法，其中四个还不太常用，太费事了，为了方便开发，我们可以用继承HttpServlet的方式，重写doGet和doPost方法。<br>在浏览器输入url的请求是get请求的方式，要是使用post请求方式，应该用提交表单的方式（提交方式选择post）<br><img src="https://img-blog.csdnimg.cn/149ac5b306e44488868595a64e076e8e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ac6daa43f0f24519838fb90caa7578e7.png" alt="在这里插入图片描述"></p><p>自己配<code>/</code>和<code>/*</code>会把tomcat中的defaultservlet配置给覆盖掉，若是覆盖掉，则无法访问静态资源，所以我们一般不覆盖。</p><p>AJAX（异步的JavaScript和xml）<br>这是一种为了前后端分离而产生的技术，现在属于前端技术了<br><img src="https://img-blog.csdnimg.cn/817fe7dec0464bed8309721bc2ef9335.png" alt="在这里插入图片描述"><br>在搜索框中输入“奥运”，下面就会联想出各种关键词，这些关键词就是在输入奥运之后，立马访问数据库，把奥运相关的关键词也返回在页面上，这不就是吧服务器端的数据展示在页面上了嘛，我并没有刷新网页就更新了部分页面的内容。<br>用户名是否可用校验就是，在我注册用户名时，光标离开输入框的时候就访问数据库并查询看是否有重合的，然后就立马在前端的页面给到我提示信息（xxx用户名已存在或不符合要求）。</p><p>之前我们之用HTML和普通的JavaScript做不到从服务器获取数据，比如说服务器查询了一个数据列表，我怎么通过JavaScript的方式给到前端的页面，以前是做不了这个事的，以前是通过jsp来做的，现在我们有两ajax就不用jsp了，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;day00综述&quot;&gt;&lt;a href=&quot;#day00综述&quot; class=&quot;headerlink&quot; title=&quot;day00综述&quot;&gt;&lt;/a&gt;day00综述&lt;/h1&gt;&lt;p&gt;需要学习SpringBoot，但是JavaWeb是基础，来补一下&lt;br&gt;JavaWeb就是将数据库中</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>上转型对象成员方法与变量的访问特点</title>
    <link href="https://chenchuanze123.github.io/2022/01/12/%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%B8%8E%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BF%E9%97%AE%E7%89%B9%E7%82%B9/"/>
    <id>https://chenchuanze123.github.io/2022/01/12/%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E4%B8%8E%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BF%E9%97%AE%E7%89%B9%E7%82%B9/</id>
    <published>2022-01-12T01:34:06.000Z</published>
    <updated>2022-01-31T05:45:22.399Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">miner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">miner</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu x = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(x.a);</span><br><span class="line">        System.out.println(x.getA());</span><br><span class="line">        x.miner();</span><br><span class="line">        System.out.println(x.a);</span><br><span class="line">        System.out.println(x.getA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/8142d74d043a4f96b7ea5c454186f7d7.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Java" scheme="https://chenchuanze123.github.io/categories/Java/"/>
    
    
    <category term="Java" scheme="https://chenchuanze123.github.io/tags/Java/"/>
    
    <category term="面向对象" scheme="https://chenchuanze123.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java语言求100以内的素数（详解）</title>
    <link href="https://chenchuanze123.github.io/2022/01/05/Java%E8%AF%AD%E8%A8%80%E6%B1%82100%E4%BB%A5%E5%86%85%E7%9A%84%E7%B4%A0%E6%95%B0%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/"/>
    <id>https://chenchuanze123.github.io/2022/01/05/Java%E8%AF%AD%E8%A8%80%E6%B1%82100%E4%BB%A5%E5%86%85%E7%9A%84%E7%B4%A0%E6%95%B0%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89/</id>
    <published>2022-01-05T08:57:12.000Z</published>
    <updated>2022-01-31T05:43:01.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a>源代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=i/<span class="number">2</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j&gt;i/<span class="number">2</span>)&#123;</span><br><span class="line">System.out.println(i+<span class="string">&quot;是素数！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析过程："><a href="#解析过程：" class="headerlink" title="解析过程："></a>解析过程：</h2><p>素数大家都知道，就是一个数它的因数只有1跟它本身，那么计算机又如何知道其他数不是它的因数的呢？<br>计算机是个木头啊，你跟他说有些数一看就是素数，它根本不懂，所以还得我们来引导啊（狗头）。<br>那如何让它知道呢？<br>那就是用遍历了！</p><ul><li>首先要有两层循环，并且是一层套一层</li><li>外层循环是为了遍历被除数，也就是找我们要输出的素数（如果它是的话），并且将它输出</li><li>内层循环是为了遍历除数，这里的除数最大为<code>i/2</code>,为什么为<code>i/2</code>我们后面会讲到。<br><img src="https://img-blog.csdnimg.cn/3d4da26d68f040549bcc151bd0c4348b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li></ul><h2 id="重点理解："><a href="#重点理解：" class="headerlink" title="重点理解："></a>重点理解：</h2><p>当<code>j</code>遍历到<code>i/2</code>时break了，说明什么问题？还没有<code>break</code> ，又说明什么问题？<br>我们一个一个来回答：<br>  1、当你<code>break</code>的时候，说明你已不是素数了，并且你满足：</p><ul><li> <code>j&lt;=i/2</code> </li><li><code>i%j==0</code></li></ul><p>那么你就不满足：</p><ul><li><code>j&gt;i/2</code></li></ul><p>则将你pass，不输出。</p><p>2、当你没有<code>break</code>时，说明从<code>2</code>到<code>i/2</code>之间的数都不是i的因数（都没有发生整除），那么大于<code>i/2</code>的数还是i的因数吗？<br>假如<code>i=47</code>则<code>i/2=23</code>，那24,24….46中有哪个是47的因数呢？<br>答案是都没有！！<br>所以当<code>j&gt;i/2</code>时，便可输出i的值了。</p><p><strong>所以现在回到之前我们的问题</strong>：为什么是<code>i/2</code>？为什么不是/3,不是/4呢？</p><p>可以这么理解，因为2是最小的整倍数，你若是2的倍数，那么我还用看你是3的倍数吗？不用了啊，因为要的是素数啊！</p><p>这里还有一篇讲素数的：<a href="https://program-think.blogspot.com/2011/12/prime-algorithm-1.html">链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;源代码：&quot;&gt;&lt;a href=&quot;#源代码：&quot; class=&quot;headerlink&quot; title=&quot;源代码：&quot;&gt;&lt;/a&gt;源代码：&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="算法" scheme="https://chenchuanze123.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="必刷题" scheme="https://chenchuanze123.github.io/tags/%E5%BF%85%E5%88%B7%E9%A2%98/"/>
    
    <category term="算法" scheme="https://chenchuanze123.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java编程题</title>
    <link href="https://chenchuanze123.github.io/2022/01/05/Java%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>https://chenchuanze123.github.io/2022/01/05/Java%E7%BC%96%E7%A8%8B%E9%A2%98/</id>
    <published>2022-01-05T08:06:58.000Z</published>
    <updated>2022-01-31T05:42:32.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、一个数如果恰好等于它的因子之和，这个数就称为完数。编写应用程序求1000之内的所有完数。"><a href="#1、一个数如果恰好等于它的因子之和，这个数就称为完数。编写应用程序求1000之内的所有完数。" class="headerlink" title="1、一个数如果恰好等于它的因子之和，这个数就称为完数。编写应用程序求1000之内的所有完数。"></a>1、一个数如果恰好等于它的因子之和，这个数就称为完数。编写应用程序求1000之内的所有完数。</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">int</span> sum=<span class="number">0</span>,i,j;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++) &#123;<span class="comment">//i为被除数</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>,sum=<span class="number">0</span>;j&lt;i;j++) &#123;<span class="comment">//j为除数</span></span><br><span class="line">           <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">               sum=sum+j;<span class="comment">//首先要找出一个数的所有因子吧</span></span><br><span class="line">               <span class="comment">//如果这个数有因子（取余为0），将所有的因子求和</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sum==i)<span class="comment">//判断因子和与被除数是否相等</span></span><br><span class="line"></span><br><span class="line">           System.out.println(<span class="string">&quot;完数:&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="2、编写应用程序求1-2-······-10！"><a href="#2、编写应用程序求1-2-······-10！" class="headerlink" title="2、编写应用程序求1!+2!+······+10！"></a>2、编写应用程序求1!+2!+······+10！</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*需要定义4个变量</span></span><br><span class="line"><span class="comment">n是加到n的阶乘</span></span><br><span class="line"><span class="comment">i是循环数</span></span><br><span class="line"><span class="comment">sum是最终结果值，也是将上次的结果跟新的项值相加</span></span><br><span class="line"><span class="comment">num是每一项的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">10</span>,num=<span class="number">1</span>,sum=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">num=num*i;<span class="comment">//每一项的值</span></span><br><span class="line">sum=sum+num;<span class="comment">//将上次的结果跟新的项值相加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sum);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、分别用do-while和for循环计算1-1-2-1-3-1-4-······的前20项和。"><a href="#3、分别用do-while和for循环计算1-1-2-1-3-1-4-······的前20项和。" class="headerlink" title="3、分别用do while和for循环计算1+1/2!+1/3!+1/4!+······的前20项和。"></a>3、分别用do while和for循环计算1+1/2!+1/3!+1/4!+······的前20项和。</h1><p>do while：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">double</span> sum=<span class="number">0</span>,a=<span class="number">1</span>,i=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">do</span> &#123; sum=sum+a;<span class="comment">//将所有的项求和</span></span><br><span class="line">           i++;</span><br><span class="line">           a=(<span class="number">1.0</span>/i)*a;<span class="comment">//a还是每一项啊，因为是阶乘，所以将上一项与（1.0/i）相乘</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">while</span>(i&lt;=<span class="number">20</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;1+1/2!+1/3!+1/4!+······的前20项和=&quot;</span>+sum);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>for：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"> <span class="keyword">double</span> sum=<span class="number">0</span>,j=<span class="number">1</span>,i=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(;i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        j = j * (<span class="number">1.0</span> / i);</span><br><span class="line">        sum = sum + j;</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(<span class="string">&quot;1+1/2!+1/3!+1/4!+······的前20项和=&quot;</span>+sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4、编写应用程序，使用for循环语句计算8-88-888-····前10项之和"><a href="#4、编写应用程序，使用for循环语句计算8-88-888-····前10项之和" class="headerlink" title="4、编写应用程序，使用for循环语句计算8+88+888+····前10项之和"></a>4、编写应用程序，使用for循环语句计算8+88+888+····前10项之和</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> a,b=<span class="number">0</span>, c=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(a=<span class="number">1</span>;a&lt;=<span class="number">10</span>;a++)&#123;     <span class="comment">//循环10次</span></span><br><span class="line">        b=b*<span class="number">10</span>+<span class="number">8</span>;           <span class="comment">//每一个数是前一个数的10倍加8</span></span><br><span class="line">        c+=b;               <span class="comment">//计算10项之和</span></span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(<span class="string">&quot;8+88+888...前10项之和 = &quot;</span> + c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5、编写应用程序，输出满足1-2-3-·····-n-lt-8888的最大正整数n。"><a href="#5、编写应用程序，输出满足1-2-3-·····-n-lt-8888的最大正整数n。" class="headerlink" title="5、编写应用程序，输出满足1+2+3+·····+n&lt;8888的最大正整数n。"></a>5、编写应用程序，输出满足1+2+3+·····+n&lt;8888的最大正整数n。</h1><p><strong>for循环版：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">1</span>;;) &#123;</span><br><span class="line">result = result + n;</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">if</span>(result &gt; <span class="number">8888</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;满足条件的最大整数n为&quot;</span> + (n-<span class="number">1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>wihle循环版：</strong>      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">int</span> result=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">        result = result + n;</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span>(result &gt;= <span class="number">8888</span>)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;满足条件的最大整数n为:&quot;</span>+(n-<span class="number">1</span>));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="6、编写一个应用程序，求100以内的所以素数。"><a href="#6、编写一个应用程序，求100以内的所以素数。" class="headerlink" title="6、编写一个应用程序，求100以内的所以素数。"></a>6、编写一个应用程序，求100以内的所以素数。</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i,j,m=<span class="number">2</span>,n=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">200</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(j =<span class="number">2</span>;j&lt;=i/<span class="number">2</span>;j++)&#123;   <span class="comment">//为什么是j/2，因为最小的倍数是2，比如2是4的因子，但是3不是4的因子，16是32的因子而大于16的:17，18,19都不是它的因子</span></span><br><span class="line">                <span class="keyword">if</span>(i%j==<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j&gt;i/<span class="number">2</span>)</span><br><span class="line">                System.out.println(i+<span class="string">&quot;是素数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、一个数如果恰好等于它的因子之和，这个数就称为完数。编写应用程序求1000之内的所有完数。&quot;&gt;&lt;a href=&quot;#1、一个数如果恰好等于它的因子之和，这个数就称为完数。编写应用程序求1000之内的所有完数。&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://chenchuanze123.github.io/categories/Java/"/>
    
    
    <category term="必刷题" scheme="https://chenchuanze123.github.io/tags/%E5%BF%85%E5%88%B7%E9%A2%98/"/>
    
    <category term="Java" scheme="https://chenchuanze123.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark使用教程</title>
    <link href="https://chenchuanze123.github.io/2021/12/29/Wireshark%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://chenchuanze123.github.io/2021/12/29/Wireshark%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-12-28T16:40:31.000Z</published>
    <updated>2022-01-31T05:43:53.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍与说明"><a href="#介绍与说明" class="headerlink" title="介绍与说明"></a>介绍与说明</h1><p>大学上计算机网络的时候就学习了TCP的三次握手协议，当时我学的时候就觉得这些东西好虚啊，看不见摸不着，学的费心费力，结果却差强人意。最近因为要做TCP/IP的课设，老师要求要用wireshark，然后就接触到了这款开源软件<a href="https://www.wireshark.org/">Wireshark</a>。通过了解知道这是一款非常流行的网络封包分析软件，功能十分强大，可以截取各种网络封包，显示网络封包的详细信息。有了wireshark就能截获这些网络数据包，可以清晰的看到数据包中的每一个字段。更能加深我们对网络协议的理解。（所以在这插一句话哦： <font color=#ff2200 size=3 face="黑体">理论指导实践，实践加深理论</font>)<img src="https://img-blog.csdnimg.cn/ef2abb837c074102a9a7591408daf33a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述">在过去，网络封包分析软件是非常昂贵的，或是专门属于盈利用的软件。wireshark的出现改变了这一切。在GNUGPL通用许可证的保障范围底下，使用者可以以免费的途径取得软件与其源代码，并拥有针对其源代码修改及客制化的权利。</p><p> <font color=#0099ff size=3 face="黑体">Ethereal（wireshark的前身）是全世界最广泛的网络封包分析软件之一。</font>为了安全考虑，wireshark只能查看封包，而不能修改封包的内容，或者发送封包。wireshark能获取HTTP，也能获取HTTPS，但是不能解密HTTPS，所以wireshark看不懂HTTPS中的内容.<br>  <font color=#ff0000 size=3 face="黑体">总结，如果是处理HTTP,HTTPS 还是用<strong>Fiddler</strong>, 其他协议比如TCP,UDP 就用wireshark.</font></p><p><strong>简单介绍一下</strong>：Fiddler是一个http协议调试代理工具，它能够记录并检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据（指cookie,html,js,css等文件）。<br>Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露http通讯还提供了一个用户友好的格式。它是用C#写出来的,包含一个简单却功能强大的基于JScript .NET 事件脚本子系统，它的灵活性非常棒，可以支持众多的http调试任务，并且能够使用.net框架语言进行扩展。（<a href="https://baike.baidu.com/item/Fiddler/2868968">百度百科</a>，<a href="https://docs.telerik.com/fiddler-everywhere/introduction">官方文档</a>）</p><p>那么我们在Linux系统下一般用什么抓包工具呢？<br>那就是<strong>TCPDUMP</strong>啦！</p><p><strong>简单介绍一</strong>下：TCPDump可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。<br>Linux作为网络服务器，特别是作为路由器和网关时，数据的采集和分析是不可少的。TcpDump是Linux中强大的网络数据采集分析工具之一。<br>用简单的话来定义tcpdump，就是：dump the traffic on a network，根据使用者的定义对网络上的数据包进行截获的包分析工具。<br>作为互联网上经典的的系统管理员必备工具，tcpdump以其强大的功能，灵活的截取策略，成为每个高级的系统管理员分析网络，排查问题等所必备的工具之一。（<a href="https://www.tcpdump.org/index.html#documentation">官方文档</a>）</p><h1 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h1><p><img src="https://img-blog.csdnimg.cn/1fba3b884c724e7e9ab1c981b9c9d156.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5ff77aeb6adf4e3481cc721668c9abc9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>上图，一般用作对手机应用上网时的抓包分析，比如说想分析手机版微信聊天或者打开朋友圈的数据包。</p><p><img src="https://img-blog.csdnimg.cn/5aa42c01a7e14c59a1f4c3bb61a8968d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/bbf74b4fccb245b39e52c621c9871b6f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>点击不同协议的数据包，数据包分层协议展示的内容就不一样，上图笔者分别选中的是第六个（TLS）和第七个(TCP)数据包。<br> <font color=#55992 size=3 face="黑体">TLS：它是一个在传输层为数据提供保密和完整性的一个安全协议，说白了就是保障传输层数据包的安全，大家所熟知的HTTPS中的S就是TLS。</font><br>再例如：http协议是一个应用协议所以<br><img src="https://img-blog.csdnimg.cn/e3af09fbe26842c4861175e6efd1ab06.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对IP层数据报进行一一对应：<br><img src="https://img-blog.csdnimg.cn/f9af12fea0fe4aca927eeadca299e068.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>对TCP数据报进行一一对应<br><img src="https://img-blog.csdnimg.cn/737722e7d68b45ffa3b22b7414dcf7c4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><p>简单介绍一下Wireshark分析数据包时最重要的技巧之一的过滤器。一次性嗅探到的数据包有很多，想要高效地提取出你想要的数据包或者对某个数据包中某个字段值的分析等，必不可少的就是过滤。过滤器分为捕捉过滤器（CaptureFilters）和显示过滤器（DisplayFilters）。<br> <font color=#099f size=3 face="黑体">可以把捕获过滤器看作是一级过滤，显示过滤看做二级过滤<br>也就是说：先规定一下数据报的特征（一级过滤），由于需求过滤完之后还是满足不了要求所以再进行一次过滤（二级过滤），笔者只是打个比方，可能不太严谨。</font></p><h2 id="捕获过滤器表达式"><a href="#捕获过滤器表达式" class="headerlink" title="捕获过滤器表达式"></a>捕获过滤器表达式</h2><p>捕获过滤器表达式作用在wireshark开始捕获数据包之前，只捕获符合条件的数据包，不记录不符合条件的数据包。<br>捕获过滤器表达式没有像显示过滤器表达式那样明显的规律，但写法不多所以也不难；而且除非全部捕获要占用的磁盘空间实现太大，且你非常明确过滤掉的数据包是你不需要的，不然一般都不用捕获过滤器表达式而用显示过滤器表达式。<br>如何打开捕获过滤器：<br><img src="https://img-blog.csdnimg.cn/d66181dc51e44ec2ae40981ff5a0e923.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h3><p><img src="https://img-blog.csdnimg.cn/56051895be0049658bbdb45a127e620a.png" alt="在这里插入图片描述"></p><ul><li><p>Protocol（协议）<br>可能的值: ether, fddi, ip, arp, rarp, decnet, tcp and udp等。如果没有特别指明是什么协议，则默认使用所有支持的协议</p></li><li><p>Direction（方向）<br>可能的值: src, dst, src and dst, src or dst。如果没有特别指明来源或目的地，则默认使用 “src or dst” 作为关键字<br>比如：”host 10.2.2.2″与”src or dst host 10.2.2.2″是一样的</p></li><li><p>Host(s)<br>可能的值： net, port, host, portrange。如果没有指定此值，则默认使用”host”关键字<br>比如：”src 10.1.1.1”与”src host 10.1.1.1″相同</p></li><li><p>Logical Operations（逻辑运算）<br>可能的值：not, and, or<br>否(“not”)具有最高的优先级。或(“or”)和与(“and”)具有相同的优先级，运算时从左至右进行。<br>例如，<br>“not tcp port 3128 and tcp port 23”与”(not tcp port 3128) and tcp port 23”相同。<br>“not tcp port 3128 and tcp port 23”与”not (tcp port 3128 and tcp port 23)”不同。</p></li></ul><h3 id="捕获过滤器例子"><a href="#捕获过滤器例子" class="headerlink" title="捕获过滤器例子"></a>捕获过滤器例子</h3><p>显示目的TCP端口为3128的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp dst port <span class="number">3128</span></span><br></pre></td></tr></table></figure><p>显示来源IP地址为10.1.1.1的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip src host <span class="number">10.1</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>显示目的或来源IP地址为10.1.2.3的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host <span class="number">10.1</span><span class="number">.2</span><span class="number">.3</span></span><br></pre></td></tr></table></figure><p>显示来源为UDP或TCP，并且端口号在2000至2500范围内的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src portrange <span class="number">2000</span><span class="number">-2500</span></span><br></pre></td></tr></table></figure><p>显示除了icmp以外的所有封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">not</span> icmp</span><br></pre></td></tr></table></figure><p>显示来源IP地址为10.7.2.12，但目的地不是10.200.0.0/16的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src host <span class="number">10.7</span><span class="number">.2</span><span class="number">.12</span> <span class="keyword">and</span> <span class="keyword">not</span> dst net <span class="number">10.200</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span></span><br></pre></td></tr></table></figure><p>显示源IP为10.4.1.12或源网络为10.6.0.0/16，目的TCP 端口号在200至10000之间，并且目的位于网络 10.0.0.0/8内所有封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(src host <span class="number">10.4</span><span class="number">.1</span><span class="number">.12</span> <span class="keyword">or</span> scr net <span class="number">10.6</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span>) <span class="keyword">and</span> tcp dst portrange <span class="number">200</span><span class="number">-10000</span> <span class="keyword">and</span> dst net <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">8</span></span><br></pre></td></tr></table></figure><p>捕获广播流量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">broadcast</span><br></pre></td></tr></table></figure><h2 id="显示过滤器表达示"><a href="#显示过滤器表达示" class="headerlink" title="显示过滤器表达示"></a>显示过滤器表达示</h2><p>显示过滤器表达式作用在在wireshark捕获数据包之后，从已捕获的所有数据包中显示出符合条件的数据包，隐藏不符合条件的数据包。<br>显示过滤表达示在工具栏下方的“显示过滤器”输入框输入即可生效</p><p><img src="https://img-blog.csdnimg.cn/114c10fa375d4aeb830207453f6ca569.png" alt="在这里插入图片描述"></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="https://img-blog.csdnimg.cn/882e894882294c1c926d234b574df3b2.png" alt="在这里插入图片描述"></p><ul><li><p>Protocol(协议)<br>位于OSI模型第2至7层的协议，如：IP、TCP、DNS等</p></li><li><p>String1,String2（可选项）<br>协议的子类</p></li><li><p>Comparison Operator（比较运算符）<br>可以使用6种比较运算符<br><img src="https://img-blog.csdnimg.cn/6eb3ce071b5e435281bffc98b34a1e3d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p></li></ul><ul><li>Logical Operations（逻辑运算符）<br><img src="https://img-blog.csdnimg.cn/b8199c77923846f3939f7f3663679af7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_12,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>逻辑异或是一种排除性的或。当其被用在过滤器的两个条件之间时，只有当且仅当其中的一个条件满足时，这样的结果才会被显示在屏幕上<br>例如：”tcp.dstport 80 xor tcp.dstport 1025”<br>只有当目的TCP端口为80或者来源于端口1025（但又不能同时满足这两点）时，这样的数据包才会被显示</li></ul><h3 id="显示过滤器例子"><a href="#显示过滤器例子" class="headerlink" title="显示过滤器例子"></a>显示过滤器例子</h3><p>显示SNMP或DNS或ICMP封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmp || dns || icmp</span><br></pre></td></tr></table></figure><p>显示来源或目的IP地址为10.1.1.1的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr == <span class="number">10.1</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>显示来源不为10.1.2.3或目的不为10.4.5.6的包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.src != <span class="number">10.1</span><span class="number">.2</span><span class="number">.3</span> <span class="keyword">or</span> ip.dst != <span class="number">10.4</span><span class="number">.5</span><span class="number">.6</span></span><br></pre></td></tr></table></figure><p>显示来源或目的TCP端口号为25的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.port == <span class="number">25</span></span><br></pre></td></tr></table></figure><p>显示目的TCP端口号为25的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.dstport == <span class="number">25</span></span><br></pre></td></tr></table></figure><p>显示包含TCP标志的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.flags</span><br></pre></td></tr></table></figure><p>显示包含TCP SYN标志的封包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.flags.syn == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>排除arp流量</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!arp</span><br></pre></td></tr></table></figure><p>文本管理流量（telnet或ftp）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.port == <span class="number">23</span> || tcp.port == <span class="number">21</span></span><br></pre></td></tr></table></figure><h2 id="两种过滤器的区别"><a href="#两种过滤器的区别" class="headerlink" title="两种过滤器的区别"></a>两种过滤器的区别</h2><p>可以看出这两种过滤器在使用和功能上有着区别：</p><p>捕捉过滤器是数据经过的第一层过滤器，它用于控制捕捉数据的数量，以避免产生过大的日志文件。而显示过滤器是在对捕获结果进行筛选时使用，允许我们在日志文件中迅速准确地找到所需要的记录。<br>捕捉过滤器必须在捕捉数据包之前设置，若是捕捉的数据包不是我们想要的，需要重新设置捕捉过滤器并重新捕捉数据包。显示过滤器的功能比捕捉过滤器更为强大，可以重复设置表达式对捕获的结果重复筛选而不需要重新捕获数据包。<br>跟踪TCP流</p><h1 id="分析TCP的三次握手"><a href="#分析TCP的三次握手" class="headerlink" title="分析TCP的三次握手"></a>分析TCP的三次握手</h1><p><img src="https://img-blog.csdnimg.cn/91a4eb7245264071ba442d6544bc5c1d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>上图中可以看到wireshark截获到了三次握手的三个数据包。第四个包才是HTTP的， 这说明HTTP的确是使用TCP建立连接的。</p><ul><li><p>第一次握手数据包<br>客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接。</p></li><li><p>第二次握手的数据包<br>服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的I S N加1以.即0+1=1</p></li><li><p>第三次握手的数据包<br>客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放在确定字段中发送给对方.并且在数据段放写ISN的+1</p></li></ul><p>下图为TCP三次握手的流程图</p><p><img src="https://img-blog.csdnimg.cn/5f248603a7f248a39b4fb0641abb1a4c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="Wireshark中常见的TCP数据包的红黑着色问题"><a href="#Wireshark中常见的TCP数据包的红黑着色问题" class="headerlink" title="Wireshark中常见的TCP数据包的红黑着色问题"></a>Wireshark中常见的TCP数据包的红黑着色问题</h1><ol><li>TCP out-of-order segment<br>TCP存在问题。<br>Wireshark判断TCP out-of-order是基于TCP包中SEQ number并非期望收到的下一个SEQ number，则判断为out-of-order。因此，出现TCP out-of-order时，很大可能是TCP存在乱序或丢包，导致接收端的seq number不连续。<br>如下图，第4包数据，在客户端已经收到服务端的SYN ACK后，服务端再次发送了SYN ACK，wireshark将此包标记为out-of-order。<br><img src="https://img-blog.csdnimg.cn/2679a91434784be9b399428745c693be.png" alt="请添加图片描述"></li></ol><p>如下图，第7包数据，本应收到seq number为1366882的TCP包，但却收到了1044834的包，这包数据应该是晚到了，因此wireshark标记为out-of-order。<br><img src="https://img-blog.csdnimg.cn/0ec5ddc5c43741cf8ab555f1b4ef3afb.png" alt="请添加图片描述"></p><p>如果抓包中出现大量的out-of-order包，则说明网络存在较大的TCP乱序或丢包。</p><ol start="2"><li>TCP Previous segment not captured<br>前一个TCP分段没有抓到。<br>在TCP连接建立的时候，SYN包里面会把彼此TCP最大的报文段长度，即MSS标志，一般都是1460.如果发送的包比最大的报文段长度长的话就要分片了，被分片出来的包，就会被标记了“TCP segment of a reassembled PDU”，这些包分片存在同样的ack number，且每个分片的seq number不同。<br><img src="https://img-blog.csdnimg.cn/deb49cfdbad24be7a895fd54c84fca84.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></li></ol><p>这些分片正常应该是连续接收的，即前一个分片指示的next seq number即为下一个收到的分片的seq number。假如收到的下一个分片的seq number与上一个比不连续的话，wireshark就会将该分片标记为TCP Previous segment not captured。如下图，ack number为705的TCP包被分为多个分片发送，其中有一个长度为1408的分片没有被抓到。<br><img src="https://img-blog.csdnimg.cn/6e90195987884d1ba868f5c64da7884f.png" alt="请添加图片描述"></p><p>需要注意的是，前一个分片丢失，有可能是网络中确实丢失了，或者晚到了，也有可能是wireshark本身并没有抓到。</p><ol start="3"><li>TCP Spurious Retransmission<br>TCP虚假重传。<br>当抓到2次同一包数据时，wireshark判断网络发生了重传，同时，wireshark抓到初传包的反馈ack，因此wireshark判断初传包实际并没有丢失，因此称为虚假重传。基于wireshark的判断机制，如果抓包点在客户端的话，虚假重传一般为下行包，因为这时，客户端在收到服务端的下行包后发送反馈ack，并被wireshark抓到，但很有可能服务端未收到此反馈ack，RTO超时，触发服务端重传。如下图，红框内出现了2次虚假重传，其中绿色的两条为同一包数据，粉色的两条为同一包数据。</li></ol><p><img src="https://img-blog.csdnimg.cn/210f4091380944da8f97be308141e2bd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><ol start="4"><li>TCP Retransmission<br>TCP重传。<br>当抓到2次同一包数据时，wireshark判断发生了重传，同时wireshark没有抓到初传包的反馈ack，因此，wireshark判定重传有效，标记为TCP Retransmission。基于软件的判定机制，如果抓包点在客户端的话，TCP重传一般为上行包，因为这时，客户端并没有收到服务端的反馈ack，无从知晓服务端是否收到了初传包，RTO超时后触发客户端重传。此时存在2种情况，即1）服务端收到了初传包，只是下发的反馈ack丢包，客户端没有收到；2）服务端没有收到初传包，因此也就没有下发反馈ack。对于第一种情况，如果抓包点在服务端的话，wireshark很有可能就会把来自客户端的重传包标记为TCP Spurious Retransmission。<br>如下图，红线的TCP包为重传包，wireshark为该包添加了重传原因，是由于TRO超时导致，以及初传包序号45，并给出了当前的RTO超时时间。</li></ol><p><img src="https://img-blog.csdnimg.cn/74500f67587541b1a39269122406de06.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><ol start="5"><li>TCP fast Retransmission<br>TCP快速重传。<br>TCP协议设定了快速重传机制以避免过多的慢启动对传输速率的影响。快速重传通过接收到3个或3个以上重复的ack反馈触发。快速重传不需要等待RTO超时。如下图。<br>325包，客户端向服务端反馈ack=133251，说明下一个期望收到服务端seq=133251的包；<br>326包，服务端向客户端发送了seq=135771的数据包，与客户端的期望不符，因此客户端在327包重传了ack=133251的包，再次申明期望收到seq=133251的包。Wireshark将重复ack标记为TCP Dup ACK，#后边指明为第几次重传。<br>328包，服务端向客户端发送了seq=137031的数据包，仍然与客户端期望不符，客户端在329包再次重传ack=133251的包。<br>330包，服务端收到3次重复ack，触发快速重传，重传了seq=133251的TCP分片。<br><img src="https://img-blog.csdnimg.cn/9237a897d4e5432aae28e71bfb69813e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></li></ol><ol start="6"><li>TCP Dup ACK<br>重复ack。<br>当网络中存在乱序或者丢包时，将会导致接收端接收到的seq number不连续。此时接收端会向发送端回复重复ack，ack值为期望收到的下一个seq number。重复ack数大于等于3次将会触发快速重传。如下图，<br>315包，客户端向服务端发送ack=126951的反馈，期望下一包收到seq=126951的TCP包。但下一包接收到的却是seq=128211的TCP包，由于seq不连续，wireshark将该报标记为TCP Previous segment not captured。<br>317包，客户端向服务端重复发送ack=126951的包，第一次重发，#后边带1。<br>318包，客户端收到seq=126951的TCP包。<br>319包，截止到seq=129471的所有TCP包全部收到，因此客户端回复了ack=129471的反馈。</li></ol><p><img src="https://img-blog.csdnimg.cn/b128833592084ad4b173c0d11eba7a54.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><ol start="7"><li>TCP window update<br>TCP窗口更新。<br>当接收方的TCP window发生突变时，接收方通过TCP window update消息告知对方当前的接收窗口大小。如下图，TCP window Update同时携带了反馈ack，ack序列号与前一个反馈ack序列号相同，但这并不是重复ack。<br><img src="https://img-blog.csdnimg.cn/109b4e516a094378894fdb1dcd274b02.png" alt="请添加图片描述"></li></ol><ol start="8"><li>TCP acked unseen segment<br>反馈ACK指向了一个未知的TCP片段。<br>这个意思是说ACK反馈的是一个wireshark上不存在的TCP包。很可能是wireshark漏抓了这个包，但却抓到了对端反馈的该报的ack包。如下图，标记为ack unseen segment的包反馈的ack=2721，看着像是反馈的seq=1361的包，但其实这个ack还反馈了seq=1的包，由于seq=1的包没有抓到，因此wireshark将反馈ack标记为ack unseen segment。从下面的图还可知，由于对端已经反馈了ack=2721，说明发端发送的seq=1的包，对端也收到了，只不过wireshark可能漏抓了而已。<br><img src="https://img-blog.csdnimg.cn/4ba3e61e15e84f58ae91470bfaa4661b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></li></ol><ol start="9"><li>TCP ZeroWindow<br>TCP滑动窗口为0。<br>当发送端发包速率大于接收端的接收速率时，会造成接收端TCP window越来越小，当接收端在反馈ack时携带的window size=0时，wireshark标记TCP Zero window。此时发送端将暂停发送数据，直到收到接收端window size!=0的标志。</li></ol><p><img src="https://img-blog.csdnimg.cn/496682acfee042b78e43e41d9fe75f56.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><ol start="10"><li>TCP window full<br>TCP window满。<br>是指的发送端发送的数据已经达到的接受窗口的上限。发送端暂停发送，等待新的接收窗口的通告。<br>如下图，客户端向服务端发送的ack反馈，期望下一包收到的seq=288961，但接收窗口仅有960，服务端在收到ack后发送了960字节的数据，TCP window full。注意，len=1004是整个IP包的长度，需要减去IP头44字节，即960字节。<br><img src="https://img-blog.csdnimg.cn/23f6851efac04c9c8baedf95092df6f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></li></ol><ol start="11"><li>TCP RST<br>TCP 重置。<br>是TCP协议结束异常连接的一种方式，通过flog中的reset=1标记。当TCP连接无法通过正常的4次挥手结束时，一方可以通过发送携带reset标志的TCP包结束TCP连接。<br>如下图，发送方通过2个TCP流发送数据，截图中，接收方首先向发送方反馈了TCP window=0，让发送方暂缓发送数据，之后紧接着发送了TCP RST标记，释放了TCP连接。猜测可能接收方程序突然崩溃了，导致缓存区数据没法清空，之后接收方系统发送了TCP reset释放TCP连接。<br><img src="https://img-blog.csdnimg.cn/490cd4a44b5645b49b379f3cbb876b10.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍与说明&quot;&gt;&lt;a href=&quot;#介绍与说明&quot; class=&quot;headerlink&quot; title=&quot;介绍与说明&quot;&gt;&lt;/a&gt;介绍与说明&lt;/h1&gt;&lt;p&gt;大学上计算机网络的时候就学习了TCP的三次握手协议，当时我学的时候就觉得这些东西好虚啊，看不见摸不着，学的费心费力，</summary>
      
    
    
    
    
    <category term="网络" scheme="https://chenchuanze123.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>时序图与类图</title>
    <link href="https://chenchuanze123.github.io/2021/12/14/%E6%97%B6%E5%BA%8F%E5%9B%BE%E4%B8%8E%E7%B1%BB%E5%9B%BE/"/>
    <id>https://chenchuanze123.github.io/2021/12/14/%E6%97%B6%E5%BA%8F%E5%9B%BE%E4%B8%8E%E7%B1%BB%E5%9B%BE/</id>
    <published>2021-12-14T03:27:17.000Z</published>
    <updated>2022-01-31T05:46:17.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时序图："><a href="#时序图：" class="headerlink" title="时序图："></a>时序图：</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。<br>时序图是一个二维图，横轴表示对象，纵轴表示时间，消息在各对象之间横向传递，依照时间顺序纵向排列。</p><h2 id="作用是什么"><a href="#作用是什么" class="headerlink" title="作用是什么"></a>作用是什么</h2><p>1、展示对象之间交互的顺序。将交互行为建模为消息传递，通过描述消息是如何在对象间发送和接收的来动态展示对象之间的交互；</p><p>2、相对于其他UML图，时序图更强调交互的时间顺序；</p><p>3、可以直观的描述并发进程。</p><h2 id="组成有哪些"><a href="#组成有哪些" class="headerlink" title="组成有哪些"></a>组成有哪些</h2><ul><li>角色（Actors）</li><li>对象（Object）</li><li>生命线（Lifetime）</li><li>消息（Message）</li><li>激活（Focus of Control）</li><li>组合片段</li></ul><h3 id="角色："><a href="#角色：" class="headerlink" title="角色："></a>角色：</h3><p>通常指“人”，也可以是组织、机器、系统等等“抽象的人”，和用例图一样，用小人图表示</p><h3 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h3><p>就是与上述“人”对应的“物”了，包括所有产品、服务、设备等等抽象的物体</p><p><img src="https://img-blog.csdnimg.cn/3f8460b934e547c899290cab3aff54e3.png" alt="在这里插入图片描述"></p><h3 id="生命线："><a href="#生命线：" class="headerlink" title="生命线："></a>生命线：</h3><p>在时序图中表示为从对象图标向下延伸的一条虚线，表示对象存在的时间。<br><img src="https://img-blog.csdnimg.cn/f55c8844d8944bb0a026ae417ceafaab.jpg?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h3 id="消息："><a href="#消息：" class="headerlink" title="消息："></a>消息：</h3><p>消息一般分为</p><ul><li>同步消息（Synchronous Message）</li><li>异步消息（Asynchronous Message）</li><li>返回消息（Return Message）</li><li>自关联消息：表示方法的自身调用或者一个对象内的一个方法调用另外一个方法。</li></ul><p>消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制。用来表示同步的意义；</p><p>消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接受者返回消息或者控制。异步消息的接收者和发送者是并发工作的；</p><p>返回消息表示从过程调用返回。</p><h3 id="激活："><a href="#激活：" class="headerlink" title="激活："></a>激活：</h3><p>激活用一个细长的矩阵框（在生命线上）表示。<img src="https://img-blog.csdnimg.cn/8f4c388f9ba4466ea69886a4b444ca4f.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="组合片段："><a href="#组合片段：" class="headerlink" title="组合片段："></a>组合片段：</h3><p>组合片段用来解决交互执行的条件和方式，它允许在序列图中直接表示逻辑组件，用于通过指定条件或子进程的应用区域，为任何生命线的任何部分定义特殊条件和子进程。组合片段共有13种，名称及含义如下：<img src="https://img-blog.csdnimg.cn/06090867c298444fa34cfad1434d5650.jpg?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>举例：<br>（1）抉择(Alt）<br><img src="https://img-blog.csdnimg.cn/ebe34737aef740208f6bd1df219d6a7d.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>（2）循环（Loop）</p><p>片段重复一定次数，可以在临界中指示片段重复的条件。</p><p><img src="https://img-blog.csdnimg.cn/fc1234a4010644ceb88e30f7a6fae98c.jpg?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_12,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><p>（3）并行（Par）</p><p><img src="https://img-blog.csdnimg.cn/aa1ab5cd8406452995c7d5d0b10063e9.jpg?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_13,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p>类图属于UML中的静态视图，主要用来分析业务概念，描述静态场景；动态视图描述业务行为，分析动态场景。<br><img src="https://img-blog.csdnimg.cn/25e473b28a154b118a22057f7e9ba2eb.webp?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_14,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h2><p>类图（Class Diagrame）是描述类、接口、协作以及它们之间关系的图，用来显示系统中各个类的静态结构。</p><p>类图包含7个元素：类、接口、协作、依赖关系、泛化关系、实现关系以及关联关系。</p><h2 id="作用是什么-1"><a href="#作用是什么-1" class="headerlink" title="作用是什么"></a>作用是什么</h2><ul><li>对系统的词汇建模（建立抽象系统词汇，如班级、学生）；</li><li>对简单协作建模（将系统词汇中是事物协同工作的方式可视化和详述，如班级和学生的关系表示）；</li><li>对逻辑数据库模式建模</li></ul><h2 id="组成有哪些-1"><a href="#组成有哪些-1" class="headerlink" title="组成有哪些"></a>组成有哪些</h2><p>在类图中，类用矩形来表示，分为3个部分：名称部分（Name）、属性部分（Attribute）和方法部分（Operation）。<br><img src="https://img-blog.csdnimg.cn/8e764ef7f0644bcf91845c36b7d05617.webp" alt="请添加图片描述"><br>例如定义一个Student类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> //定义学生类</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> string name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> englishScore;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mathScore;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> computerScore;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> sumScore;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">student</span><span class="params">(string x, <span class="keyword">int</span> y, <span class="keyword">int</span>  z, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            name = x;</span><br><span class="line">            englishScore = y;</span><br><span class="line">            mathScore = z;</span><br><span class="line">            computerScore =k;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sum</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            sumScore = englishScore + mathScore + computerScore;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>对应的类图：<br><img src="https://img-blog.csdnimg.cn/23a52e2728fb46af844c1396b5854056.png" alt="请添加图片描述"><br><strong>关系</strong></p><ul><li>依赖（Dependency）关系</li><li>泛化（Generalization）关系</li><li>关联（Association）关系</li><li>聚合（Aggregation）关系</li><li>实现（Realization）关系</li></ul><h3 id="（1）-依赖（Dependency）关系"><a href="#（1）-依赖（Dependency）关系" class="headerlink" title="（1） 依赖（Dependency）关系"></a>（1） 依赖（Dependency）关系</h3><p>依赖表示一个类以某种形式依赖于其他类。当两个类处于依赖关系中时，其中一个类的改变可能会影响另一个类。<br><strong>符号</strong>：虚线箭头<br><img src="https://img-blog.csdnimg.cn/ce3b4045579d4849987e48be039b3c21.png" alt="请添加图片描述"><br><strong>依赖关系在代码中的表现</strong><br>      在程序代码中，依赖关系意味着一个类的对象出现在另一个类的操作中。常见的有两种情况：一个类将另一个类的对象作为自己某个操作的参数（形参），或者是操作的局部变量。</p><p>程序演示：<br>train类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="class"><span class="keyword">class</span> <span class="title">train</span></span></span><br><span class="line"><span class="class"> 2     </span>&#123;</span><br><span class="line"> <span class="number">3</span>         <span class="keyword">public</span> string number;</span><br><span class="line"> <span class="number">4</span> </span><br><span class="line"> <span class="number">5</span>         <span class="function"><span class="keyword">public</span> <span class="title">train</span><span class="params">(string num)</span></span></span><br><span class="line"><span class="function"> 6         </span>&#123;</span><br><span class="line"> <span class="number">7</span>             number = num;</span><br><span class="line"> <span class="number">8</span>         &#125;</span><br><span class="line"> <span class="number">9</span> </span><br><span class="line"><span class="number">10</span>         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">11         </span>&#123;</span><br><span class="line"><span class="number">12</span>             Console.WriteLine(<span class="string">&quot;列车启动……列车到站&quot;</span>);</span><br><span class="line"><span class="number">13</span>         &#125;</span><br><span class="line"><span class="number">14</span>     &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="class"><span class="keyword">class</span> <span class="title">person</span></span></span><br><span class="line"><span class="class"> 2     </span>&#123;</span><br><span class="line"> <span class="number">3</span>         <span class="keyword">public</span> string name;</span><br><span class="line"> <span class="number">4</span>         <span class="function"><span class="keyword">public</span> <span class="title">person</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"> 5         </span>&#123;</span><br><span class="line"> <span class="number">6</span>             <span class="keyword">this</span>.name=name;</span><br><span class="line"> <span class="number">7</span>         &#125;</span><br><span class="line"> <span class="number">8</span>         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GoToBeijing</span><span class="params">(train mytrain)</span>  <span class="comment">//从河南到北京</span></span></span><br><span class="line"><span class="function"> 9         </span>&#123;</span><br><span class="line"><span class="number">10</span>             Console.Write(name+<span class="string">&quot;去北京乘坐&#123;0&#125;列车：&quot;</span>,mytrain.number);</span><br><span class="line"><span class="number">11</span>             mytrain.run();</span><br><span class="line"><span class="number">12</span>         &#125;</span><br><span class="line"><span class="number">13</span>         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GoToHenan</span><span class="params">()</span>   <span class="comment">//从北京到河南</span></span></span><br><span class="line"><span class="function">14         </span>&#123;</span><br><span class="line"><span class="number">15</span>             train mytrain = <span class="keyword">new</span> train(<span class="string">&quot;1488&quot;</span>); </span><br><span class="line"><span class="number">16</span>             Console.Write(name + “去河南乘坐&#123;<span class="number">0</span>&#125;列车：<span class="string">&quot;, mytrain.number);</span></span><br><span class="line"><span class="string">17             mytrain.run();</span></span><br><span class="line"><span class="string">18         &#125;</span></span><br><span class="line"><span class="string">19     &#125;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>主程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class"> 2     </span>&#123;</span><br><span class="line"> <span class="number">3</span>         <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"> 4         </span>&#123;</span><br><span class="line"> <span class="number">5</span>             person person1 = <span class="keyword">new</span> person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"> <span class="number">6</span>             person person2 = <span class="keyword">new</span> person(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"> <span class="number">7</span> </span><br><span class="line"> <span class="number">8</span>             train train1 = <span class="keyword">new</span> train(<span class="string">&quot;1487次&quot;</span>); <span class="comment">//河南到北京</span></span><br><span class="line"> <span class="number">9</span>         train train2 = <span class="keyword">new</span> train(“<span class="number">1488</span>次”); <span class="comment">//河南到北京</span></span><br><span class="line"><span class="number">10</span>         person1.GoToBeijing(train1);</span><br><span class="line"><span class="number">11</span>             person2.GoToBeijing(train2);</span><br><span class="line"><span class="number">12</span>             person1.GoToHenan();</span><br><span class="line"><span class="number">13</span>             person2.GoToHenan();</span><br><span class="line"><span class="number">14</span>         &#125;</span><br><span class="line"><span class="number">15</span>     &#125;</span><br><span class="line"></span><br><span class="line">Program</span><br></pre></td></tr></table></figure><p>对应的类图：<br><img src="https://img-blog.csdnimg.cn/e73d0bbd6ea7401593f8e880780db1f6.png" alt="请添加图片描述"><br><strong>依赖关系与关联关系的区别</strong><br>       1、符号和在代码中的区别<strong>加粗样式</strong><br>      2、语义上的区别</p><pre><code>  当一个类的实例与另一个类的一些特定实例存在固定的对应关系时，这两个类之间为关联关系。  只要一个类用到另一个类，但是和另一个类的关系不是太明显的时候（可以说是用到了那个类），就可以把这种关系看成是依赖，依赖也可以说是一种偶然的关系。  比如上面的人和火车的关系：在某个方法中偶然用到了它，但在现实中我和它并没多大关系。</code></pre><p><strong>总结</strong><br>依赖关系还是比较好理解的，注意和关联关系的区别及符号的表示方式不同，一个用虚箭头，一个用实箭头。</p><h3 id="（2）-泛化（Generalization）关系（相当于继承）"><a href="#（2）-泛化（Generalization）关系（相当于继承）" class="headerlink" title="（2） 泛化（Generalization）关系（相当于继承）"></a>（2） 泛化（Generalization）关系（相当于继承）</h3><p>表示一种存在于一般元素和特殊元素之间的分级关系，描述了“is a kind of”（是……的一种）的关系，如汽车是交通工具的一种。在类中一般元素称为超类或父类，特殊元素称为子类。<br>举例:</p><p><img src="https://img-blog.csdnimg.cn/9c0bb454a81d418cb248516078143a03.webp" alt="请添加图片描述"></p><p><img src="https://img-blog.csdnimg.cn/fd28dda99d6e46b5af9db3239870640f.png" alt="箭头要指向父类"><br>箭头要指向父类<br><strong>泛化关系的应用——多态</strong><br>       多态性：在泛化关系中，父类所定义的操作被子类继承之后，可以表现出不同的行为。</p><pre><code>   多态性允许在（有继承关系的）多个类中定义同名的操作，并在每一个类中有不同的实现。</code></pre><p>c#中的多态机制：</p><pre><code>   父类中：可见性 virual返回值类型 方法名（参数）   子类中：可见性 override 返回值类型 方法吗（参数）</code></pre><p>​       </p><p><strong>多态的实现机制</strong></p><p>子类覆盖父类同名的方法。</p><p>当一个类被继承时，他的方法也就被其子类继承。这种继承可以是无条件的继承全部旧方法，也可以重新编写新方法来覆盖旧方法。</p><p>多态就是指不同对象收到相同消息时，会产生不同行为，同一个类在不同的场合下表现出不同的行为特征</p><p>多态的作用：把不同的子类对象都当作父类来看，可以屏蔽不同子类对象之间的差异，写出通用的代码，做出通用的编程，以适应需求的不断变化。</p><h3 id="（3）-关联（Association）关系"><a href="#（3）-关联（Association）关系" class="headerlink" title="（3） 关联（Association）关系"></a>（3） 关联（Association）关系</h3><p>关联用来表示两个或多个类的对象之间的结构关系，它在代码中表现为一个类以属性的形式包含对另一个类的一个或多个对象的应用。</p><p>person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span></span></span><br><span class="line"><span class="class"> 2     </span>&#123;</span><br><span class="line"> <span class="number">3</span>         <span class="keyword">public</span> string name;</span><br><span class="line"> <span class="number">4</span>         <span class="function"><span class="keyword">public</span> <span class="title">person</span><span class="params">(string eName)</span></span></span><br><span class="line"><span class="function"> 5         </span>&#123;</span><br><span class="line"> <span class="number">6</span>             name = eName;</span><br><span class="line"> <span class="number">7</span>         &#125;</span><br><span class="line"> <span class="number">8</span>         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWork</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> 9         </span>&#123;</span><br><span class="line"><span class="number">10</span>             Console.WriteLine(<span class="string">&quot;员工&#123;0&#125;开始工作&quot;</span>,name);</span><br><span class="line"><span class="number">11</span>         &#125;</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>company类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="class"><span class="keyword">class</span> <span class="title">company</span></span></span><br><span class="line"><span class="class"> 2     </span>&#123;</span><br><span class="line"> <span class="number">3</span>         <span class="keyword">public</span> string name;     <span class="comment">//公司名称</span></span><br><span class="line"> <span class="number">4</span>       <span class="keyword">public</span> person[ ] employee = <span class="keyword">new</span> person[<span class="number">3</span>]; </span><br><span class="line"> <span class="number">5</span>      </span><br><span class="line"> <span class="number">6</span>         <span class="function"><span class="keyword">public</span> <span class="title">company</span><span class="params">(string cName)</span>  <span class="comment">//构造函数</span></span></span><br><span class="line"><span class="function"> 7         </span>&#123;</span><br><span class="line"> <span class="number">8</span>             name = cName;</span><br><span class="line"> <span class="number">9</span>         &#125;</span><br><span class="line"><span class="number">10</span> </span><br><span class="line"><span class="number">11</span>         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">12         </span>&#123;</span><br><span class="line"><span class="number">13</span>             Console.WriteLine(<span class="string">&quot;公司“&#123;0&#125;”开始运作&quot;</span>,name);</span><br><span class="line"><span class="number">14</span>             employee[<span class="number">0</span>].startWork();</span><br><span class="line"><span class="number">15</span>             employee[<span class="number">1</span>].startWork();</span><br><span class="line"><span class="number">16</span>             employee[<span class="number">2</span>].startWork();</span><br><span class="line"><span class="number">17</span>         &#125;</span><br><span class="line"><span class="number">18</span> </span><br><span class="line"><span class="number">19</span>         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">20         </span>&#123;</span><br><span class="line"><span class="number">21</span>             Console.WriteLine(<span class="string">&quot;公司“&#123;0&#125;”停止运作&quot;</span>, name);</span><br><span class="line"><span class="number">22</span>         &#125;    </span><br><span class="line"><span class="number">23</span>  &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Program类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class"> 2     </span>&#123;</span><br><span class="line"> <span class="number">3</span>         <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"> 4         </span>&#123;</span><br><span class="line"> <span class="number">5</span>             company c = <span class="keyword">new</span> company(<span class="string">&quot;北京能力有限公司&quot;</span>);</span><br><span class="line"> <span class="number">6</span>             c.employee[<span class="number">0</span>] = <span class="keyword">new</span> person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"> <span class="number">7</span>             c.employee[<span class="number">1</span>] = <span class="keyword">new</span> person(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"> <span class="number">8</span>             c.employee[<span class="number">2</span>] = <span class="keyword">new</span> person(<span class="string">&quot;王二&quot;</span>);</span><br><span class="line"> <span class="number">9</span>             c.run();</span><br><span class="line"><span class="number">10</span>             c.stop();</span><br><span class="line"><span class="number">11</span>             Console.Read();</span><br><span class="line"><span class="number">12</span>         &#125;</span><br><span class="line"><span class="number">13</span>     &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的类图：<br><img src="https://img-blog.csdnimg.cn/68e4b0808e084755aeeb0fdec8ebc386.png" alt="请添加图片描述"><br><strong>双向关联</strong>：简而言之就是你中有我，我中有你<br><img src="https://img-blog.csdnimg.cn/d7434d0cf273461d9cba986688b6dd9f.png?x-oss-process=image,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br> <strong>双向关联</strong>关系对应的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">      <span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">      <span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关联的多重性</strong><br>      多重性是指有多少个对象参与了关联。具体的说，是指类A的一个对象对应类B的对象的个数。<br>举例：<br><img src="https://img-blog.csdnimg.cn/69678679c39045f19b790f8131ab43dc.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 狗</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> 腿[] X = <span class="keyword">new</span> 腿[<span class="number">4</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 腿</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>多重性有哪些表示？</code></pre><ul><li><p>1:        表示1个</p></li><li><p>0..<em>：    表示任意多个（ ≥0）（</em>可以换成n）</p></li></ul><ul><li>*：       表示任意多个（ ≥0）</li></ul><ul><li>1..*：    表示1个或多个（≥1）</li><li>0..1：    表示0个或1个</li><li>5..11：   表示5-11个</li><li>1，3，8： 表示个1或3个或8个</li><li>0，3..8： 表示0个或3-8个   </li></ul><h3 id="（4）-聚合（Aggregation）关系"><a href="#（4）-聚合（Aggregation）关系" class="headerlink" title="（4） 聚合（Aggregation）关系"></a>（4） 聚合（Aggregation）关系</h3><p>是一种特殊形式的关联关系。表示整体与部分关系的关联，聚合意味着一个类拥有但共享另一个类的对象。简单来说，就是关联关系中的一组元素组成了一个更大、更复杂的单元。描述了“has  a”的关系。如大学和学院，大学是由很多个学院组成的，因此两者之间是聚合关系。<br><img src="https://img-blog.csdnimg.cn/001a96562d29428296f118e6f21111f6.webp" alt="请添加图片描述"><br>cpu类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cpu</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> string name; <span class="comment">//品牌</span></span><br><span class="line">        <span class="keyword">public</span> string rate; <span class="comment">//主频</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">cpu</span><span class="params">(string cpuName,string cpuRate)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            name = cpuName;</span><br><span class="line">            rate = cpuRate;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>computer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">computer</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> string buyTime;</span><br><span class="line">        <span class="keyword">public</span> string color;</span><br><span class="line">        <span class="keyword">public</span> cpu mycpu;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">computer</span><span class="params">(string computerBuyTime,string computerColor)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            buyTime = computerBuyTime;</span><br><span class="line">            color = computerColor;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cpuInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;该电脑的CPU品牌为：&#123;0&#125;&quot;</span>,mycpu.name);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;该电脑的CPU主频为：&#123;0&#125;&quot;</span>, mycpu.rate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Program类（主类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[ ] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            cpu cpuA = <span class="keyword">new</span> cpu(<span class="string">&quot;Intel&quot;</span>,<span class="string">&quot;2.93&quot;</span>);</span><br><span class="line">            cpu cpuB = <span class="keyword">new</span> cpu(<span class="string">&quot;AMD&quot;</span>,<span class="string">&quot;2.61&quot;</span>);</span><br><span class="line"></span><br><span class="line">            computer computerC = <span class="keyword">new</span> computer(<span class="string">&quot;2008-9-1&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;购买时间为：&#123;0&#125;&quot;</span>, computerC.buyTime);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;颜色为：&#123;0&#125;\n&quot;</span>, computerC.color);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;现在安装第一块CPU&quot;</span>);</span><br><span class="line">            computerC.mycpu = cpuA;  <span class="comment">//将cpuA装入该电脑中</span></span><br><span class="line">            computerC.cpuInfo();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\n现在安装第二块CPU&quot;</span>);</span><br><span class="line">            computerC.mycpu = cpuB;  <span class="comment">//将cpuA装入该电脑中</span></span><br><span class="line">            computerC.cpuInfo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><em>电脑“拥有”cpu</em><br>聚合的符号：在整体类端加空心菱形<br><img src="https://img-blog.csdnimg.cn/dda016599d214015a7cc95044ef1a376.png" alt="请添加图片描述"><br>当整体类不存在时，不分类仍可能存在。部分类销毁时，整体类也将能够存在。</p><pre><code>  关联关系和聚合关系在语法上是没办法区分的，得从语义上才能更好的区分两者的区别。</code></pre><p><strong>组合</strong></p><pre><code>  组合的概念：组成是一种特殊形式的聚合。  与聚合相比，它有两个特点：</code></pre><p> 一个部分类最多只能属于一个整体类<br>当整体类不存在时，部分类将同时被销毁。<br>     最容易理解的一个例子就是窗体和文本框，当窗体不存在时，文本框也将不存在<br>      <img src="https://img-blog.csdnimg.cn/7595dd8aec7a40ffbdb03e976e27a93e.png" alt="请添加图片描述"><br>组合的符号：</p><pre><code>  在整体类端加实心菱形。如图：</code></pre><p><img src="https://img-blog.csdnimg.cn/9a818636d49e4745a2100b6de4481b58.png" alt="请添加图片描述"><br><strong>关联与聚合（包括组合）的区别</strong><br>       关联关系所涉及的两个类是处于同一个层次上的。比如学生和课程就是一种关联关系，而不是聚合关系，因为学生不是有课程组成的。</p><pre><code>   聚合关系涉及的两个类处于不平等的层次上，一个代表整体，一个代表部分。比如电脑和显示器、键盘、主板、内存就是聚合关系，因为主板是电脑的组成部分。而键盘等部件不会因为电脑没了，就不存在了。</code></pre><p><strong>聚合与组合的区别：</strong></p><pre><code>  组合：整体类端的重数必须是1，部分类的重数是任意的。  聚合：整体类端的重数可以大于1，部分类的重数是任意的。</code></pre><h3 id="（5）-实现（Realization）关系"><a href="#（5）-实现（Realization）关系" class="headerlink" title="（5） 实现（Realization）关系"></a>（5） 实现（Realization）关系</h3><p><strong>接口的概念:</strong><br>       接口是一组没有实现的操作的集合。接口只提供操作的声明，不提供任何相应的功能代码。具体的功能代码由使用该接口的类实现，这叫做实现关系。</p><pre><code>   一般意义的操作：</code></pre><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">2</span>   &#123;</span><br><span class="line"><span class="number">3</span>        Console.WriteLine(<span class="string">&quot;&#123;0&#125;风扇加速转动&quot;</span>,name);</span><br><span class="line"><span class="number">4</span>   &#125;</span><br></pre></td></tr></table></figure><pre><code>  没有实现的操作：</code></pre><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnUp</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure><p> <strong>c#中定义接口的方法</strong>      </p><pre><code>  [可见性] interface 接口名｛[返回值类型] 方法名([参数]);｝</code></pre><ul><li>接口中只能包含方法、属性、索引器和事件的声明，没有字段和构造函数。</li><li>接口中的操作都被视为公有的，不需要添加可见性。</li><li>接口中只能提供方法的格式声明，而不能包含方法的实现，所以接口方法的声明总是以分号结束。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;时序图：&quot;&gt;&lt;a href=&quot;#时序图：&quot; class=&quot;headerlink&quot; title=&quot;时序图：&quot;&gt;&lt;/a&gt;时序图：&lt;/h1&gt;&lt;h2 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么&quot;&gt;&lt;/a&gt;是什</summary>
      
    
    
    
    <category term="软件工程" scheme="https://chenchuanze123.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Java基础教程</title>
    <link href="https://chenchuanze123.github.io/2021/12/11/Java%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    <id>https://chenchuanze123.github.io/2021/12/11/Java%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</id>
    <published>2021-12-11T09:48:11.000Z</published>
    <updated>2022-01-31T05:43:27.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一句话目标"><a href="#一句话目标" class="headerlink" title="一句话目标"></a>一句话目标</h1><p><em>对于一些比较复杂或者第一眼看上去不太好理解的概念，我信奉的观念就是，用一句话把它解释清楚，而且是用很通俗的语言，当然了，如果你已经能够很好的理解了，还是建议用不是那么正式但又不是很通俗的语言解释。</em><br>所以我接下来我会用<strong>一句话</strong>这个标签来解释这些难懂的概念。</p><p><strong>C/C++与Java编译运行过程对比：</strong><br><img src="https://img-blog.csdnimg.cn/3aa569df39d14808ba812ac74487fec0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Li75Yqo5byP5a2m5Lmg5LiN6KKr5Yqo,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>数据溢出：<br>byte是一个字节的数据类型，所以它的表示范围是-128~127<br>当我们此范围之外的数赋值给byte类型变量时，会发生数据溢出，溢出的方式就是<img src="https://img-blog.csdnimg.cn/c827b18a107e481184a7b4349de3bb07.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5Li75Yqo5byP5a2m5Lmg5LiN6KKr5Yqo,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>比127大的数要接着顺时针转，假如是128，比127大1，那就是移动一个数变成-128假如是129，比127大2，那就是移动两个数变成-127，这样以此类推；<br>比-128小的数要接着逆时针，假如是-129，比-128小1，那就移动一个数变成127，假如是-130，比-128小2，那就是移动两个数变成126，其他数据类型也以此类推。</p><h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="编程语言的几个发展阶段"><a href="#编程语言的几个发展阶段" class="headerlink" title="编程语言的几个发展阶段"></a>编程语言的几个发展阶段</h2><p><strong>面向机器语言      ——》面向过程语言——》面向对象语言<br>（二进制、汇编）——》C语言           ——》Java语言</strong></p><p>在面向过程编程中我们是以“方法”为主体的<br>而面向对象编程汇总我们是以“对象”为主体的<br>在面向对象语言的学习过程中，一个简单的理念就是，需要完成某种任务的时候，我们首先想到是谁去完成（对象）；提到某个数据的时候，想到是谁的数据，这样也更符合我们日常生活中的描述。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类？类是干什么的呢？<br><strong>一句话</strong>：类是用来描述和抽象具有相同属性和行为的一类事物的概念，就比如说人类，猫类，狗类，家禽类，这些类中的动物都有相同的属性和行为。<br>那么如何声明一个类呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;<span class="comment">//声明了一个人类</span></span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line">String Name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">int</span> Age;</span><br><span class="line">String Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员变量的赋值问题"><a href="#成员变量的赋值问题" class="headerlink" title="成员变量的赋值问题"></a>成员变量的赋值问题</h3><p>Java规定不能在类中对成员变量进行赋值，但是你可以在类中对成员变量赋初始值，要想对成员变量赋值必须要在方法体内部进行<br>举个列子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;<span class="comment">//声明的同时赋初始值，正确</span></span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">b = <span class="number">27</span>;<span class="comment">//非法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">b = b-<span class="number">19</span>;<span class="comment">//在类中赋值，正确</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象的创建与构造方法"><a href="#对象的创建与构造方法" class="headerlink" title="对象的创建与构造方法"></a>对象的创建与构造方法</h2><p>类也可以看做是一种数据类型，也可以用来声明变量，而用类声明的变量被称为对象。<br>既然类有了，总得有对象来体现这个类的属性和行为吧，那我们就可以创建对象来体现了<br>创建对象要用关键字<code>new</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">People zs;<span class="comment">//声明对象张三</span></span><br><span class="line">People zs = <span class="keyword">new</span> People();<span class="comment">//创建对象张三</span></span><br></pre></td></tr></table></figure><p>构造方法的名称必须与它坐在的类名称完全一致，而且没有类型，可以有参数，参数一般就是对对象的成员变量进行赋值。<br>所以这样看起来构造方法在创建对象以及对对象进行初始化起到了至关重要的作用。<br>构造方法可以有多个，但是其参数一定不同（参数类型、参数个数）。<br>构造方法不就是把对象的值赋值给实例变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;<span class="comment">//创建了一个人类</span></span><br><span class="line"><span class="comment">//成员变量</span></span><br><span class="line"><span class="comment">//注意：当没有指定成员变量的值时，其都有默认值，String为null，int为0，float为0.0，boolean为flase</span></span><br><span class="line">String Name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">int</span> Age;</span><br><span class="line">String Id;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">People(String N)&#123;<span class="comment">//构造函数</span></span><br><span class="line">Name = N;</span><br><span class="line">&#125;</span><br><span class="line">People(String s)&#123;<span class="comment">//构造函数</span></span><br><span class="line">sex = s;</span><br><span class="line">&#125;</span><br><span class="line">People()&#123;<span class="comment">//构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象的内存模型"><a href="#对象的内存模型" class="headerlink" title="对象的内存模型"></a>对象的内存模型</h3><p>声明对象和创建对象是有区别的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">People zs;<span class="comment">//声明对象张三</span></span><br><span class="line"><span class="comment">//声明对象，内存为空</span></span><br><span class="line"></span><br><span class="line">People zs = <span class="keyword">new</span> People();<span class="comment">//创建对象张三，可以看做是new一个构造方法</span></span><br><span class="line"><span class="comment">/*创建对象，分配内存，先为成员变量</span></span><br><span class="line"><span class="comment">String Name;</span></span><br><span class="line"><span class="comment">boolean sex;</span></span><br><span class="line"><span class="comment">int Age;</span></span><br><span class="line"><span class="comment">String Id;</span></span><br><span class="line"><span class="comment">分配内存，如果未赋值再赋给默认值，最后new运算符会计算出一个引用值（地址值），即表达式new People()是一个值。</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/cf381b5b6b8c4dc0a121ef5cff17fd2b.png" alt="声明对象"><br><img src="https://img-blog.csdnimg.cn/597f54eb1dd74dd99c0c8f71449b3641.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_20,color_FFFFFF,t_70,g_se,x_16" alt="创建对象"></p><p>这个内存模型啊，告诉我们一件事，声明和创建区别很大</p><h2 id="类与程序的基本结构"><a href="#类与程序的基本结构" class="headerlink" title="类与程序的基本结构"></a>类与程序的基本结构</h2><p>一个应用程序可以有多个源文件，一个源文件可以有多个类，但是一定要有一个主类<br><img src="https://img-blog.csdnimg.cn/95e56e55fbfe41d9807ed44c59b0676b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="参数传值"><a href="#参数传值" class="headerlink" title="参数传值"></a>参数传值</h2><p> 说一下<strong>引用型参数</strong><br>当参数是数组、对象、接口的时候，称之为引用型参数，传的是<strong>引用</strong>（地址）而不是实体<br>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Battery</span></span>&#123;<span class="comment">//电池类</span></span><br><span class="line"><span class="keyword">int</span> e;<span class="comment">//电量</span></span><br><span class="line">Battery(<span class="keyword">int</span> a)&#123;</span><br><span class="line">e = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Radio</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">openRadio</span><span class="params">(Battery battery)</span></span>&#123;</span><br><span class="line"> battery.e = battery.e - <span class="number">10</span>;<span class="comment">//消耗了电量</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  Battery b = <span class="keyword">new</span> Battery(<span class="number">100</span>);<span class="comment">//创建一个电池对象,电量初始化为100</span></span><br><span class="line">  Radio r = <span class="keyword">new</span> Radio();<span class="comment">//创建一个收音机对象</span></span><br><span class="line">  r.openRadio(b);<span class="comment">//参数为电池对象b，此时就相当于把b的值赋给Battery Battery</span></span><br><span class="line">  <span class="comment">//而b = new Battery(),所以在方法openRadio中就相当于Battery battery = new Battery()</span></span><br><span class="line">  <span class="comment">//由上可知道对象b和battery他们两个是一模一样的，他们具有相同的引用，故具有完全相同的变量</span></span><br><span class="line">  <span class="comment">//并且battery就相当于b的复印件，复印件的改变不会影响原件</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="对象的组合"><a href="#对象的组合" class="headerlink" title="对象的组合"></a>对象的组合</h2><p><strong>一句话</strong>：将其他类的对象作为自己的成员变量<br>对象组合的本质就是一个类的数据成员变量存的不是基本的数据类型，而是一个对象的地址<br>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> rad;<span class="comment">//半径</span></span><br><span class="line"><span class="keyword">double</span> area;<span class="comment">//面积</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>&#123;</span><br><span class="line"> area = <span class="number">3.14</span>*r*r;</span><br><span class="line"> <span class="keyword">return</span> area;</span><br><span class="line"> &#125;</span><br><span class="line">Circle(<span class="keyword">double</span> r)&#123;</span><br><span class="line"> rad = r;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circular</span></span>&#123;<span class="comment">//圆锥类</span></span><br><span class="line"></span><br><span class="line"> Circle bottom;</span><br><span class="line"> <span class="keyword">double</span> h;</span><br><span class="line"> </span><br><span class="line"> Circular(<span class="keyword">double</span> height)&#123;</span><br><span class="line">  h = height;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setBottom</span><span class="params">(Circle c)</span></span>&#123;</span><br><span class="line">   bottom = c;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="function"><span class="keyword">double</span><span class="title">getVolme</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(bottom == <span class="keyword">null</span>)</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">return</span> bottom.getArea()*h/<span class="number">3.0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example0</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  Circle c = <span class="keyword">new</span> Circle(<span class="number">100</span>);</span><br><span class="line">  Circular cu = <span class="keyword">new</span> Circular(<span class="number">20</span>);</span><br><span class="line">  cu.setBottom(c);</span><br><span class="line">  <span class="keyword">int</span> V = cu.getVolme();</span><br><span class="line">  System.out.println(<span class="string">&quot;圆锥的体积为：&quot;</span>+V);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="实例成员与类成员"><a href="#实例成员与类成员" class="headerlink" title="实例成员与类成员"></a>实例成员与类成员</h2><p>首先类成员中的类变量被所有对象共享，也就是所有的对象的类变量是相同的一处内存空间，并且通过类名访问类变量和通过对象访问类变量都可以改变类变量的值。<br>加载类的字节码文件的时候，类变量已经分配了内存，而成员变量没有；当该类创建对象时，才会给实例对象分配内存</p><p>实例成员就是正常的变量和方法<br>类成员就是静态的变量和方法（前面加了static修饰的）<br><img src="https://img-blog.csdnimg.cn/c33df37929da4fe0b03b3929d29e11d9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5aSq5LiK546E6YGT,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>类变量也叫做static变量、静态变量、全局变量，我叫它共享变量，分配给这些对象的类变量占有相同的一处内存，改变其中一个对象的这个类变量，其他对象的这个类变量也会跟着变；static方法可以重写，重写就是子类可以重写父类已有的方法。</p><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><p>在类中，用static声明的成员变量为静态成员变量，也成为类变量。类变量的生命周期和类相同，在整个应用程序执行期间都有效。</p><p>这里要强调一下：</p><ul><li>static修饰的成员变量和方法，从属于类</li><li>普通变量和方法从属于对象</li><li>静态方法不能调用非静态成员，编译会报错</li></ul><h3 id="static关键字的用途"><a href="#static关键字的用途" class="headerlink" title="static关键字的用途"></a>static关键字的用途</h3><p>一句话描述就是：方便在没有创建对象的情况下进行调用(方法/变量)。</p><p>显然，被static关键字修饰的方法或者变量不需要依赖于对象来进行访问，只要类被加载了，就可以通过类名去进行访问。</p><p>static可以用来修饰类的成员方法、类的成员变量，另外也可以编写static代码块来优化程序性能</p><h3 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h3><p>static方法也成为静态方法，由于静态方法不依赖于任何对象就可以直接访问，因此对于静态方法来说，是没有this的，因为不依附于任何对象，既然都没有对象，就谈不上this了，并且由于此特性，在静态方法中不能访问类的非静态成员变量和非静态方法，因为非静态成员变量和非静态方法都必须依赖于具体的对象才能被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虽然在静态方法中不能访问非静态成员方法和非静态成员变量，但是在非静态成员方法中是可以访问静态成员方法和静态成员变量。</span><br></pre></td></tr></table></figure><p><strong>代码示例</strong><br><img src="https://img-blog.csdnimg.cn/77e29a8e76b349b99854a29e3226a395.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>从上面代码里看出：</p><ul><li>静态方法test2()中调用非静态成员变量address，编译失败。这是因为，在编译期并没有对象生成，address变量根本就不存在。</li><li>静态方法test2()中调用非静态方法test1()，编译失败。这是因为，编译器无法预知在非静态成员方法test1()中是否访问了非静态成员变量，所以也禁止在静态方法中调用非静态成员方法</li><li>非静态成员方法test1()访问静态成员方法test2()/变量name是没有限制的</li></ul><p>所以，如果想在不创建对象的情况下调用某个方法，就可以将这个方法设置为static。最常见的静态方法就是main方法，这就是为什么main方法是静态方法就一目了然了，因为程序在执行main方法的时候没有创建任何对象，只有通过类名来访问。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">int</span> a;<span class="comment">//类变量</span></span><br><span class="line"> <span class="keyword">float</span> b;<span class="comment">//成员变量</span></span><br><span class="line"> </span><br><span class="line"> set_a(<span class="keyword">int</span> A)&#123;</span><br><span class="line">  a = A;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;<span class="comment">//类方法</span></span><br><span class="line">  System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">d</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//成员方法</span></span><br><span class="line">  <span class="keyword">int</span> c;</span><br><span class="line">  <span class="keyword">return</span> c = x*y;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">  A.a = <span class="number">10</span>; <span class="comment">//通过类名给类变量a赋值,10</span></span><br><span class="line">  A a1 = <span class="keyword">new</span> A();</span><br><span class="line">  System.out.println(A.a);<span class="comment">//输出10</span></span><br><span class="line">  a1.set_a(<span class="number">20</span>);<span class="comment">//通过对象调用给类变量赋值，20</span></span><br><span class="line">  System.out.println(A.a);<span class="comment">//输出20</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>实例方法和类方法的区别：</p><p> 1.</p><ul><li>有对象才有实例方法的入口地址；将类的字节码文件加载至jvm内存时，不会为实例方法分配内存；</li><li>但是会给类方法分配入口地址。多个对象的实例方法的入口是相同的，也就是实例方法的入口地址被共享；</li><li>只有在所有的对象被回收时，入口地址才会被取消；</li><li>而类方法的入口地址在程序退出的时候才被取消。</li></ul><p>2.</p><ul><li>可以把类变量放在实例方法中（把有static修饰的变量放在没有static修饰的方法中），也就是实例方法可以操作类变量；</li><li>但是类方法不可以操作实例变量；原因是：再类创建对象之前，实例成员变量还没有分配内存空间。</li></ul><ol start="3"><li>static方法中只能有static变量</li></ol><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><p>顾名思义是对方法进行重新加载。<br>那么对哪些方法会重新加载呢？<br>同一个方法名，但是它们参数的类型不同，它们参数的个数不同。<br>这种例子很多啊，比如说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line">f();</span><br><span class="line">f(<span class="keyword">double</span> a,<span class="keyword">double</span> b);</span><br><span class="line"><span class="comment">//这三个方法如果放在同一个类中，那么就叫做对f进行方法重载</span></span><br></pre></td></tr></table></figure><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><p>this是当前对象的引用，就是说当前用构造函数建的对象是谁，这个this就代表谁，它是一个引用。<br>this可以出现在：</p><ul><li>实例方法</li><li>构造方法</li><li>但是不可以出现在类方法中</li></ul><p>不就是你的方法的参数名跟你的成员变量名一样的时候，你要是执行语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">成员变量名=参数名</span><br></pre></td></tr></table></figure><p>就必须写成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.成员变量名=参数名</span><br></pre></td></tr></table></figure><p>注：</p><ol><li>通常情况下：可以省略成员变量名字前的“this.”，以及static变量前的“类名.”；</li><li>this不能出现在类方法中， 因为类方法可以通过类名直接调用，这时可能还没有对象诞生。<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2></li></ol><p>一句话说明包的目的：区分不同文件中相同类</p><h2 id="import语句"><a href="#import语句" class="headerlink" title="import语句"></a>import语句</h2><p>一句话：相当于C语言中的<code>#include</code>，就是导入在源程序中要用的各种库或者自己写好的接口。<br>也就是在同一目录下的Java文件是互通的，要通过import与其他包文件进行通讯。<br>在java中使用类库就是创建相应的对象（所以说Java是面向对象的语言）。<br>如果使用import导入了包中的所有类，那么会增加编译时间，但是不会影响程序的性能，因为jvm只加载自己程序要用的（可Java本来就慢啊= =）。</p><h2 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h2><p><img src="https://img-blog.csdnimg.cn/45abe9830c6a49ee8bbf192e7420f41f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>类方法总是可以操作类中的类变量，与访问控制符没有关系。</p><ol><li>public<br>被public标记的变量和方法在任何地方的对象都可以访问（类内部、本包、子类、外部包）</li><li>protected<br>被propected标记的变量和方法仅在本包内可以访问。</li><li>友好的<br>同上</li><li>private<br>只有类内部使用</li></ol><p>注：</p><ul><li>只能用public来修饰类</li><li>权限由高到低：public——&gt;protected——&gt;友好的——&gt;private</li></ul><p><strong>protected和友好型的区别：</strong><br>当子类和父类不在同一个包中时，父类中的private和友好访问权限的成员变量和方法不会被子类继承；在同一个包中时，子类会将父类的变量和方法除private之外全部继承。<br>如果子类和父类不在同一个包中，子类不继承父类的友好成员变量和方法</p><h2 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h2><p>如果要一次定义很多对象，建议使用对象数组而不是定义多个对象。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h1 id="子类与继承"><a href="#子类与继承" class="headerlink" title="子类与继承"></a>子类与继承</h1><h2 id="子类与父类"><a href="#子类与父类" class="headerlink" title="子类与父类"></a>子类与父类</h2><p>既然我们的代码要描述我们的现实生活那么应该怎么做呢？我们显示生活中父亲生儿子这种事，那可是几乎都存在的啊，不管是人类，还是其他生物，几乎都存在，那就我们也让我们的代码可以继承，让我们原本定义的类，可以让他派生自己的子类，也就是让子类来继承父类的一些属性以及行为。（儿子只能有一个爹，爹却可以生很多儿子）<br>那么继承的关键字是什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends</span><br></pre></td></tr></table></figure><p>最简单的例子啊,人类是个父类，学生类是个子类，那可以这么说:学生类继承了人类</p><h3 id="人类"><a href="#人类" class="headerlink" title="人类"></a>人类</h3><h4 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h4><ul><li>姓名</li><li>性别</li><li>年龄</li><li>身份证号</li></ul><h4 id="行为："><a href="#行为：" class="headerlink" title="行为："></a>行为：</h4><ul><li>喝水</li><li>跑步</li><li>散步</li><li>吃饭</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">String Name;</span><br><span class="line"><span class="keyword">char</span> sex;</span><br><span class="line"><span class="keyword">int</span> Age;</span><br><span class="line">String Id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么学生类要继承人类的话，就要把人类所有的属性都原封不动的继承过来，然后如果学生类有需求的话再在学生类中填入自己需要的属性或行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">String strID;<span class="comment">//新添的属性学号</span></span><br><span class="line">String Subject;<span class="comment">//课程</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exercise</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//广播体操</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">finalExam</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//期末考试</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这些属性和行为是新添加的，都是学生所特有的</p><h2 id="子类的继承性"><a href="#子类的继承性" class="headerlink" title="子类的继承性"></a>子类的继承性</h2><p><strong>在同一包中：</strong><br>在同一个包中子类继承父类时，不会继承private标记的成员变量和方法，但是会继承友好的成员变量和方法。（父亲的隐私可不兴看啊）<br><strong>不在同一包中：</strong><br>不在同一个包中的子类继承父类时，private和友好的成员变量和方法都不会继承。</p><p><strong>protected进一步说明的举例：</strong><br>我们有一个类D，还有一个类C</p><ul><li>D类中自己声明的protected成员变量和方法，只要D跟C在同一包中，则在C类中创建的D对象可以访问这些protected成员变量和方法；</li><li>D类继承自己父类的那些protected成员变量和方法，需要追溯到这些protected成员变量和方法所在的祖先类跟C类是否在同一包中，若在，则在C类中创建的D对象可以访问这些protected成员变量和方法，反之，则不可以。</li></ul><h2 id="子类与对象"><a href="#子类与对象" class="headerlink" title="子类与对象"></a>子类与对象</h2><p>创建子类对象时，jvm不仅会为<strong>子类的成员变量</strong>分配内存还会为<strong>父类的成员变量</strong>分配内存。<br>但是我们知道子类继承父类时，并不会全部东西都继承过来，有时候会因为不在同一个包中，protected、友好型和private都不能继承，那么父类这个时候为什么还要为这些不能继承的成员变量分配内存呢？<br>答案是：子类会用那些从父类继承过来的方法来<strong>操作</strong>这部分未继承的变量。</p><h2 id="成员变量的隐藏和方法重写"><a href="#成员变量的隐藏和方法重写" class="headerlink" title="成员变量的隐藏和方法重写"></a>成员变量的隐藏和方法重写</h2><p> 在子类继承父类的过程中，因为要继承两部分：变量和方法</p><ul><li>自己再写一遍父类有的变量就叫做隐藏  </li><li>自己再写一遍父类有的方法就叫重写</li></ul><h3 id="继承中成员变量的访问特点："><a href="#继承中成员变量的访问特点：" class="headerlink" title="继承中成员变量的访问特点："></a>继承中成员变量的访问特点：</h3><p>在父子 类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：</p><ol><li>直接通过子类对象访问成员变量：也就是<code>对象.成员变量</code>，规则是：创建对象时，等号左边是谁，就优先使用谁，没有则向上找。</li><li>间接通过成员方法访问成员变量：该方法属于谁，就优先用谁，没有则向上找。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numFu = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用的是本类当中的，不会向下找子类的</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numZi = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 因为本类当中有num，所以这里用的是本类的num</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在父子类的继承关系当中，如果成员变量重名，则创建子类对象时，访问有两种方式：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">直接通过子类对象访问成员变量：</span></span><br><span class="line"><span class="comment">    等号左边是谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment">间接通过成员方法访问成员变量：</span></span><br><span class="line"><span class="comment">    该方法属于谁，就优先用谁，没有则向上找。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ExtendsField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu fu = <span class="keyword">new</span> Fu(); <span class="comment">// 创建父类对象</span></span><br><span class="line">        System.out.println(fu.numFu); <span class="comment">// 只能使用父类的东西，没有任何子类内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Zi zi = <span class="keyword">new</span> Zi();</span><br><span class="line"></span><br><span class="line">        System.out.println(zi.numFu); <span class="comment">// 10</span></span><br><span class="line">        System.out.println(zi.numZi); <span class="comment">// 20</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等号左边是谁，就优先用谁</span></span><br><span class="line">        System.out.println(zi.num); <span class="comment">// 优先子类，200</span></span><br><span class="line"><span class="comment">//        System.out.println(zi.abc); // 到处都没有，编译报错！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;===========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个方法是子类的，优先用子类的，没有再向上找</span></span><br><span class="line">        zi.methodZi(); <span class="comment">// 200</span></span><br><span class="line">        <span class="comment">// 这个方法是在父类当中定义的，</span></span><br><span class="line">        zi.methodFu(); <span class="comment">// 100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>在父子类的继承关系当中，创建子类对象，访问成员方法的规则：</p><p> <font color=#ff2200 size=3 face="黑体">     创建的对象是谁，就优先用谁，如果没有则向上找。</font></p><p> 注意事项：<br>无论是成员方法还是成员变量，如果没有都是向上找父类，绝对不会向下找子类的。</p><p> 如何理解这个隐藏呢？</p><p> <font color=#ff2200 size=3 face="黑体"> 就是我子类不是会继承你父类的部分变量吗？<br> 比如父类有一个变量：<br> public a；<br> 如果我在子类中也声明了public a ；<br> 那么子类从父类继承的a就会被隐藏。<br> 说白了就是你子类要是有的话就用自己的，可以不用父类的了（这个“不用”就可以理解隐藏），要是没有，那就用父类的。</font>)</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li>方法：看等号右边（创建的是谁），就优先调用谁</li><li>变量：看等号左边是谁，就优先调用谁；看方法属于谁，就优先调用谁</li></ul><h2 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a>重写与重载</h2><p><img src="https://img-blog.csdnimg.cn/b231f34e9fd04bc49cc542b8735b8db4.png" alt="在这里插入图片描述"><br>重写就是我子类重新写父类的一些同名方法，返回值和形参都不能改变。<strong>即外壳不变，核心重写</strong>！</p><h3 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h3><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为 final 的方法不能被重写。声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。<br>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br>最常用的地方就是构造器的重载。</p><h3 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则:"></a>重载规则:</h3><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li> 被重载的方法可以改变返回类型； </li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常； </li><li>方法能够在同一个类中或者在一个子类中被重载。 </li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h2 id="super关键字（super≈父类）"><a href="#super关键字（super≈父类）" class="headerlink" title="super关键字（super≈父类）"></a>super关键字（super≈父类）</h2><p>super关键字的用法有三种：<br>1.在子类的成员方法中，访问父类的成员变量。<br>2.在子类的成员方法中，访问父类的成员方法。<br>3.在子类的构造方法中，访问父类的构造方法。</p><p><strong>一句话说明作用：</strong><br>当你在子类的方法中需要访问父类的变量或者方法时，就需要使用super关键字来访问。<br>很显然super这个关键字也是跟继承、父类和子类有关的概念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">Zi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">methodZi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.num); <span class="comment">//父类中的num</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.method(); <span class="comment">//访问父类中的method</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <font color=#ff2200 size=3 face="黑体">注意：super 语句必须是子类构造方法的第一条语句。不能在子类中使用父类构造方法名来调用父类构造方法。 父类的构造方法不被子类继承。调用父类的构造方法的唯一途径是使用 super 关键字，如果子类中没显式调用，则编译器自动将 super(); 作为子类构造方法的第一条语句。静态方法中不能使用 super 关键字。 </font></p><p>调用父类的方法语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>.方法名(参数列表);</span><br></pre></td></tr></table></figure><p>如果是继承的方法，是没有必要使用 super 来调用，直接即可调用。但如果子类覆盖或重写了父类的方法，则只有使用 super 才能在子类中调用父类中的被重写的方法。</p><h2 id="final关键字（不变）"><a href="#final关键字（不变）" class="headerlink" title="final关键字（不变）"></a>final关键字（不变）</h2><ul><li>修饰类：不可以有子类</li><li>修饰方法：可以被继承，但继承后不能被重写。（老老实实继承）</li><li>修饰变量：变为常量</li></ul><p><strong>final 修饰类中的属性或者变量</strong>：</p><p>无论属性是基本类型还是引用类型，final 所起的作用都是变量里面存放的”值”不能变。</p><p>这个值，对于基本类型来说，变量里面放的就是实实在在的值，如 1，”abc” 等。</p><p>而引用类型变量里面放的是个地址，所以用 final 修饰引用类型变量指的是它里面的地址不能变，并不是说这个地址所指向的对象或数组的内容不可以变，这个一定要注意。</p><p>例如：类中有一个属性是 final Person p=new Person(“name”); 那么你不能对 p 进行重新赋值，但是可以改变 p 里面属性的值 p.setName(‘newName’);</p><p>final 修饰属性，声明变量时可以不赋值，而且一旦赋值就不能被修改了。对 final 属性可以在三个地方赋值：声明时、初始化块中、构造方法中，总之一定要赋值。</p><h2 id="Java-转型问题"><a href="#Java-转型问题" class="headerlink" title="Java 转型问题"></a>Java 转型问题</h2><p>Java 转型问题其实并不复杂，只要记住一句话：父类引用指向子类对象。<br>什么叫父类引用指向子类对象，且听我慢慢道来。</p><p>从 2 个名词开始说起：<strong>向上转型(upcasting)</strong> 、**向下转型(downcasting)**。</p><p>举个例子：有2个类，Father 是父类，Son 类继承自 Father。</p><p>第 1 个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Father f1 = <span class="keyword">new</span> Son();   <span class="comment">// 这就叫 upcasting （向上转型)</span></span><br><span class="line"><span class="comment">// 现在 f1 引用指向一个Son对象</span></span><br><span class="line"></span><br><span class="line">Son s1 = (Son)f1;   <span class="comment">// 这就叫 downcasting (向下转型)</span></span><br><span class="line"><span class="comment">// 现在f1 还是指向 Son对象</span></span><br></pre></td></tr></table></figure><p>第 2 个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Father f2 = <span class="keyword">new</span> Father();</span><br><span class="line">Son s2 = (Son)f2;       <span class="comment">// 出错，子类引用不能指向父类对象</span></span><br></pre></td></tr></table></figure><p>你或许会问，第1个例子中：<code>Son s1 = (Son)f1</code>; 问为什么是正确的呢。</p><p>很简单因为 f1 指向一个子类对象，<code>Father f1 = new Son();</code> 子类 s1 引用当然可以指向子类对象了。</p><p>而 f2 被传给了一个 Father 对象，<code>Father f2 = new Father();</code> 子类 s2 引用不能指向父类对象。</p><p>总结：</p><p>1、父类引用指向子类对象，而子类引用不能指向父类对象。</p><p>2、把子类对象直接赋给父类引用叫upcasting向上转型，向上转型不用强制转换吗，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Father f1 = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure><p>3、把指向子类对象的父类引用赋给子类引用叫向下转型(downcasting)，要强制转换，如：</p><p>f1 就是一个指向子类对象的父类引用。把f1赋给子类引用 s1 即 <strong>Son s1 = (Son)f1</strong>;</p><p>其中 f1 前面的(Son)必须加上，进行强制转换。</p><h3 id="对象的上转型对象"><a href="#对象的上转型对象" class="headerlink" title="对象的上转型对象"></a>对象的上转型对象</h3><p> 通俗地讲即是将子类对象转为父类对象。</p><p> 上转型对象的特点：</p><ul><li>上转型对象不能操作子类新增的变量和方法</li><li>上转型对象可以访问子类继承或者隐藏的成员变量，也可以调用子类继承的方法或者重写的方法。</li><li>如果子类重写了父类的某个实例方法后，当上转型对象调用这个方法时，一定调用的是子类重写的，若子类重写了父类的static方法，则调用时只能调用父类的。</li><li>不可以将父类创建的对象的应用赋值给子类声明的对象（不能说：人是中国人）<br>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;animal eatting...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;bird eatting...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;bird flying...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Animal b=<span class="keyword">new</span> Bird(); <span class="comment">//向上转型</span></span><br><span class="line">    b.eat(); </span><br><span class="line">    <span class="comment">//! error: b.fly(); b虽指向子类对象，但此时丢失fly()方法</span></span><br><span class="line">    dosleep(<span class="keyword">new</span> Male());</span><br><span class="line">    dosleep(<span class="keyword">new</span> Female());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意这里的向上转型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Animal b=<span class="keyword">new</span> Bird(); <span class="comment">//向上转型</span></span><br><span class="line">b.eat();</span><br></pre></td></tr></table></figure><p>此处将调用子类的 eat() 方法。原因：b 实际指向的是 Bird 子类，故调用时会调用子类本身的方法。</p><p>需要注意的是：<br> <font color=#ff2200 size=3 face="黑体"> 向上转型时 b 会遗失除与父类对象共有的其他方法。如本例中的 fly 方法不再为 b 所有。</font><br>因此输出结果：<code>bird eatting...</code></p><h3 id="对象的下转型对象"><a href="#对象的下转型对象" class="headerlink" title="对象的下转型对象"></a>对象的下转型对象</h3><p>与向上转型相反，即是把父类对象转为子类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smile</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;girl smile()...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MMGirl</span> <span class="keyword">extends</span> <span class="title">Girl</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;MMirl smile sounds sweet...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;MMirl c()...&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Girl g1=<span class="keyword">new</span> MMGirl(); <span class="comment">//向上转型</span></span><br><span class="line">    g1.smile();</span><br><span class="line">    </span><br><span class="line">    MMGirl mmg=(MMGirl)g1; <span class="comment">//向下转型,编译和运行皆不会出错</span></span><br><span class="line">    mmg.smile();</span><br><span class="line">    mmg.c();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    Girl g2=<span class="keyword">new</span> Girl();</span><br><span class="line"><span class="comment">//    MMGirl mmg1=(MMGirl)g2; //不安全的向下转型,编译无错但会运行会出错</span></span><br><span class="line"><span class="comment">//    mmg1.smile();</span></span><br><span class="line"><span class="comment">//    mmg1.c();</span></span><br><span class="line"><span class="comment">/*output:</span></span><br><span class="line"><span class="comment">* CGirl smile sounds sweet...</span></span><br><span class="line"><span class="comment">* CGirl smile sounds sweet...</span></span><br><span class="line"><span class="comment">* CGirl c()...</span></span><br><span class="line"><span class="comment">* Exception in thread &quot;main&quot; java.lang.ClassCastException: com.wensefu.other1.Girl</span></span><br><span class="line"><span class="comment">* at com.wensefu.other1.Main.main(Girl.java:36)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">if</span>(g2 <span class="keyword">instanceof</span> MMGirl)&#123;</span><br><span class="line">      MMGirl mmg1=(MMGirl)g2; </span><br><span class="line">      mmg1.smile();</span><br><span class="line">      mmg1.c();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Girl g1=new MMGirl(); //向上转型</span><br><span class="line">g1.smile();</span><br><span class="line">MMGirl mmg=(MMGirl)g1; //向下转型,编译和运行皆不会出错</span><br></pre></td></tr></table></figure><p>这里的向下转型是安全的。因为 g1 指向的是子类对象。</p><p>而</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Girl g2=new Girl();</span><br><span class="line">MMGirl mmg1=(MMGirl)g2; //不安全的向下转型,编译无错但会运行会出错</span><br></pre></td></tr></table></figure><p>运行出错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.ClassCastException: com.wensefu.other1.Girl</span><br><span class="line">    at com.wensefu.other1.Main.main(Girl.java:36)</span><br></pre></td></tr></table></figure><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。</p><p>如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。<br>子类构造方法总是先调用父类的构造方法，你没写super（有参数），则默认你写了super（无参数）。<br>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  SuperClass()&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass(int n)&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass()&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass(int n):&quot;</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass2 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass2()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2(int n):&quot;</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuperSub</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass 类继承------&quot;</span>);</span><br><span class="line">    SubClass sc1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">    SubClass sc2 = <span class="keyword">new</span> SubClass(<span class="number">100</span>); </span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass2 类继承------&quot;</span>);</span><br><span class="line">    SubClass2 sc3 = <span class="keyword">new</span> SubClass2();</span><br><span class="line">    SubClass2 sc4 = <span class="keyword">new</span> SubClass2(<span class="number">200</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------SubClass 类继承------</span><br><span class="line">SuperClass()</span><br><span class="line"><span class="function">SubClass</span></span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"><span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span>:100</span></span><br><span class="line"><span class="function">------SubClass2 类继承------</span></span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">SubClass2</span></span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span>:200</span></span><br></pre></td></tr></table></figure><p>好像有点感觉了，我们将代码做一点改动，再次感受一下:<br>在<code>subClass（）</code>构造方法中添一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">super</span>(<span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>然后将父类有参数构造方法改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass(int n)&quot;</span>+<span class="keyword">this</span>.n);</span><br></pre></td></tr></table></figure><p>再次运行,得到结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------SubClass 类继承------</span><br><span class="line">SuperClass(<span class="keyword">int</span> n)<span class="number">200</span></span><br><span class="line"><span class="function">SubClass</span></span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">(<span class="keyword">int</span> n)</span>300</span></span><br><span class="line"><span class="function"><span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span>:100</span></span><br><span class="line"><span class="function">------SubClass2 类继承------</span></span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">(<span class="keyword">int</span> n)</span>300</span></span><br><span class="line"><span class="function">SubClass2</span></span><br><span class="line"><span class="function"><span class="title">SuperClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span>:200</span></span><br></pre></td></tr></table></figure><h2 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h2><p>首先多态是个跟继承有关的概念，<br>什么叫多态？<br>多态就是在描述生活<br>举个例子<br>多态就是我有一个动物类，然后动物类派生了两个子类，猫类和狗类<br>我当初在动物类中写了一个方法：发出叫声<br>很显然猫跟狗的叫声不一样，一个喵喵，一个汪汪，那么我当初在动物类中写的这个发出叫声的方法现在如果这两个子类要用的话，是不是就得在猫类和狗类里面重写了，重写完之后，这整个过程就叫做多态<br>多态就是 同一个方法的不同实现。</p><h2 id="abstract类和abstract方法"><a href="#abstract类和abstract方法" class="headerlink" title="abstract类和abstract方法"></a>abstract类和abstract方法</h2><p> 在java中我们用abstract关键字来表达抽象。举个例子：<br>我们说车子都可以跑(run)。但有几个轮子，怎么跑，对于不同的车有不同的结果。自行车需要人踩着跑，汽车发动机推动跑等等，那么我们可以车表达为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车子类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自行车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;人踩着跑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automobile</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;发动机驱动跑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的理解是抽象更像是一种概念，只要是抽象的就不需要具象，抽象类不需要实例化，抽象方法不需要在本类中实现。<br>抽象方法是一个概念，不用实现！！只要你在一个方法前冠以abstract，那这个方法就变成了一个概念，你不需要去实现一个概念。抽象方法跟接口中的方法是类似的，都不需要实现，所以我们没办法直接调用抽象方法</p><p> abstract类中声明的abstract方法要在子类中实现，如果子类未实现必须要将子类也声明为abstract：<br> <img src="https://img-blog.csdnimg.cn/6b495f4a67ba474bb0dbfc42af1b43a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>abstract类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、用<span class="keyword">abstract</span>关键字来表达的类，其表达形式为：（<span class="keyword">public</span>）<span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、抽象类不能被实例化，也就是说我们没法直接<span class="keyword">new</span> 一个抽象类。抽象类本身就代表了一个类型，无法</span><br><span class="line">确定为一个具体的对象，所以不能实例化就合乎情理了，只能有它的继承类实例化。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、抽象类虽然不能被实例化，但有自己的构造方法（这个后面再讨论）</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、抽象类与接口（<span class="class"><span class="keyword">interface</span>）有很大的不同之处，接口中不能有实例方法去实现业务逻辑，而抽象类</span></span><br><span class="line"><span class="class">中可以有实例方法，并实现业务逻辑，比如我们可以在抽象类中创建和销毁一个线程池。</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">5、抽象类不能使用<span class="title">final</span>关键字修饰，因为<span class="title">final</span>修饰的类是无法被继承，而对于抽象类来说就是</span></span><br><span class="line"><span class="class">需要通过继承去实现抽象方法，这又会产生矛盾。（后面将写一篇关于<span class="title">finally</span>的文章详细讨论）</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>abstract方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、从上面的例子中我们可以看到抽象方法跟普通方法是有区别的，它没有自己的主体（没有&#123;&#125;包起来的</span><br><span class="line">业务逻辑），跟接口中的方法有点类似。所以我们没法直接调用抽象方法</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、抽象方法不能用<span class="keyword">private</span>修饰，因为抽象方法必须被子类实现（覆写），而<span class="keyword">private</span>权限对于子类来</span><br><span class="line">说是不能访问的，所以就会产生矛盾</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、抽象方法也不能用<span class="keyword">static</span>修饰，试想一下，如果用<span class="keyword">static</span>修饰了，那么我们可以直接通过类名调</span><br><span class="line">用，而抽象方法压根就没有主体，没有任何业务逻辑，这样就毫无意义了。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。</span></span><br><span class="line"><span class="comment">抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用抽象类和抽象方法：</span></span><br><span class="line"><span class="comment">1. 不能直接创建new抽象类对象。</span></span><br><span class="line"><span class="comment">2. 必须用一个子类来继承抽象父类。</span></span><br><span class="line"><span class="comment">3. 子类必须覆盖重写抽象父类当中所有的抽象方法。</span></span><br><span class="line"><span class="comment">覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。</span></span><br><span class="line"><span class="comment">4. 创建子类对象进行使用。</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h1 id="接口与实现"><a href="#接口与实现" class="headerlink" title="接口与实现"></a>接口与实现</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p> <font color=#ff2200 size=3 face="黑体">官方解释：Java接口是一系列方法的声明，是一些方法特征的集合，一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能）。</font></p><p> 个人理解：接口可以理解为一种特殊的类，里面全部是由全局常量和公共的抽象方法所组成。接口是解决Java无法使用多继承的一种手段，但是接口在实际中更多的作用是制定标准的。或者我们可以直接把接口理解为100%的抽象类，既接口中的方法必须全部是抽象方法。（JDK1.8之前可以这样理解）</p><h2 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h2><p>就像一个类一样，一个接口也能够拥有方法和属性，但是在接口中声明的方法默认是抽象的。（即只有方法标识符，而没有方法体）。</p><p>如果一个类实现了一个接口中要求的所有的方法，然而没有提供方法体而仅仅只有方法标识，那么这个类一定是一个抽象类。（必须记住：抽象方法只能存在于抽象类或者接口中，但抽象类中却能存在非抽象方法，即有方法体的方法。接口是百分之百的抽象类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义子类，继承父类，实现接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br></pre></td></tr></table></figure><h2 id="接口定义与实现"><a href="#接口定义与实现" class="headerlink" title="接口定义与实现"></a>接口定义与实现</h2><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>定义接口用关键词<strong>interface</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在任何版本的Java中，接口都能定义抽象方法。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public abstract 返回值类型 方法名称(参数列表);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">1. 接口当中的抽象方法，修饰符必须是两个固定的关键字：public abstract</span></span><br><span class="line"><span class="comment">2. 这两个关键字修饰符，可以选择性地省略。（今天刚学，所以不推荐。）</span></span><br><span class="line"><span class="comment">3. 方法的三要素，可以随意定义。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这也是抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">methodAbs2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这也是抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs3</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这也是抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodAbs4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口当中也可以定义“成员变量”，但是必须使用public static final三个关键字进行修饰。</span></span><br><span class="line"><span class="comment">从效果上看，这其实就是接口的【常量】。</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">public static final 数据类型 常量名称 = 数据值;</span></span><br><span class="line"><span class="comment">备注：</span></span><br><span class="line"><span class="comment">一旦使用final关键字进行修饰，说明不可改变。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">1. 接口当中的常量，可以省略public static final，注意：不写也照样是这样。</span></span><br><span class="line"><span class="comment">2. 接口当中的常量，必须进行赋值；不能不赋值。</span></span><br><span class="line"><span class="comment">3. 接口中常量的名称，使用完全大写的字母，用下划线进行分隔。（推荐命名规则）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterfaceConst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这其实就是一个常量，一旦赋值，不可以修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_OF_MY_CLASS = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceAbstractImpl</span> <span class="keyword">implements</span> <span class="title">MyInterfaceAbstract</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是第一个方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是第二个方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是第三个方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是第四个方法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="abstract类与接口的比较"><a href="#abstract类与接口的比较" class="headerlink" title="abstract类与接口的比较"></a>abstract类与接口的比较</h2><p>在Java语言中，abstract class和interface是支持抽象类定义的两种机制。正是由于这两种机制的存在，才赋予了Java强大的面向对象能力。abstract class和interface之间在对于抽象类定义的支持方面具有很大的相似性，甚至可以相互替换，因此很多开发者在进行抽象类定义时对于abstract class和interface的选择显得比较随意。其实，两者之间还是有很大的区别的，对于它们的选择甚至反映出对于问题领域本质的理解、对于设计意图的理解是否正确、合理。<br><img src="https://img-blog.csdnimg.cn/da79f0bad9794e67b5f08adc979b5926.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA546E54G16aOO,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ol><li>1.相同点<br>A. 两者都是抽象类，都不能实例化。<br>B. interface实现类及abstrct class的子类都必须要实现已经声明的抽象方法。</li></ol><ol start="2"><li><p>不同点<br> A. interface需要实现，要用implements，而abstract class需要继承，要用extends。<br> B. 一个类可以实现多个interface，但一个类只能继承一个abstract class。<br> C. interface强调特定功能的实现，而abstract class强调所属关系。<br> D. 尽管interface实现类及abstrct class的子类都必须要实现相应的抽象方法，但实现的形式不同。interface中的每一个方法都是抽象方法，都只是声明的 (declaration, 没有方法体)，实现类必须要实现。而abstract class的子类可以有选择地实现。<br> 这个选择有两点含义：<br> 一是Abastract class中并非所有的方法都是抽象的，只有那些冠有abstract的方法才是抽象的，子类必须实现。那些没有abstract的方法，在Abstrct class中必须定义方法体。<br> 二是abstract class的子类在继承它时，对非抽象方法既可以直接继承，也可以覆盖；而对抽象方法，可以选择实现，也可以通过再次声明其方法为抽象的方式，无需实现，留给其子类来实现，但此类必须也声明为抽象类。既是抽象类，当然也不能实例化。<br> E. abstract class是interface与Class的中介。<br> interface是完全抽象的，只能声明方法，而且只能声明pulic的方法，不能声明private及protected的方法，不能定义方法体，也 不能声明实例变量。然而，interface却可以声明常量变量，并且在JDK中不难找出这种例子。但将常量变量放在interface中违背了其作为接 口的作用而存在的宗旨，也混淆了interface与类的不同价值。如果的确需要，可以将其放在相应的abstract class或Class中。<br> abstract class在interface及Class中起到了承上启下的作用。一方面，abstract class是抽象的，可以声明抽象方法，以规范子类必须实现的功能；另一方面，它又可以定义缺省的方法体，供子类直接使用或覆盖。另外，它还可以定义自己 的实例变量，以供子类通过继承来使用。</p></li><li><p>interface的应用场合<br> A. 类与类之前需要特定的接口进行协调，而不在乎其如何实现。<br> B. 作为能够实现特定功能的标识存在，也可以是什么接口方法都没有的纯粹标识。<br> C. 需要将一组类视为单一的类，而调用者只通过接口来与这组类发生联系。<br> D. 需要实现特定的多项功能，而这些功能之间可能完全没有任何联系。</p></li><li><p>abstract class的应用场合<br> 一句话，在既需要统一的接口，又需要实例变量或缺省的方法的情况下，就可以使用它。最常见的有：<br> A. 定义了一组接口，但又不想强迫每个实现类都必须实现所有的接口。可以用abstract class定义一组方法体，甚至可以是空方法体，然后由子类选择自己所感兴趣的方法来覆盖。<br> B. 某些场合下，只靠纯粹的接口不能满足类与类之间的协调，还必需类中表示状态的变量来区别不同的关系。abstract的中介作用可以很好地满足这一点。<br> C. 规范了一组相互协调的方法，其中一些方法是共同的，与状态无关的，可以共享的，无需子类分别实现；而另一些方法却需要各个子类根据自己特定的状态来实现特定的功能。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一句话目标&quot;&gt;&lt;a href=&quot;#一句话目标&quot; class=&quot;headerlink&quot; title=&quot;一句话目标&quot;&gt;&lt;/a&gt;一句话目标&lt;/h1&gt;&lt;p&gt;&lt;em&gt;对于一些比较复杂或者第一眼看上去不太好理解的概念，我信奉的观念就是，用一句话把它解释清楚，而且是用很通俗的语</summary>
      
    
    
    
    
    <category term="Java" scheme="https://chenchuanze123.github.io/tags/Java/"/>
    
    <category term="编程语言" scheme="https://chenchuanze123.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>什么是AOP(通俗易懂)</title>
    <link href="https://chenchuanze123.github.io/2021/11/24/%E4%BB%80%E4%B9%88%E6%98%AFAOP-%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/"/>
    <id>https://chenchuanze123.github.io/2021/11/24/%E4%BB%80%E4%B9%88%E6%98%AFAOP-%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82/</id>
    <published>2021-11-24T03:24:56.000Z</published>
    <updated>2022-01-31T05:45:54.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="怎么通俗怎么来，什么是AOP-思想-呢？"><a href="#怎么通俗怎么来，什么是AOP-思想-呢？" class="headerlink" title="怎么通俗怎么来，什么是AOP 思想 呢？"></a>怎么通俗怎么来，什么是AOP 思想 呢？</h2><p>举个例子：就是有三个方法A,B,C，这三个逼都想找女朋友，那就来一个getGril（）方法吧，然后在A,B,C中都调用一遍getGirl方法，这样A,B,C都顺利找到了女朋友。<br>接着来了一位好兄弟D，他说凭什么要在我的方法内部调用getGirl呢？<br>D坦露：我确实是想找女朋友的，我也确实是想调用她，可是我这方法体实在没有地方盛getGirl（）了，何况爷的方法内部那都是主要业务，能不能跟getGril（）方法说一声，在她那边记录一下，跟她说让她看着点，在我的方法内部中当我的rich（）方法执行完了，就帮我调用一下getGirl（）。<br>getGirl（）听完想了想觉得也合理，就在自己的“<strong>登记表</strong>”中标注了一下，大致意思就是在D执行完rich（）方法后就帮他调用自己（大意就是等D有钱了就找女朋友，悲）。</p><h2 id="我突然觉得解决问题的关键或许是：换个角度，换个立场。"><a href="#我突然觉得解决问题的关键或许是：换个角度，换个立场。" class="headerlink" title="我突然觉得解决问题的关键或许是：换个角度，换个立场。"></a>我突然觉得解决问题的关键或许是：换个角度，换个立场。</h2><p>为什么这么说呢？<br>你看我们以前调用方法那都是什么，都是在方法中写入要调用的方法名，就像上面举得例子一样，要在自己的方法体中调用getGirl方法，这样就让我们自己方法的内部显得很冗杂。打个比方：在没有用AOP之前这个getGirl就像是静态的，她就坐在那里，一动不动，你要用她，她就帮你做事；而当用了AOP之后，她变成动态的了，她就像是变了一个人，她变得主动起来了，她开始关心其他的方法是不是要调用她了。<br>就像是：以前都是其他方法追着跟她说，某时某刻要调用一下你</p><h2 id="相当于：被动等待"><a href="#相当于：被动等待" class="headerlink" title="相当于：被动等待"></a>相当于：被动等待</h2><p>而现在是：她追着其他方法问：你们要调用我吗？调用的话就来我这登记一下</p><h2 id="相当于：主动出击"><a href="#相当于：主动出击" class="headerlink" title="相当于：主动出击"></a>相当于：主动出击</h2><p>如果上述内容懂了，那么去看AOP的概念来理解AOP就可能好理解了：<br><strong>这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。</strong><br><strong>类的指定方法、指定位置</strong>：说的就是要调用她的方法。<br>我理解的这个<strong>动态</strong>就是：动态地在登记表中去寻找要调用她的方法(A,B,C,D)，动态的将自己的代码切入（插入）到要调用她的方法（A,B,C,D）中.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;怎么通俗怎么来，什么是AOP-思想-呢？&quot;&gt;&lt;a href=&quot;#怎么通俗怎么来，什么是AOP-思想-呢？&quot; class=&quot;headerlink&quot; title=&quot;怎么通俗怎么来，什么是AOP 思想 呢？&quot;&gt;&lt;/a&gt;怎么通俗怎么来，什么是AOP 思想 呢？&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://chenchuanze123.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="面向切面" scheme="https://chenchuanze123.github.io/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2/"/>
    
    <category term="动态代理" scheme="https://chenchuanze123.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
</feed>
